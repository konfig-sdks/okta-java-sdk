/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApplicationUpdateLogoRequest;
import com.konfigthis.client.model.Brand;
import com.konfigthis.client.model.EmailTemplate;
import com.konfigthis.client.model.EmailTemplateContent;
import com.konfigthis.client.model.EmailTemplateCustomization;
import com.konfigthis.client.model.EmailTemplateCustomizationRequest;
import com.konfigthis.client.model.EmailTemplateTestRequest;
import com.konfigthis.client.model.EmailTemplateTouchPointVariant;
import com.konfigthis.client.model.EndUserDashboardTouchPointVariant;
import com.konfigthis.client.model.ErrorPageTouchPointVariant;
import java.io.File;
import com.konfigthis.client.model.ImageUploadResponse;
import com.konfigthis.client.model.SignInPageTouchPointVariant;
import com.konfigthis.client.model.Theme;
import com.konfigthis.client.model.ThemeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrandApi
 */
@Disabled
public class BrandApiTest {

    private static BrandApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BrandApi(apiClient);
    }

    /**
     * Create Email Template Customization
     *
     * Create an email customization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailTemplateCustomizationTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        String body = null;
        Boolean isDefault = null;
        String language = null;
        String subject = null;
        EmailTemplateCustomization response = api.createEmailTemplateCustomization(brandId, templateName)
                .body(body)
                .isDefault(isDefault)
                .language(language)
                .subject(subject)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Email Customization
     *
     * Delete an email customization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailCustomizationTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        String customizationId = null;
        api.deleteEmailCustomization(brandId, templateName, customizationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Email Template Customization
     *
     * Delete all customizations for an email template. Also known as “Reset to Default”.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailTemplateCustomizationsTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        api.deleteEmailTemplateCustomizations(brandId, templateName)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a Theme background image
     *
     * Deletes a Theme background image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThemeBackgroundImageTest() throws ApiException {
        String brandId = null;
        String themeId = null;
        api.deleteThemeBackgroundImage(brandId, themeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a Theme favicon. The org then uses the Okta default favicon.
     *
     * Deletes a Theme favicon. The org then uses the Okta default favicon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThemeFaviconTest() throws ApiException {
        String brandId = null;
        String themeId = null;
        api.deleteThemeFavicon(brandId, themeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a Theme logo. The org then uses the Okta default logo.
     *
     * Deletes a Theme logo. The org then uses the Okta default logo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThemeLogoTest() throws ApiException {
        String brandId = null;
        String themeId = null;
        api.deleteThemeLogo(brandId, themeId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Brands
     *
     * List all the brands in your org.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllBrandsTest() throws ApiException {
        List<Brand> response = api.getAllBrands()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Brand
     *
     * Fetches a brand by &#x60;brandId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String brandId = null;
        Brand response = api.getById(brandId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Preview Content of Email Customization
     *
     * Get a preview of an email template customization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailCustomizationPreviewTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        String customizationId = null;
        EmailTemplateContent response = api.getEmailCustomizationPreview(brandId, templateName, customizationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Email Template
     *
     * Fetch an email template by templateName
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        EmailTemplate response = api.getEmailTemplate(brandId, templateName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Email Template Customization
     *
     * Fetch an email customization by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateCustomizationByIdTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        String customizationId = null;
        EmailTemplateCustomization response = api.getEmailTemplateCustomizationById(brandId, templateName, customizationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Default Content of Email Template
     *
     * Fetch the default content for an email template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateDefaultContentTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        EmailTemplateContent response = api.getEmailTemplateDefaultContent(brandId, templateName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Preview of Email Template Default Content
     *
     * Fetch a preview of an email template&#39;s default content by populating velocity references with the current user&#39;s environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateDefaultContentPreviewTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        EmailTemplateContent response = api.getEmailTemplateDefaultContentPreview(brandId, templateName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Preview of Email Template Default Content
     *
     * Send a test email to the current users primary and secondary email addresses. The email content is selected based on the following priority: An email customization specifically for the users locale. The default language of email customizations. The email templates default content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateDefaultContentPreview_0Test() throws ApiException {
        String brandId = null;
        String templateName = null;
        String customizationId = null;
        api.getEmailTemplateDefaultContentPreview_0(brandId, templateName)
                .customizationId(customizationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a theme for a brand
     *
     * Fetches a theme for a brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThemeByIdTest() throws ApiException {
        String brandId = null;
        String themeId = null;
        ThemeResponse response = api.getThemeById(brandId, themeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Brand Themes
     *
     * List all the themes in your brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThemesTest() throws ApiException {
        String brandId = null;
        List<ThemeResponse> response = api.getThemes(brandId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Email Template Customization
     *
     * List all email customizations for an email template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmailTemplateCustomizationsTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        List<EmailTemplateCustomization> response = api.listEmailTemplateCustomizations(brandId, templateName)
                .execute();
        // TODO: test validations
    }

    /**
     * List Email Templates
     *
     * List email templates in your organization with pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmailTemplatesTest() throws ApiException {
        String brandId = null;
        String after = null;
        Integer limit = null;
        List<EmailTemplate> response = api.listEmailTemplates(brandId)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Brand
     *
     * Updates a brand by &#x60;brandId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByBrandIdTest() throws ApiException {
        String brandId = null;
        Map<String, Object> links = null;
        Boolean agreeToCustomPrivacyPolicy = null;
        String customPrivacyPolicyUrl = null;
        String id = null;
        Boolean removePoweredByOkta = null;
        Brand response = api.updateByBrandId(brandId)
                .links(links)
                .agreeToCustomPrivacyPolicy(agreeToCustomPrivacyPolicy)
                .customPrivacyPolicyUrl(customPrivacyPolicyUrl)
                .id(id)
                .removePoweredByOkta(removePoweredByOkta)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Email Customization
     *
     * Update an email customization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailCustomizationTest() throws ApiException {
        String brandId = null;
        String templateName = null;
        String customizationId = null;
        String body = null;
        Boolean isDefault = null;
        String language = null;
        String subject = null;
        EmailTemplateCustomization response = api.updateEmailCustomization(brandId, templateName, customizationId)
                .body(body)
                .isDefault(isDefault)
                .language(language)
                .subject(subject)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a theme for a brand
     *
     * Updates a theme for a brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateThemeTest() throws ApiException {
        String brandId = null;
        String themeId = null;
        Map<String, Object> links = null;
        String backgroundImage = null;
        EmailTemplateTouchPointVariant emailTemplateTouchPointVariant = null;
        EndUserDashboardTouchPointVariant endUserDashboardTouchPointVariant = null;
        ErrorPageTouchPointVariant errorPageTouchPointVariant = null;
        String primaryColorContrastHex = null;
        String primaryColorHex = null;
        String secondaryColorContrastHex = null;
        String secondaryColorHex = null;
        SignInPageTouchPointVariant signInPageTouchPointVariant = null;
        ThemeResponse response = api.updateTheme(brandId, themeId)
                .links(links)
                .backgroundImage(backgroundImage)
                .emailTemplateTouchPointVariant(emailTemplateTouchPointVariant)
                .endUserDashboardTouchPointVariant(endUserDashboardTouchPointVariant)
                .errorPageTouchPointVariant(errorPageTouchPointVariant)
                .primaryColorContrastHex(primaryColorContrastHex)
                .primaryColorHex(primaryColorHex)
                .secondaryColorContrastHex(secondaryColorContrastHex)
                .secondaryColorHex(secondaryColorHex)
                .signInPageTouchPointVariant(signInPageTouchPointVariant)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the background image for your Theme
     *
     * Updates the background image for your Theme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateThemeBackgroundImageTest() throws ApiException {
        File _file = null;
        String brandId = null;
        String themeId = null;
        ImageUploadResponse response = api.updateThemeBackgroundImage(_file, brandId, themeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the favicon for your theme
     *
     * Updates the favicon for your theme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateThemeFaviconTest() throws ApiException {
        File _file = null;
        String brandId = null;
        String themeId = null;
        ImageUploadResponse response = api.updateThemeFavicon(_file, brandId, themeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a themes logo
     *
     * Updates the logo for your Theme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateThemeLogoTest() throws ApiException {
        File _file = null;
        String brandId = null;
        String themeId = null;
        ImageUploadResponse response = api.updateThemeLogo(_file, brandId, themeId)
                .execute();
        // TODO: test validations
    }

}
