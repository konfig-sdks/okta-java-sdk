/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AppLink;
import com.konfigthis.client.model.AssignRoleRequest;
import com.konfigthis.client.model.AuthenticationProvider;
import com.konfigthis.client.model.CatalogApplication;
import com.konfigthis.client.model.ChangePasswordRequest;
import com.konfigthis.client.model.CreateUserRequest;
import com.konfigthis.client.model.ForgotPasswordResponse;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.IdentityProvider;
import com.konfigthis.client.model.OAuth2Client;
import com.konfigthis.client.model.OAuth2RefreshToken;
import com.konfigthis.client.model.OAuth2ScopeConsentGrant;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PasswordCredential;
import com.konfigthis.client.model.RecoveryQuestionCredential;
import com.konfigthis.client.model.ResetPasswordToken;
import com.konfigthis.client.model.ResponseLinks;
import com.konfigthis.client.model.Role;
import com.konfigthis.client.model.RoleType;
import com.konfigthis.client.model.Subscription;
import com.konfigthis.client.model.TempPassword;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserActivationToken;
import com.konfigthis.client.model.UserCredentials;
import com.konfigthis.client.model.UserProfile;
import com.konfigthis.client.model.UserStatus;
import com.konfigthis.client.model.UserType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private static UserApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserApi(apiClient);
    }

    /**
     * Activate User
     *
     * Activates a user.  This operation can only be performed on users with a &#x60;STAGED&#x60; status.  Activation of a user is an asynchronous operation. The user will have the &#x60;transitioningToStatus&#x60; property with a value of &#x60;ACTIVE&#x60; during activation to indicate that the user hasn&#39;t completed the asynchronous operation.  The user will have a status of &#x60;ACTIVE&#x60; when the activation process is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateLifecycleTest() throws ApiException {
        String userId = null;
        Boolean sendEmail = null;
        UserActivationToken response = api.activateLifecycle(userId, sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Add App Instance Target to App Administrator Role given to a User
     *
     * Add App Instance Target to App Administrator Role given to a User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppInstanceTargetToAppAdministratorRoleGivenToUserTest() throws ApiException {
        String userId = null;
        String roleId = null;
        String appName = null;
        String applicationId = null;
        api.addAppInstanceTargetToAppAdministratorRoleGivenToUser(userId, roleId, appName, applicationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Assigns a role to a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignRoleTest() throws ApiException {
        String userId = null;
        RoleType type = null;
        Boolean disableNotifications = null;
        Role response = api.assignRole(userId)
                .type(type)
                .disableNotifications(disableNotifications)
                .execute();
        // TODO: test validations
    }

    /**
     * Change Password
     *
     * Changes a user&#39;s password by validating the user&#39;s current password. This operation can only be performed on users in &#x60;STAGED&#x60;, &#x60;ACTIVE&#x60;, &#x60;PASSWORD_EXPIRED&#x60;, or &#x60;RECOVERY&#x60; status that have a valid password credential
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordValidationTest() throws ApiException {
        String userId = null;
        PasswordCredential newPassword = null;
        PasswordCredential oldPassword = null;
        Boolean strict = null;
        UserCredentials response = api.changePasswordValidation(userId)
                .newPassword(newPassword)
                .oldPassword(oldPassword)
                .strict(strict)
                .execute();
        // TODO: test validations
    }

    /**
     * Create User
     *
     * Creates a new user in your Okta organization with or without credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewUserTest() throws ApiException {
        UserCredentials credentials = null;
        List<String> groupIds = null;
        UserProfile profile = null;
        UserType type = null;
        Boolean activate = null;
        Boolean provider = null;
        String nextLogin = null;
        User response = api.createNewUser()
                .credentials(credentials)
                .groupIds(groupIds)
                .profile(profile)
                .type(type)
                .activate(activate)
                .provider(provider)
                .nextLogin(nextLogin)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate User
     *
     * Deactivates a user. This operation can only be performed on users that do not have a &#x60;DEPROVISIONED&#x60; status. While the asynchronous operation (triggered by HTTP header &#x60;Prefer: respond-async&#x60;) is proceeding the user&#39;s &#x60;transitioningToStatus&#x60; property is &#x60;DEPROVISIONED&#x60;. The user&#39;s status is &#x60;DEPROVISIONED&#x60; when the deactivation process is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateLifecycleTest() throws ApiException {
        String userId = null;
        Boolean sendEmail = null;
        api.deactivateLifecycle(userId)
                .sendEmail(sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete linked objects for a user, relationshipName can be ONLY a primary relationship name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLinkedObjectsTest() throws ApiException {
        String userId = null;
        String relationshipName = null;
        api.deleteLinkedObjects(userId, relationshipName)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete User
     *
     * Deletes a user permanently.  This operation can only be performed on users that have a &#x60;DEPROVISIONED&#x60; status.  **This action cannot be recovered!**
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermanentlyTest() throws ApiException {
        String userId = null;
        Boolean sendEmail = null;
        api.deletePermanently(userId)
                .sendEmail(sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTargetAppTest() throws ApiException {
        String userId = null;
        String roleId = null;
        String appName = null;
        api.deleteTargetApp(userId, roleId, appName)
                .execute();
        // TODO: test validations
    }

    /**
     * Expire Password
     *
     * This operation transitions the user to the status of &#x60;PASSWORD_EXPIRED&#x60; so that the user is required to change their password at their next login.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expirePasswordAndGetTemporaryPasswordTest() throws ApiException {
        String userId = null;
        User response = api.expirePasswordAndGetTemporaryPassword(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Expire Password
     *
     * This operation transitions the user to the status of &#x60;PASSWORD_EXPIRED&#x60; and the user&#39;s password is reset to a temporary password that is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expirePasswordAndTemporaryPasswordTest() throws ApiException {
        String userId = null;
        TempPassword response = api.expirePasswordAndTemporaryPassword(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Forgot Password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws ApiException {
        String userId = null;
        ForgotPasswordResponse response = api.forgotPassword(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Reset Password
     *
     * Generates a one-time token (OTT) that can be used to reset a user&#39;s password.  The OTT link can be automatically emailed to the user or returned to the API caller and distributed using a custom flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePasswordResetTokenTest() throws ApiException {
        String userId = null;
        Boolean sendEmail = null;
        ResetPasswordToken response = api.generatePasswordResetToken(userId, sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets role that is assigne to user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignedRoleTest() throws ApiException {
        String userId = null;
        String roleId = null;
        Role response = api.getAssignedRole(userId, roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a refresh token issued for the specified User and Client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientRefreshTokenTest() throws ApiException {
        String userId = null;
        String clientId = null;
        String tokenId = null;
        String expand = null;
        Integer limit = null;
        String after = null;
        OAuth2RefreshToken response = api.getClientRefreshToken(userId, clientId, tokenId)
                .expand(expand)
                .limit(limit)
                .after(after)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a grant for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrantByIdTest() throws ApiException {
        String userId = null;
        String grantId = null;
        String expand = null;
        OAuth2ScopeConsentGrant response = api.getGrantById(userId, grantId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get linked objects for a user, relationshipName can be a primary or associated relationship name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinkedObjectsTest() throws ApiException {
        String userId = null;
        String relationshipName = null;
        String after = null;
        Integer limit = null;
        List<ResponseLinks> response = api.getLinkedObjects(userId, relationshipName)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Member Groups
     *
     * Fetches the groups of which the user is a member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberGroupsTest() throws ApiException {
        String userId = null;
        List<Group> response = api.getMemberGroups(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Fetches a user from your Okta organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOktaUserTest() throws ApiException {
        String userId = null;
        User response = api.getOktaUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the subscription of a User with a specific notification type
     *
     * Get the subscriptions of a User with a specific notification type. Only gets subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionByNotificationTest() throws ApiException {
        String userId = null;
        String notificationType = null;
        Subscription response = api.getSubscriptionByNotification(userId, notificationType)
                .execute();
        // TODO: test validations
    }

    /**
     * List Users
     *
     * Lists users that do not have a status of &#39;DEPROVISIONED&#39; (by default), up to the maximum (200 for most orgs), with pagination in most cases. A subset of users can be returned that match a supported filter expression or search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActiveUsersTest() throws ApiException {
        String q = null;
        String after = null;
        Integer limit = null;
        String filter = null;
        String search = null;
        String sortBy = null;
        String sortOrder = null;
        List<User> response = api.listActiveUsers()
                .q(q)
                .after(after)
                .limit(limit)
                .filter(filter)
                .search(search)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all App targets for an &#x60;APP_ADMIN&#x60; Role assigned to a User. This methods return list may include full Applications or Instances. The response for an instance will have an &#x60;ID&#x60; value, while Application will not have an ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppTargetsForRoleTest() throws ApiException {
        String userId = null;
        String roleId = null;
        String after = null;
        Integer limit = null;
        List<CatalogApplication> response = api.listAppTargetsForRole(userId, roleId)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Assigned App Links
     *
     * Fetches appLinks for all direct or indirect (via group membership) assigned applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssignedAppLinksTest() throws ApiException {
        String userId = null;
        List<AppLink> response = api.listAssignedAppLinks(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all roles assigned to a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssignedRolesTest() throws ApiException {
        String userId = null;
        String expand = null;
        List<Role> response = api.listAssignedRoles(userId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all client resources for which the specified user has grants or tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClientsTest() throws ApiException {
        String userId = null;
        List<OAuth2Client> response = api.listClients(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all grants for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGrantsTest() throws ApiException {
        String userId = null;
        String scopeId = null;
        String expand = null;
        String after = null;
        Integer limit = null;
        List<OAuth2ScopeConsentGrant> response = api.listGrants(userId)
                .scopeId(scopeId)
                .expand(expand)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all grants for a specified user and client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGrantsForClientTest() throws ApiException {
        String userId = null;
        String clientId = null;
        String expand = null;
        String after = null;
        Integer limit = null;
        List<OAuth2ScopeConsentGrant> response = api.listGrantsForClient(userId, clientId)
                .expand(expand)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Listing IdPs associated with a user
     *
     * Lists the IdPs associated with the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdpsForUserTest() throws ApiException {
        String userId = null;
        List<IdentityProvider> response = api.listIdpsForUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all refresh tokens issued for the specified User and Client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRefreshTokensForUserAndClientTest() throws ApiException {
        String userId = null;
        String clientId = null;
        String expand = null;
        String after = null;
        Integer limit = null;
        List<OAuth2RefreshToken> response = api.listRefreshTokensForUserAndClient(userId, clientId)
                .expand(expand)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoleTargetsGroupsTest() throws ApiException {
        String userId = null;
        String roleId = null;
        String after = null;
        Integer limit = null;
        List<Group> response = api.listRoleTargetsGroups(userId, roleId)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List subscriptions of a User
     *
     * List subscriptions of a User. Only lists subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionsTest() throws ApiException {
        String userId = null;
        List<Subscription> response = api.listSubscriptions(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Reactivate User
     *
     * Reactivates a user.  This operation can only be performed on users with a &#x60;PROVISIONED&#x60; status.  This operation restarts the activation workflow if for some reason the user activation was not completed when using the activationToken from [Activate User](https://raw.githubusercontent.com).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUserTest() throws ApiException {
        String userId = null;
        Boolean sendEmail = null;
        UserActivationToken response = api.reactivateUser(userId)
                .sendEmail(sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove App Instance Target to App Administrator Role given to a User
     *
     * Remove App Instance Target to App Administrator Role given to a User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAppInstanceTargetToAppAdministratorRoleGivenToTest() throws ApiException {
        String userId = null;
        String roleId = null;
        String appName = null;
        String applicationId = null;
        api.removeAppInstanceTargetToAppAdministratorRoleGivenTo(userId, roleId, appName, applicationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTargetGroupTest() throws ApiException {
        String userId = null;
        String roleId = null;
        String groupId = null;
        api.removeTargetGroup(userId, roleId, groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Reset Factors
     *
     * This operation resets all factors for the specified user. All MFA factor enrollments returned to the unenrolled state. The user&#39;s status remains ACTIVE. This link is present only if the user is currently enrolled in one or more MFA factors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetFactorsOperationTest() throws ApiException {
        String userId = null;
        api.resetFactorsOperation(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes all active identity provider sessions. This forces the user to authenticate on the next operation. Optionally revokes OpenID Connect and OAuth refresh and access tokens issued to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAllSessionsTest() throws ApiException {
        String userId = null;
        Boolean oauthTokens = null;
        api.revokeAllSessions(userId)
                .oauthTokens(oauthTokens)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes all refresh tokens issued for the specified User and Client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAllTokensTest() throws ApiException {
        String userId = null;
        String clientId = null;
        api.revokeAllTokens(userId, clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes one grant for a specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeGrantTest() throws ApiException {
        String userId = null;
        String grantId = null;
        api.revokeGrant(userId, grantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes all grants for a specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeGrantsTest() throws ApiException {
        String userId = null;
        api.revokeGrants(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes all grants for the specified user and client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeGrantsForUserAndClientTest() throws ApiException {
        String userId = null;
        String clientId = null;
        api.revokeGrantsForUserAndClient(userId, clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes the specified refresh token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenForClientTest() throws ApiException {
        String userId = null;
        String clientId = null;
        String tokenId = null;
        api.revokeTokenForClient(userId, clientId, tokenId)
                .execute();
        // TODO: test validations
    }

    /**
     * Suspend User
     *
     * Suspends a user.  This operation can only be performed on users with an &#x60;ACTIVE&#x60; status.  The user will have a status of &#x60;SUSPENDED&#x60; when the process is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendLifecycleTest() throws ApiException {
        String userId = null;
        api.suspendLifecycle(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unassigns a role from a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignRoleTest() throws ApiException {
        String userId = null;
        String roleId = null;
        api.unassignRole(userId, roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unlock User
     *
     * Unlocks a user with a &#x60;LOCKED_OUT&#x60; status and returns them to &#x60;ACTIVE&#x60; status.  Users will be able to login with their current password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockUserStatusTest() throws ApiException {
        String userId = null;
        api.unlockUserStatus(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unsuspend User
     *
     * Unsuspends a user and returns them to the &#x60;ACTIVE&#x60; state.  This operation can only be performed on users that have a &#x60;SUSPENDED&#x60; status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsuspendLifecycleTest() throws ApiException {
        String userId = null;
        api.unsuspendLifecycle(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLinkedObjectTest() throws ApiException {
        String associatedUserId = null;
        String primaryRelationshipName = null;
        String primaryUserId = null;
        api.updateLinkedObject(associatedUserId, primaryRelationshipName, primaryUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update User
     *
     * Update a user&#39;s profile and/or credentials using strict-update semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String userId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        OffsetDateTime activated = null;
        OffsetDateTime created = null;
        UserCredentials credentials = null;
        String id = null;
        OffsetDateTime lastLogin = null;
        OffsetDateTime lastUpdated = null;
        OffsetDateTime passwordChanged = null;
        UserProfile profile = null;
        UserStatus status = null;
        OffsetDateTime statusChanged = null;
        UserStatus transitioningToStatus = null;
        UserType type = null;
        Boolean strict = null;
        User response = api.updateProfile(userId)
                .embedded(embedded)
                .links(links)
                .activated(activated)
                .created(created)
                .credentials(credentials)
                .id(id)
                .lastLogin(lastLogin)
                .lastUpdated(lastUpdated)
                .passwordChanged(passwordChanged)
                .profile(profile)
                .status(status)
                .statusChanged(statusChanged)
                .transitioningToStatus(transitioningToStatus)
                .type(type)
                .strict(strict)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a user&#39;s profile or credentials with partial update semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfile_0Test() throws ApiException {
        String userId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        OffsetDateTime activated = null;
        OffsetDateTime created = null;
        UserCredentials credentials = null;
        String id = null;
        OffsetDateTime lastLogin = null;
        OffsetDateTime lastUpdated = null;
        OffsetDateTime passwordChanged = null;
        UserProfile profile = null;
        UserStatus status = null;
        OffsetDateTime statusChanged = null;
        UserStatus transitioningToStatus = null;
        UserType type = null;
        Boolean strict = null;
        User response = api.updateProfile_0(userId)
                .embedded(embedded)
                .links(links)
                .activated(activated)
                .created(created)
                .credentials(credentials)
                .id(id)
                .lastLogin(lastLogin)
                .lastUpdated(lastUpdated)
                .passwordChanged(passwordChanged)
                .profile(profile)
                .status(status)
                .statusChanged(statusChanged)
                .transitioningToStatus(transitioningToStatus)
                .type(type)
                .strict(strict)
                .execute();
        // TODO: test validations
    }

    /**
     * Change Recovery Question
     *
     * Changes a user&#39;s recovery question &amp; answer credential by validating the user&#39;s current password.  This operation can only be performed on users in **STAGED**, **ACTIVE** or **RECOVERY** &#x60;status&#x60; that have a valid password credential
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecoveryQuestionTest() throws ApiException {
        String userId = null;
        PasswordCredential password = null;
        AuthenticationProvider provider = null;
        RecoveryQuestionCredential recoveryQuestion = null;
        UserCredentials response = api.updateRecoveryQuestion(userId)
                .password(password)
                .provider(provider)
                .recoveryQuestion(recoveryQuestion)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRolesCatalogAppsTest() throws ApiException {
        String userId = null;
        String roleId = null;
        api.updateRolesCatalogApps(userId, roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRolesCatalogApps_0Test() throws ApiException {
        String userId = null;
        String roleId = null;
        String appName = null;
        api.updateRolesCatalogApps_0(userId, roleId, appName)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRolesCatalogApps_1Test() throws ApiException {
        String userId = null;
        String roleId = null;
        String groupId = null;
        api.updateRolesCatalogApps_1(userId, roleId, groupId)
                .execute();
        // TODO: test validations
    }

}
