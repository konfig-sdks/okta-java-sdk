/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AppUser;
import com.konfigthis.client.model.AppUserCredentials;
import com.konfigthis.client.model.Application;
import com.konfigthis.client.model.ApplicationAccessibility;
import com.konfigthis.client.model.ApplicationCredentials;
import com.konfigthis.client.model.ApplicationFeature;
import com.konfigthis.client.model.ApplicationGroupAssignment;
import com.konfigthis.client.model.ApplicationLicensing;
import com.konfigthis.client.model.ApplicationPreviewSamlAppMetadataResponse;
import com.konfigthis.client.model.ApplicationSettings;
import com.konfigthis.client.model.ApplicationSignOnMode;
import com.konfigthis.client.model.ApplicationUpdateLogoRequest;
import com.konfigthis.client.model.ApplicationVisibility;
import com.konfigthis.client.model.CapabilitiesCreateObject;
import com.konfigthis.client.model.CapabilitiesObject;
import com.konfigthis.client.model.CapabilitiesUpdateObject;
import com.konfigthis.client.model.ClientSecret;
import com.konfigthis.client.model.ClientSecretMetadata;
import com.konfigthis.client.model.Csr;
import com.konfigthis.client.model.CsrMetadata;
import com.konfigthis.client.model.CsrMetadataSubject;
import com.konfigthis.client.model.CsrMetadataSubjectAltNames;
import java.io.File;
import com.konfigthis.client.model.JsonWebKey;
import com.konfigthis.client.model.OAuth2Actor;
import com.konfigthis.client.model.OAuth2ScopeConsentGrant;
import com.konfigthis.client.model.OAuth2ScopeConsentGrantSource;
import com.konfigthis.client.model.OAuth2ScopeConsentGrantStatus;
import com.konfigthis.client.model.OAuth2Token;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProvisioningConnection;
import com.konfigthis.client.model.ProvisioningConnectionProfile;
import com.konfigthis.client.model.ProvisioningConnectionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Disabled
public class ApplicationApiTest {

    private static ApplicationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ApplicationApi(apiClient);
    }

    /**
     * Activate a client secret
     *
     * Activates a specific client secret by secretId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateClientSecretTest() throws ApiException {
        String appId = null;
        String secretId = null;
        ClientSecret response = api.activateClientSecret(appId, secretId)
                .execute();
        // TODO: test validations
    }

    /**
     * Activate default Provisioning Connection for application
     *
     * Activates the default Provisioning Connection for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateDefaultProvisioningConnectionTest() throws ApiException {
        String appId = null;
        api.activateDefaultProvisioningConnection(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Activate Application
     *
     * Activates an inactive application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateInactiveTest() throws ApiException {
        String appId = null;
        api.activateInactive(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add new client secret
     *
     * Adds a new secret to the client&#39;s collection of secrets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addClientSecretTest() throws ApiException {
        String appId = null;
        String clientSecret = null;
        ClientSecret response = api.addClientSecret(appId)
                .clientSecret(clientSecret)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign Group to Application
     *
     * Assigns a group to an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignGroupToTest() throws ApiException {
        String appId = null;
        String groupId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        Integer priority = null;
        Map<String, Object> profile = null;
        ApplicationGroupAssignment response = api.assignGroupTo(appId, groupId)
                .embedded(embedded)
                .links(links)
                .id(id)
                .lastUpdated(lastUpdated)
                .priority(priority)
                .profile(profile)
                .execute();
        // TODO: test validations
    }

    /**
     * Update application policy
     *
     * Assign an application to a specific policy. This unassigns the application from its currently assigned policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignPolicyToApplicationTest() throws ApiException {
        String appId = null;
        String policyId = null;
        api.assignPolicyToApplication(appId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign User to Application for SSO &amp; Provisioning
     *
     * Assigns an user to an application with [credentials](https://raw.githubusercontent.com) and an app-specific [profile](https://raw.githubusercontent.com). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignUserToApplicationTest() throws ApiException {
        String appId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        AppUserCredentials credentials = null;
        String externalId = null;
        String id = null;
        OffsetDateTime lastSync = null;
        OffsetDateTime lastUpdated = null;
        OffsetDateTime passwordChanged = null;
        Map<String, Object> profile = null;
        String scope = null;
        String status = null;
        OffsetDateTime statusChanged = null;
        String syncState = null;
        AppUser response = api.assignUserToApplication(appId)
                .embedded(embedded)
                .links(links)
                .created(created)
                .credentials(credentials)
                .externalId(externalId)
                .id(id)
                .lastSync(lastSync)
                .lastUpdated(lastUpdated)
                .passwordChanged(passwordChanged)
                .profile(profile)
                .scope(scope)
                .status(status)
                .statusChanged(statusChanged)
                .syncState(syncState)
                .execute();
        // TODO: test validations
    }

    /**
     * Clone Application Key Credential
     *
     * Clones a X.509 certificate for an application key credential from a source application to target application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneApplicationKeyCredentialTest() throws ApiException {
        String appId = null;
        String keyId = null;
        String targetAid = null;
        JsonWebKey response = api.cloneApplicationKeyCredential(appId, keyId, targetAid)
                .execute();
        // TODO: test validations
    }

    /**
     * Add Application
     *
     * Adds a new application to your Okta organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        ApplicationAccessibility accessibility = null;
        OffsetDateTime created = null;
        ApplicationCredentials credentials = null;
        List<String> features = null;
        String id = null;
        String label = null;
        OffsetDateTime lastUpdated = null;
        ApplicationLicensing licensing = null;
        String name = null;
        Map<String, Object> profile = null;
        ApplicationSettings settings = null;
        ApplicationSignOnMode signOnMode = null;
        String status = null;
        ApplicationVisibility visibility = null;
        Boolean activate = null;
        String oktaAccessGatewayAgent = null;
        Application response = api.createNew()
                .embedded(embedded)
                .links(links)
                .accessibility(accessibility)
                .created(created)
                .credentials(credentials)
                .features(features)
                .id(id)
                .label(label)
                .lastUpdated(lastUpdated)
                .licensing(licensing)
                .name(name)
                .profile(profile)
                .settings(settings)
                .signOnMode(signOnMode)
                .status(status)
                .visibility(visibility)
                .activate(activate)
                .oktaAccessGatewayAgent(oktaAccessGatewayAgent)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate a client secret
     *
     * Deactivates a specific client secret by secretId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateClientSecretByIdTest() throws ApiException {
        String appId = null;
        String secretId = null;
        ClientSecret response = api.deactivateClientSecretById(appId, secretId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate default Provisioning Connection for application
     *
     * Deactivates the default Provisioning Connection for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateDefaultProvisioningConnectionTest() throws ApiException {
        String appId = null;
        api.deactivateDefaultProvisioningConnection(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate Application
     *
     * Deactivates an active application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateLifecycleTest() throws ApiException {
        String appId = null;
        api.deactivateLifecycle(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCsrByIdTest() throws ApiException {
        String appId = null;
        String csrId = null;
        api.deleteCsrById(appId, csrId)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate Certificate Signing Request for Application
     *
     * Generates a new key pair and returns the Certificate Signing Request for it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateCsrForApplicationTest() throws ApiException {
        String appId = null;
        CsrMetadataSubject subject = null;
        CsrMetadataSubjectAltNames subjectAltNames = null;
        Csr response = api.generateCsrForApplication(appId)
                .subject(subject)
                .subjectAltNames(subjectAltNames)
                .execute();
        // TODO: test validations
    }

    /**
     * Generates a new X.509 certificate for an application key credential
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateX509CertificateTest() throws ApiException {
        String appId = null;
        Integer validityYears = null;
        JsonWebKey response = api.generateX509Certificate(appId)
                .validityYears(validityYears)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Application
     *
     * Fetches an application from your Okta organization by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String appId = null;
        String expand = null;
        Application response = api.getById(appId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get client secret
     *
     * Gets a specific client secret by secretId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientSecretTest() throws ApiException {
        String appId = null;
        String secretId = null;
        ClientSecret response = api.getClientSecret(appId, secretId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCredentialsCsrsTest() throws ApiException {
        String appId = null;
        String csrId = null;
        Csr response = api.getCredentialsCsrs(appId, csrId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches the default Provisioning Connection for an application.
     *
     * Get default Provisioning Connection for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultProvisioningConnectionTest() throws ApiException {
        String appId = null;
        ProvisioningConnection response = api.getDefaultProvisioningConnection(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a Feature object for an application.
     *
     * Fetches a Feature object for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeatureTest() throws ApiException {
        String appId = null;
        String name = null;
        ApplicationFeature response = api.getFeature(appId, name)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Assigned Group for Application
     *
     * Fetches an application group assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupAssignmentTest() throws ApiException {
        String appId = null;
        String groupId = null;
        String expand = null;
        ApplicationGroupAssignment response = api.getGroupAssignment(appId, groupId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Key Credential for Application
     *
     * Gets a specific application key credential by kid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyCredentialTest() throws ApiException {
        String appId = null;
        String keyId = null;
        JsonWebKey response = api.getKeyCredential(appId, keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a single scope consent grant for the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleScopeConsentGrantTest() throws ApiException {
        String appId = null;
        String grantId = null;
        String expand = null;
        OAuth2ScopeConsentGrant response = api.getSingleScopeConsentGrant(appId, grantId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Assigned User for Application
     *
     * Fetches a specific user assignment for application by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificUserAssignmentTest() throws ApiException {
        String appId = null;
        String userId = null;
        String expand = null;
        AppUser response = api.getSpecificUserAssignment(appId, userId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a token for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenTest() throws ApiException {
        String appId = null;
        String tokenId = null;
        String expand = null;
        OAuth2Token response = api.getToken(appId, tokenId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Grants consent for the application to request an OAuth 2.0 Okta scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantConsentToScopeTest() throws ApiException {
        String appId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        String clientId = null;
        OffsetDateTime created = null;
        OAuth2Actor createdBy = null;
        String id = null;
        String issuer = null;
        OffsetDateTime lastUpdated = null;
        String scopeId = null;
        OAuth2ScopeConsentGrantSource source = null;
        OAuth2ScopeConsentGrantStatus status = null;
        String userId = null;
        OAuth2ScopeConsentGrant response = api.grantConsentToScope(appId)
                .embedded(embedded)
                .links(links)
                .clientId(clientId)
                .created(created)
                .createdBy(createdBy)
                .id(id)
                .issuer(issuer)
                .lastUpdated(lastUpdated)
                .scopeId(scopeId)
                .source(source)
                .status(status)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Applications
     *
     * Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppsTest() throws ApiException {
        String q = null;
        String after = null;
        Integer limit = null;
        String filter = null;
        String expand = null;
        Boolean includeNonDeleted = null;
        List<Application> response = api.listApps()
                .q(q)
                .after(after)
                .limit(limit)
                .filter(filter)
                .expand(expand)
                .includeNonDeleted(includeNonDeleted)
                .execute();
        // TODO: test validations
    }

    /**
     * List Users Assigned to Application
     *
     * Enumerates all assigned [application users](https://raw.githubusercontent.com) for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssignedUsersTest() throws ApiException {
        String appId = null;
        String q = null;
        String queryScope = null;
        String after = null;
        Integer limit = null;
        String filter = null;
        String expand = null;
        List<AppUser> response = api.listAssignedUsers(appId)
                .q(q)
                .queryScope(queryScope)
                .after(after)
                .limit(limit)
                .filter(filter)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * List client secrets
     *
     * Enumerates the client&#39;s collection of secrets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClientSecretsTest() throws ApiException {
        String appId = null;
        List<ClientSecret> response = api.listClientSecrets(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Certificate Signing Requests for Application
     *
     * Enumerates Certificate Signing Requests for an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCsrsForApplicationTest() throws ApiException {
        String appId = null;
        List<Csr> response = api.listCsrsForApplication(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches the Feature objects for an application.
     *
     * List Features for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeaturesTest() throws ApiException {
        String appId = null;
        List<ApplicationFeature> response = api.listFeatures(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Groups Assigned to Application
     *
     * Enumerates group assignments for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsAssignedTest() throws ApiException {
        String appId = null;
        String q = null;
        String after = null;
        Integer limit = null;
        String expand = null;
        List<ApplicationGroupAssignment> response = api.listGroupsAssigned(appId)
                .q(q)
                .after(after)
                .limit(limit)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * List Key Credentials for Application
     *
     * Enumerates key credentials for an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKeyCredentialsTest() throws ApiException {
        String appId = null;
        List<JsonWebKey> response = api.listKeyCredentials(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all scope consent grants for the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScopeConsentGrantsTest() throws ApiException {
        String appId = null;
        String expand = null;
        List<OAuth2ScopeConsentGrant> response = api.listScopeConsentGrants(appId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all tokens for the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokensTest() throws ApiException {
        String appId = null;
        String expand = null;
        String after = null;
        Integer limit = null;
        List<OAuth2Token> response = api.listTokens(appId)
                .expand(expand)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Previews SAML metadata based on a specific key credential for an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewSamlAppMetadataTest() throws ApiException {
        String appId = null;
        String kid = null;
        ApplicationPreviewSamlAppMetadataResponse response = api.previewSamlAppMetadata(appId, kid)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishCsrLifecycleTest() throws ApiException {
        String appId = null;
        String csrId = null;
        JsonWebKey response = api.publishCsrLifecycle(appId, csrId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Group from Application
     *
     * Removes a group assignment from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupAssignmentTest() throws ApiException {
        String appId = null;
        String groupId = null;
        api.removeGroupAssignment(appId, groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Application
     *
     * Removes an inactive application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeInactiveTest() throws ApiException {
        String appId = null;
        api.removeInactive(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes a secret from the client&#39;s collection of secrets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSecretTest() throws ApiException {
        String appId = null;
        String secretId = null;
        api.removeSecret(appId, secretId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User from Application
     *
     * Removes an assignment for a user from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromTest() throws ApiException {
        String appId = null;
        String userId = null;
        Boolean sendEmail = null;
        api.removeUserFrom(appId, userId)
                .sendEmail(sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes all tokens for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAllTokensTest() throws ApiException {
        String appId = null;
        api.revokeAllTokens(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes permission for the application to request the given scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokePermissionTest() throws ApiException {
        String appId = null;
        String grantId = null;
        api.revokePermission(appId, grantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revokes the specified token for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String appId = null;
        String tokenId = null;
        api.revokeToken(appId, tokenId)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets the default Provisioning Connection for an application.
     *
     * Set default Provisioning Connection for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefaultProvisioningConnectionTest() throws ApiException {
        String appId = null;
        ProvisioningConnectionProfile profile = null;
        Boolean activate = null;
        ProvisioningConnection response = api.setDefaultProvisioningConnection(appId)
                .profile(profile)
                .activate(activate)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Application
     *
     * Updates an application in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationInOrgTest() throws ApiException {
        String appId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        ApplicationAccessibility accessibility = null;
        OffsetDateTime created = null;
        ApplicationCredentials credentials = null;
        List<String> features = null;
        String id = null;
        String label = null;
        OffsetDateTime lastUpdated = null;
        ApplicationLicensing licensing = null;
        String name = null;
        Map<String, Object> profile = null;
        ApplicationSettings settings = null;
        ApplicationSignOnMode signOnMode = null;
        String status = null;
        ApplicationVisibility visibility = null;
        Application response = api.updateApplicationInOrg(appId)
                .embedded(embedded)
                .links(links)
                .accessibility(accessibility)
                .created(created)
                .credentials(credentials)
                .features(features)
                .id(id)
                .label(label)
                .lastUpdated(lastUpdated)
                .licensing(licensing)
                .name(name)
                .profile(profile)
                .settings(settings)
                .signOnMode(signOnMode)
                .status(status)
                .visibility(visibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates a Feature object for an application.
     *
     * Updates a Feature object for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFeatureTest() throws ApiException {
        String appId = null;
        String name = null;
        CapabilitiesCreateObject create = null;
        CapabilitiesUpdateObject update = null;
        ApplicationFeature response = api.updateFeature(appId, name)
                .create(create)
                .update(update)
                .execute();
        // TODO: test validations
    }

    /**
     * The file must be in PNG, JPG, or GIF format, and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
     *
     * Update the logo for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLogoTest() throws ApiException {
        File _file = null;
        String appId = null;
        api.updateLogo(_file, appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Application Profile for Assigned User
     *
     * Updates a user&#39;s profile for an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileForUserTest() throws ApiException {
        String appId = null;
        String userId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        AppUserCredentials credentials = null;
        String externalId = null;
        String id = null;
        OffsetDateTime lastSync = null;
        OffsetDateTime lastUpdated = null;
        OffsetDateTime passwordChanged = null;
        Map<String, Object> profile = null;
        String scope = null;
        String status = null;
        OffsetDateTime statusChanged = null;
        String syncState = null;
        AppUser response = api.updateProfileForUser(appId, userId)
                .embedded(embedded)
                .links(links)
                .created(created)
                .credentials(credentials)
                .externalId(externalId)
                .id(id)
                .lastSync(lastSync)
                .lastUpdated(lastUpdated)
                .passwordChanged(passwordChanged)
                .profile(profile)
                .scope(scope)
                .status(status)
                .statusChanged(statusChanged)
                .syncState(syncState)
                .execute();
        // TODO: test validations
    }

}
