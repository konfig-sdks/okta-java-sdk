/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApplicationUpdateLogoRequest;
import java.io.File;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrgContactTypeObj;
import com.konfigthis.client.model.OrgContactUser;
import com.konfigthis.client.model.OrgOktaCommunicationSetting;
import com.konfigthis.client.model.OrgOktaSupportSettingsObj;
import com.konfigthis.client.model.OrgPreferences;
import com.konfigthis.client.model.OrgSetting;
import com.konfigthis.client.model.UserIdString;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrgApi
 */
@Disabled
public class OrgApiTest {

    private static OrgApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrgApi(apiClient);
    }

    /**
     * Extend Okta Support
     *
     * Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendOktaSupportTest() throws ApiException {
        OrgOktaSupportSettingsObj response = api.extendOktaSupport()
                .execute();
        // TODO: test validations
    }

    /**
     * Extend Okta Support
     *
     * Revokes Okta Support access to your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendOktaSupport_0Test() throws ApiException {
        OrgOktaSupportSettingsObj response = api.extendOktaSupport_0()
                .execute();
        // TODO: test validations
    }

    /**
     * Get org contact user
     *
     * Retrieves the URL of the User associated with the specified Contact Type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactUserTest() throws ApiException {
        String contactType = null;
        OrgContactUser response = api.getContactUser(contactType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Okta Communication Settings
     *
     * Gets Okta Communication Settings of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOktaCommunicationSettingsTest() throws ApiException {
        OrgOktaCommunicationSetting response = api.getOktaCommunicationSettings()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Okta Support settings
     *
     * Gets Okta Support Settings of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOktaSupportSettingsTest() throws ApiException {
        OrgOktaSupportSettingsObj response = api.getOktaSupportSettings()
                .execute();
        // TODO: test validations
    }

    /**
     * Get org preferences
     *
     * Gets preferences of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgPreferencesTest() throws ApiException {
        OrgPreferences response = api.getOrgPreferences()
                .execute();
        // TODO: test validations
    }

    /**
     * Get org settings
     *
     * Get settings of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        OrgSetting response = api.getSettings()
                .execute();
        // TODO: test validations
    }

    /**
     * Grant Okta Support
     *
     * Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantOktaSupportAccessTest() throws ApiException {
        OrgOktaSupportSettingsObj response = api.grantOktaSupportAccess()
                .execute();
        // TODO: test validations
    }

    /**
     * Show Okta UI Footer
     *
     * Hide the Okta UI footer for all end users of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideEndUserFooterTest() throws ApiException {
        OrgPreferences response = api.hideEndUserFooter()
                .execute();
        // TODO: test validations
    }

    /**
     * Get org contact types
     *
     * Gets Contact Types of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactTypesTest() throws ApiException {
        List<OrgContactTypeObj> response = api.listContactTypes()
                .execute();
        // TODO: test validations
    }

    /**
     * Show Okta UI Footer
     *
     * Makes the Okta UI footer visible for all end users of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void makeOktaUiFooterVisibleTest() throws ApiException {
        OrgPreferences response = api.makeOktaUiFooterVisible()
                .execute();
        // TODO: test validations
    }

    /**
     * Opt in all users to Okta Communication emails
     *
     * Opts in all users of this org to Okta Communication emails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optInOktaCommunicationEmailsTest() throws ApiException {
        OrgOktaCommunicationSetting response = api.optInOktaCommunicationEmails()
                .execute();
        // TODO: test validations
    }

    /**
     * Opt out all users from Okta Communication emails
     *
     * Opts out all users of this org from Okta Communication emails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optOutOktaCommunicationEmailsTest() throws ApiException {
        OrgOktaCommunicationSetting response = api.optOutOktaCommunicationEmails()
                .execute();
        // TODO: test validations
    }

    /**
     * Update org contact user
     *
     * Updates the User associated with the specified Contact Type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactUserTest() throws ApiException {
        String contactType = null;
        String userId = null;
        OrgContactUser response = api.updateContactUser(contactType)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update org logo
     *
     * Updates the logo for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationLogoTest() throws ApiException {
        File _file = null;
        api.updateOrganizationLogo(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Org setting
     *
     * Update settings of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingTest() throws ApiException {
        Map<String, Object> links = null;
        String address1 = null;
        String address2 = null;
        String city = null;
        String companyName = null;
        String country = null;
        OffsetDateTime created = null;
        String endUserSupportHelpURL = null;
        OffsetDateTime expiresAt = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String phoneNumber = null;
        String postalCode = null;
        String state = null;
        String status = null;
        String subdomain = null;
        String supportPhoneNumber = null;
        String website = null;
        OrgSetting response = api.updateSetting()
                .links(links)
                .address1(address1)
                .address2(address2)
                .city(city)
                .companyName(companyName)
                .country(country)
                .created(created)
                .endUserSupportHelpURL(endUserSupportHelpURL)
                .expiresAt(expiresAt)
                .id(id)
                .lastUpdated(lastUpdated)
                .phoneNumber(phoneNumber)
                .postalCode(postalCode)
                .state(state)
                .status(status)
                .subdomain(subdomain)
                .supportPhoneNumber(supportPhoneNumber)
                .website(website)
                .execute();
        // TODO: test validations
    }

    /**
     * Partial update Org setting
     *
     * Partial update settings of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        Map<String, Object> links = null;
        String address1 = null;
        String address2 = null;
        String city = null;
        String companyName = null;
        String country = null;
        OffsetDateTime created = null;
        String endUserSupportHelpURL = null;
        OffsetDateTime expiresAt = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String phoneNumber = null;
        String postalCode = null;
        String state = null;
        String status = null;
        String subdomain = null;
        String supportPhoneNumber = null;
        String website = null;
        OrgSetting response = api.updateSettings()
                .links(links)
                .address1(address1)
                .address2(address2)
                .city(city)
                .companyName(companyName)
                .country(country)
                .created(created)
                .endUserSupportHelpURL(endUserSupportHelpURL)
                .expiresAt(expiresAt)
                .id(id)
                .lastUpdated(lastUpdated)
                .phoneNumber(phoneNumber)
                .postalCode(postalCode)
                .state(state)
                .status(status)
                .subdomain(subdomain)
                .supportPhoneNumber(supportPhoneNumber)
                .website(website)
                .execute();
        // TODO: test validations
    }

}
