/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Subscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionApi
 */
@Disabled
public class SubscriptionApiTest {

    private static SubscriptionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SubscriptionApi(apiClient);
    }

    /**
     * Unsubscribe a Custom Role from a specific notification type
     *
     * When roleType Unsubscribes a Role from a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Unsubscribes a Custom Role from a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customRoleNotificationUnsubscribeTest() throws ApiException {
        String roleTypeOrRoleId = null;
        String notificationType = null;
        api.customRoleNotificationUnsubscribe(roleTypeOrRoleId, notificationType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get subscriptions of a Custom Role with a specific notification type
     *
     * When roleType Get subscriptions of a Role with a specific notification type. Else when roleId Get subscription of a Custom Role with a specific notification type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleSubscriptionsByNotificationTypeTest() throws ApiException {
        String roleTypeOrRoleId = null;
        String notificationType = null;
        Subscription response = api.getRoleSubscriptionsByNotificationType(roleTypeOrRoleId, notificationType)
                .execute();
        // TODO: test validations
    }

    /**
     * List all subscriptions of a Custom Role
     *
     * When roleType List all subscriptions of a Role. Else when roleId List subscriptions of a Custom Role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoleSubscriptionsTest() throws ApiException {
        String roleTypeOrRoleId = null;
        List<Subscription> response = api.listRoleSubscriptions(roleTypeOrRoleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Subscribe a Custom Role to a specific notification type
     *
     * When roleType Subscribes a Role to a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Subscribes a Custom Role to a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleNotificationSubscribeTest() throws ApiException {
        String roleTypeOrRoleId = null;
        String notificationType = null;
        api.roleNotificationSubscribe(roleTypeOrRoleId, notificationType)
                .execute();
        // TODO: test validations
    }

    /**
     * Unsubscribe from a specific notification type
     *
     * Unsubscribes a User from a specific notification type. Only the current User can unsubscribe from a specific notification type. An AccessDeniedException message is sent if requests are made from other users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeUserSubscriptionByNotificationTypeTest() throws ApiException {
        String userId = null;
        String notificationType = null;
        api.unsubscribeUserSubscriptionByNotificationType(userId, notificationType)
                .execute();
        // TODO: test validations
    }

    /**
     * Subscribe to a specific notification type
     *
     * Subscribes a User to a specific notification type. Only the current User can subscribe to a specific notification type. An AccessDeniedException message is sent if requests are made from other users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userNotificationSubscribeTest() throws ApiException {
        String userId = null;
        String notificationType = null;
        api.userNotificationSubscribe(userId, notificationType)
                .execute();
        // TODO: test validations
    }

}
