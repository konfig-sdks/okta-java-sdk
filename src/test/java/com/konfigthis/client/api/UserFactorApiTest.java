/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ActivateFactorRequest;
import com.konfigthis.client.model.FactorProvider;
import com.konfigthis.client.model.FactorStatus;
import com.konfigthis.client.model.FactorType;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SecurityQuestion;
import com.konfigthis.client.model.UserFactor;
import com.konfigthis.client.model.VerifyFactorRequest;
import com.konfigthis.client.model.VerifyUserFactorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserFactorApi
 */
@Disabled
public class UserFactorApiTest {

    private static UserFactorApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserFactorApi(apiClient);
    }

    /**
     * Activate Factor
     *
     * The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateFactorLifecycleTest() throws ApiException {
        String userId = null;
        String factorId = null;
        String attestation = null;
        String clientData = null;
        String passCode = null;
        String registrationData = null;
        String stateToken = null;
        UserFactor response = api.activateFactorLifecycle(userId, factorId)
                .attestation(attestation)
                .clientData(clientData)
                .passCode(passCode)
                .registrationData(registrationData)
                .stateToken(stateToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Enroll Factor
     *
     * Enrolls a user with a supported factor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollSupportedFactorTest() throws ApiException {
        String userId = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        FactorType factorType = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        FactorProvider provider = null;
        FactorStatus status = null;
        VerifyFactorRequest verify = null;
        Boolean updatePhone = null;
        String templateId = null;
        Integer tokenLifetimeSeconds = null;
        Boolean activate = null;
        UserFactor response = api.enrollSupportedFactor(userId)
                .embedded(embedded)
                .links(links)
                .created(created)
                .factorType(factorType)
                .id(id)
                .lastUpdated(lastUpdated)
                .provider(provider)
                .status(status)
                .verify(verify)
                .updatePhone(updatePhone)
                .templateId(templateId)
                .tokenLifetimeSeconds(tokenLifetimeSeconds)
                .activate(activate)
                .execute();
        // TODO: test validations
    }

    /**
     * Enumerates all the enrolled factors for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerateEnrolledTest() throws ApiException {
        String userId = null;
        List<UserFactor> response = api.enumerateEnrolled(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerateSecurityQuestionsTest() throws ApiException {
        String userId = null;
        List<SecurityQuestion> response = api.enumerateSecurityQuestions(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Enumerates all the supported factors that can be enrolled for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerateSupportedFactorsTest() throws ApiException {
        String userId = null;
        List<UserFactor> response = api.enumerateSupportedFactors(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a factor for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFactorTest() throws ApiException {
        String userId = null;
        String factorId = null;
        UserFactor response = api.getFactor(userId, factorId)
                .execute();
        // TODO: test validations
    }

    /**
     * Polls factors verification transaction for status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pollFactorTransactionStatusTest() throws ApiException {
        String userId = null;
        String factorId = null;
        String transactionId = null;
        VerifyUserFactorResponse response = api.pollFactorTransactionStatus(userId, factorId, transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unenrollFactorTest() throws ApiException {
        String userId = null;
        String factorId = null;
        api.unenrollFactor(userId, factorId)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify MFA Factor
     *
     * Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyOtpTest() throws ApiException {
        String userId = null;
        String factorId = null;
        String activationToken = null;
        String answer = null;
        String attestation = null;
        String clientData = null;
        String nextPassCode = null;
        String passCode = null;
        String registrationData = null;
        String stateToken = null;
        String templateId = null;
        Integer tokenLifetimeSeconds = null;
        String xForwardedFor = null;
        String userAgent = null;
        String acceptLanguage = null;
        VerifyUserFactorResponse response = api.verifyOtp(userId, factorId)
                .activationToken(activationToken)
                .answer(answer)
                .attestation(attestation)
                .clientData(clientData)
                .nextPassCode(nextPassCode)
                .passCode(passCode)
                .registrationData(registrationData)
                .stateToken(stateToken)
                .templateId(templateId)
                .tokenLifetimeSeconds(tokenLifetimeSeconds)
                .xForwardedFor(xForwardedFor)
                .userAgent(userAgent)
                .acceptLanguage(acceptLanguage)
                .execute();
        // TODO: test validations
    }

}
