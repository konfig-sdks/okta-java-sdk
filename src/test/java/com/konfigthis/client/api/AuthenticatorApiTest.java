/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Authenticator;
import com.konfigthis.client.model.AuthenticatorProvider;
import com.konfigthis.client.model.AuthenticatorSettings;
import com.konfigthis.client.model.AuthenticatorStatus;
import com.konfigthis.client.model.AuthenticatorType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticatorApi
 */
@Disabled
public class AuthenticatorApiTest {

    private static AuthenticatorApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthenticatorApi(apiClient);
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateLifecycleSuccessTest() throws ApiException {
        String authenticatorId = null;
        Authenticator response = api.activateLifecycleSuccess(authenticatorId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an Authenticator
     *
     * Create Authenticator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String id = null;
        String key = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        AuthenticatorProvider provider = null;
        AuthenticatorSettings settings = null;
        AuthenticatorStatus status = null;
        AuthenticatorType type = null;
        Boolean activate = null;
        Authenticator response = api.createNew()
                .links(links)
                .created(created)
                .id(id)
                .key(key)
                .lastUpdated(lastUpdated)
                .name(name)
                .provider(provider)
                .settings(settings)
                .status(status)
                .type(type)
                .activate(activate)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateLifecycleSuccessTest() throws ApiException {
        String authenticatorId = null;
        Authenticator response = api.deactivateLifecycleSuccess(authenticatorId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuccessTest() throws ApiException {
        String authenticatorId = null;
        Authenticator response = api.getSuccess(authenticatorId)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all available Authenticators
     *
     * List Authenticators
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllAvailableTest() throws ApiException {
        List<Authenticator> response = api.listAllAvailable()
                .execute();
        // TODO: test validations
    }

    /**
     * Update Authenticator
     *
     * Updates an authenticator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAuthenticatorTest() throws ApiException {
        String authenticatorId = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String id = null;
        String key = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        AuthenticatorProvider provider = null;
        AuthenticatorSettings settings = null;
        AuthenticatorStatus status = null;
        AuthenticatorType type = null;
        Authenticator response = api.updateAuthenticator(authenticatorId)
                .links(links)
                .created(created)
                .id(id)
                .key(key)
                .lastUpdated(lastUpdated)
                .name(name)
                .provider(provider)
                .settings(settings)
                .status(status)
                .type(type)
                .execute();
        // TODO: test validations
    }

}
