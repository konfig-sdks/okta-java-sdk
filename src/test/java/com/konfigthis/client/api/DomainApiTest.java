/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DNSRecord;
import com.konfigthis.client.model.Domain;
import com.konfigthis.client.model.DomainCertificate;
import com.konfigthis.client.model.DomainCertificateMetadata;
import com.konfigthis.client.model.DomainCertificateSourceType;
import com.konfigthis.client.model.DomainCertificateType;
import com.konfigthis.client.model.DomainListResponse;
import com.konfigthis.client.model.DomainValidationStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainApi
 */
@Disabled
public class DomainApiTest {

    private static DomainApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DomainApi(apiClient);
    }

    /**
     * Create Certificate
     *
     * Creates the Certificate for the Domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCertificateTest() throws ApiException {
        String domainId = null;
        String certificate = null;
        String certificateChain = null;
        String privateKey = null;
        DomainCertificateType type = null;
        api.createCertificate(domainId)
                .certificate(certificate)
                .certificateChain(certificateChain)
                .privateKey(privateKey)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Domain
     *
     * Creates your domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDomainTest() throws ApiException {
        DomainCertificateSourceType certificateSourceType = null;
        List<DNSRecord> dnsRecords = null;
        String domain = null;
        String id = null;
        DomainCertificateMetadata publicCertificate = null;
        DomainValidationStatus validationStatus = null;
        Domain response = api.createNewDomain()
                .certificateSourceType(certificateSourceType)
                .dnsRecords(dnsRecords)
                .domain(domain)
                .id(id)
                .publicCertificate(publicCertificate)
                .validationStatus(validationStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Domain
     *
     * Fetches a Domain by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String domainId = null;
        Domain response = api.getById(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Domains
     *
     * List all verified custom Domains for the org.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVerifiedCustomTest() throws ApiException {
        DomainListResponse response = api.listVerifiedCustom()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Domain
     *
     * Deletes a Domain by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String domainId = null;
        api.removeById(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify Domain
     *
     * Verifies the Domain by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyByIdTest() throws ApiException {
        String domainId = null;
        Domain response = api.verifyById(domainId)
                .execute();
        // TODO: test validations
    }

}
