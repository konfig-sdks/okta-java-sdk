/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EventHook;
import com.konfigthis.client.model.EventHookChannel;
import com.konfigthis.client.model.EventSubscriptions;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventHookApi
 */
@Disabled
public class EventHookApiTest {

    private static EventHookApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EventHookApi(apiClient);
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateLifecycleSuccessTest() throws ApiException {
        String eventHookId = null;
        EventHook response = api.activateLifecycleSuccess(eventHookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSuccessTest() throws ApiException {
        Map<String, Object> links = null;
        EventHookChannel channel = null;
        OffsetDateTime created = null;
        String createdBy = null;
        EventSubscriptions events = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        String status = null;
        String verificationStatus = null;
        EventHook response = api.createSuccess()
                .links(links)
                .channel(channel)
                .created(created)
                .createdBy(createdBy)
                .events(events)
                .id(id)
                .lastUpdated(lastUpdated)
                .name(name)
                .status(status)
                .verificationStatus(verificationStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateLifecycleEventTest() throws ApiException {
        String eventHookId = null;
        EventHook response = api.deactivateLifecycleEvent(eventHookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuccessEventTest() throws ApiException {
        String eventHookId = null;
        EventHook response = api.getSuccessEvent(eventHookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSuccessEventsTest() throws ApiException {
        List<EventHook> response = api.listSuccessEvents()
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSuccessEventTest() throws ApiException {
        String eventHookId = null;
        api.removeSuccessEvent(eventHookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSuccessEventTest() throws ApiException {
        String eventHookId = null;
        Map<String, Object> links = null;
        EventHookChannel channel = null;
        OffsetDateTime created = null;
        String createdBy = null;
        EventSubscriptions events = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        String status = null;
        String verificationStatus = null;
        EventHook response = api.updateSuccessEvent(eventHookId)
                .links(links)
                .channel(channel)
                .created(created)
                .createdBy(createdBy)
                .events(events)
                .id(id)
                .lastUpdated(lastUpdated)
                .name(name)
                .status(status)
                .verificationStatus(verificationStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyLifecycleSuccessTest() throws ApiException {
        String eventHookId = null;
        EventHook response = api.verifyLifecycleSuccess(eventHookId)
                .execute();
        // TODO: test validations
    }

}
