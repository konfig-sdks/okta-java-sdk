/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Csr;
import com.konfigthis.client.model.CsrMetadata;
import com.konfigthis.client.model.CsrMetadataSubject;
import com.konfigthis.client.model.CsrMetadataSubjectAltNames;
import com.konfigthis.client.model.IdentityProvider;
import com.konfigthis.client.model.IdentityProviderApplicationUser;
import com.konfigthis.client.model.IdentityProviderPolicy;
import com.konfigthis.client.model.JsonWebKey;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Protocol;
import com.konfigthis.client.model.SocialAuthToken;
import com.konfigthis.client.model.UserIdentityProviderLinkRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentityProviderApi
 */
@Disabled
public class IdentityProviderApiTest {

    private static IdentityProviderApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new IdentityProviderApi(apiClient);
    }

    /**
     * Activate Identity Provider
     *
     * Activates an inactive IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateIdpLifecycleTest() throws ApiException {
        String idpId = null;
        IdentityProvider response = api.activateIdpLifecycle(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add Identity Provider
     *
     * Adds a new IdP to your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewIdpTest() throws ApiException {
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String id = null;
        String issuerMode = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        IdentityProviderPolicy policy = null;
        Protocol protocol = null;
        String status = null;
        String type = null;
        IdentityProvider response = api.addNewIdp()
                .links(links)
                .created(created)
                .id(id)
                .issuerMode(issuerMode)
                .lastUpdated(lastUpdated)
                .name(name)
                .policy(policy)
                .protocol(protocol)
                .status(status)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Add X.509 Certificate Public Key
     *
     * Adds a new X.509 certificate credential to the IdP key store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addX509CertificatePublicKeyTest() throws ApiException {
        Map<String, Object> links = null;
        String alg = null;
        OffsetDateTime created = null;
        String e = null;
        OffsetDateTime expiresAt = null;
        List<String> keyOps = null;
        String kid = null;
        String kty = null;
        OffsetDateTime lastUpdated = null;
        String n = null;
        String status = null;
        String use = null;
        List<String> x5c = null;
        String x5t = null;
        String x5tHashS256 = null;
        String x5u = null;
        JsonWebKey response = api.addX509CertificatePublicKey()
                .links(links)
                .alg(alg)
                .created(created)
                .e(e)
                .expiresAt(expiresAt)
                .keyOps(keyOps)
                .kid(kid)
                .kty(kty)
                .lastUpdated(lastUpdated)
                .n(n)
                .status(status)
                .use(use)
                .x5c(x5c)
                .x5t(x5t)
                .x5tHashS256(x5tHashS256)
                .x5u(x5u)
                .execute();
        // TODO: test validations
    }

    /**
     * Clone Signing Key Credential for IdP
     *
     * Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneSigningKeyCredentialTest() throws ApiException {
        String idpId = null;
        String keyId = null;
        String targetIdpId = null;
        JsonWebKey response = api.cloneSigningKeyCredential(idpId, keyId, targetIdpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate Identity Provider
     *
     * Deactivates an active IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateIdpTest() throws ApiException {
        String idpId = null;
        IdentityProvider response = api.deactivateIdp(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Key
     *
     * Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyCredentialTest() throws ApiException {
        String keyId = null;
        api.deleteKeyCredential(keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Keys
     *
     * Enumerates IdP key credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerateIdpKeysTest() throws ApiException {
        String after = null;
        Integer limit = null;
        List<JsonWebKey> response = api.enumerateIdpKeys()
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate Certificate Signing Request for IdP
     *
     * Generates a new key pair and returns a Certificate Signing Request for it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateCsrTest() throws ApiException {
        String idpId = null;
        CsrMetadataSubject subject = null;
        CsrMetadataSubjectAltNames subjectAltNames = null;
        Csr response = api.generateCsr(idpId)
                .subject(subject)
                .subjectAltNames(subjectAltNames)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate New IdP Signing Key Credential
     *
     * Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateNewSigningKeyCredentialTest() throws ApiException {
        String idpId = null;
        Integer validityYears = null;
        JsonWebKey response = api.generateNewSigningKeyCredential(idpId, validityYears)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Identity Provider
     *
     * Fetches an IdP by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdpTest() throws ApiException {
        String idpId = null;
        IdentityProvider response = api.getByIdp(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a specific Certificate Signing Request model by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCsrByIdpTest() throws ApiException {
        String idpId = null;
        String csrId = null;
        Csr response = api.getCsrByIdp(idpId, csrId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Key
     *
     * Gets a specific IdP Key Credential by &#x60;kid&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyCredentialByIdpTest() throws ApiException {
        String keyId = null;
        JsonWebKey response = api.getKeyCredentialByIdp(keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a linked IdP user by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinkedUserByIdTest() throws ApiException {
        String idpId = null;
        String userId = null;
        IdentityProviderApplicationUser response = api.getLinkedUserById(idpId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Signing Key Credential for IdP
     *
     * Gets a specific IdP Key Credential by &#x60;kid&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSigningKeyCredentialByIdpTest() throws ApiException {
        String idpId = null;
        String keyId = null;
        JsonWebKey response = api.getSigningKeyCredentialByIdp(idpId, keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Social Authentication Token Operation
     *
     * Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSocialAuthTokensTest() throws ApiException {
        String idpId = null;
        String userId = null;
        List<SocialAuthToken> response = api.getSocialAuthTokens(idpId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Find Users
     *
     * Find all the users linked to an identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String idpId = null;
        List<IdentityProviderApplicationUser> response = api.getUser(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Link a user to a Social IdP without a transaction
     *
     * Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkUserToIdpWithoutTransactionTest() throws ApiException {
        String idpId = null;
        String userId = null;
        String externalId = null;
        IdentityProviderApplicationUser response = api.linkUserToIdpWithoutTransaction(idpId, userId)
                .externalId(externalId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Identity Providers
     *
     * Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String q = null;
        String after = null;
        Integer limit = null;
        String type = null;
        List<IdentityProvider> response = api.list()
                .q(q)
                .after(after)
                .limit(limit)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * List Certificate Signing Requests for IdP
     *
     * Enumerates Certificate Signing Requests for an IdP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCsrsForCertificateSigningRequestsTest() throws ApiException {
        String idpId = null;
        List<Csr> response = api.listCsrsForCertificateSigningRequests(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Signing Key Credentials for IdP
     *
     * Enumerates signing key credentials for an IdP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSigningKeyCredentialsTest() throws ApiException {
        String idpId = null;
        List<JsonWebKey> response = api.listSigningKeyCredentials(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Identity Provider
     *
     * Removes an IdP from your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeIdpTest() throws ApiException {
        String idpId = null;
        api.removeIdp(idpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke a Certificate Signing Request and delete the key pair from the IdP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeCsrForIdentityProviderTest() throws ApiException {
        String idpId = null;
        String csrId = null;
        api.revokeCsrForIdentityProvider(idpId, csrId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unlink User from IdP
     *
     * Removes the link between the Okta user and the IdP user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlinkUserTest() throws ApiException {
        String idpId = null;
        String userId = null;
        api.unlinkUser(idpId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Identity Provider
     *
     * Updates the configuration for an IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        String idpId = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String id = null;
        String issuerMode = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        IdentityProviderPolicy policy = null;
        Protocol protocol = null;
        String status = null;
        String type = null;
        IdentityProvider response = api.updateConfiguration(idpId)
                .links(links)
                .created(created)
                .id(id)
                .issuerMode(issuerMode)
                .lastUpdated(lastUpdated)
                .name(name)
                .policy(policy)
                .protocol(protocol)
                .status(status)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCsrLifecyclePublishTest() throws ApiException {
        String idpId = null;
        String csrId = null;
        JsonWebKey response = api.updateCsrLifecyclePublish(idpId, csrId)
                .execute();
        // TODO: test validations
    }

}
