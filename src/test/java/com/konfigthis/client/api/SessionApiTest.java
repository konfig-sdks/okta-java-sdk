/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateSessionRequest;
import com.konfigthis.client.model.Session;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionApi
 */
@Disabled
public class SessionApiTest {

    private static SessionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SessionApi(apiClient);
    }

    /**
     * Close Session
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeTest() throws ApiException {
        String sessionId = null;
        api.close(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Session with Session Token
     *
     * Creates a new session for a user with a valid session token. Use this API if, for example, you want to set the session cookie yourself instead of allowing Okta to set it, or want to hold the session ID in order to delete a session via the API instead of visiting the logout URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSessionWithTokenTest() throws ApiException {
        String sessionToken = null;
        Session response = api.createSessionWithToken()
                .sessionToken(sessionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get details about a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String sessionId = null;
        Session response = api.getDetails(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Refresh Session
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshLifecycleTest() throws ApiException {
        String sessionId = null;
        Session response = api.refreshLifecycle(sessionId)
                .execute();
        // TODO: test validations
    }

}
