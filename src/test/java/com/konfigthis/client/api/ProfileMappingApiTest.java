/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ProfileMapping;
import com.konfigthis.client.model.ProfileMappingProperty;
import com.konfigthis.client.model.ProfileMappingSource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfileMappingApi
 */
@Disabled
public class ProfileMappingApiTest {

    private static ProfileMappingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProfileMappingApi(apiClient);
    }

    /**
     * Get Profile Mapping
     *
     * Fetches a single Profile Mapping referenced by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String mappingId = null;
        ProfileMapping response = api.getById(mappingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Enumerates Profile Mappings in your organization with pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWithPaginationTest() throws ApiException {
        String after = null;
        Integer limit = null;
        String sourceId = null;
        String targetId = null;
        List<ProfileMapping> response = api.listWithPagination()
                .after(after)
                .limit(limit)
                .sourceId(sourceId)
                .targetId(targetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Profile Mapping
     *
     * Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePropertyMappingsTest() throws ApiException {
        String mappingId = null;
        Map<String, Object> links = null;
        String id = null;
        Map<String, ProfileMappingProperty> properties = null;
        ProfileMappingSource source = null;
        ProfileMappingSource target = null;
        ProfileMapping response = api.updatePropertyMappings(mappingId)
                .links(links)
                .id(id)
                .properties(properties)
                .source(source)
                .target(target)
                .execute();
        // TODO: test validations
    }

}
