/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UserType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserTypeApi
 */
@Disabled
public class UserTypeApiTest {

    private static UserTypeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserTypeApi(apiClient);
    }

    /**
     * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewUserTypeTest() throws ApiException {
        String description = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String createdBy = null;
        Boolean _default = null;
        String displayName = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String lastUpdatedBy = null;
        String name = null;
        UserType response = api.createNewUserType()
                .description(description)
                .links(links)
                .created(created)
                .createdBy(createdBy)
                ._default(_default)
                .displayName(displayName)
                .id(id)
                .lastUpdated(lastUpdated)
                .lastUpdatedBy(lastUpdatedBy)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermanentlyTest() throws ApiException {
        String typeId = null;
        api.deletePermanently(typeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches all User Types in your org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserTypesTest() throws ApiException {
        List<UserType> response = api.getAllUserTypes()
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a User Type by ID. The special identifier &#x60;default&#x60; may be used to fetch the default User Type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String typeId = null;
        UserType response = api.getById(typeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replace an existing User Type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceExistingTypeTest() throws ApiException {
        String typeId = null;
        String description = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String createdBy = null;
        Boolean _default = null;
        String displayName = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String lastUpdatedBy = null;
        String name = null;
        UserType response = api.replaceExistingType(typeId)
                .description(description)
                .links(links)
                .created(created)
                .createdBy(createdBy)
                ._default(_default)
                .displayName(displayName)
                .id(id)
                .lastUpdated(lastUpdated)
                .lastUpdatedBy(lastUpdatedBy)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates an existing User Type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingTypeTest() throws ApiException {
        String typeId = null;
        String description = null;
        Map<String, Object> links = null;
        OffsetDateTime created = null;
        String createdBy = null;
        Boolean _default = null;
        String displayName = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String lastUpdatedBy = null;
        String name = null;
        UserType response = api.updateExistingType(typeId)
                .description(description)
                .links(links)
                .created(created)
                .createdBy(createdBy)
                ._default(_default)
                .displayName(displayName)
                .id(id)
                .lastUpdated(lastUpdated)
                .lastUpdatedBy(lastUpdatedBy)
                .name(name)
                .execute();
        // TODO: test validations
    }

}
