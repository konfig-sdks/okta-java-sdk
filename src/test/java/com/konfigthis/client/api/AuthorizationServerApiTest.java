/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AuthorizationServer;
import com.konfigthis.client.model.AuthorizationServerCredentials;
import com.konfigthis.client.model.AuthorizationServerPolicy;
import com.konfigthis.client.model.AuthorizationServerPolicyRule;
import com.konfigthis.client.model.AuthorizationServerPolicyRuleActions;
import com.konfigthis.client.model.AuthorizationServerPolicyRuleConditions;
import com.konfigthis.client.model.JsonWebKey;
import com.konfigthis.client.model.JwkUse;
import com.konfigthis.client.model.OAuth2Claim;
import com.konfigthis.client.model.OAuth2ClaimConditions;
import com.konfigthis.client.model.OAuth2Client;
import com.konfigthis.client.model.OAuth2RefreshToken;
import com.konfigthis.client.model.OAuth2Scope;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PolicyRuleConditions;
import com.konfigthis.client.model.PolicyType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorizationServerApi
 */
@Disabled
public class AuthorizationServerApiTest {

    private static AuthorizationServerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthorizationServerApi(apiClient);
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateLifecycleSuccessTest() throws ApiException {
        String authServerId = null;
        api.activateLifecycleSuccess(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Activate Authorization Server Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activatePolicyLifecycleTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        api.activatePolicyLifecycle(authServerId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Activate Authorization Server Policy Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activatePolicyRuleTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        String ruleId = null;
        api.activatePolicyRule(authServerId, policyId, ruleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClaimsTest() throws ApiException {
        String authServerId = null;
        Map<String, Object> links = null;
        Boolean alwaysIncludeInToken = null;
        String claimType = null;
        OAuth2ClaimConditions conditions = null;
        String groupFilterType = null;
        String id = null;
        String name = null;
        String status = null;
        Boolean system = null;
        String value = null;
        String valueType = null;
        OAuth2Claim response = api.createClaims(authServerId)
                .links(links)
                .alwaysIncludeInToken(alwaysIncludeInToken)
                .claimType(claimType)
                .conditions(conditions)
                .groupFilterType(groupFilterType)
                .id(id)
                .name(name)
                .status(status)
                .system(system)
                .value(value)
                .valueType(valueType)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewServerTest() throws ApiException {
        String description = null;
        Map<String, Object> links = null;
        List<String> audiences = null;
        OffsetDateTime created = null;
        AuthorizationServerCredentials credentials = null;
        Boolean _default = null;
        String id = null;
        String issuer = null;
        String issuerMode = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        String status = null;
        AuthorizationServer response = api.createNewServer()
                .description(description)
                .links(links)
                .audiences(audiences)
                .created(created)
                .credentials(credentials)
                ._default(_default)
                .id(id)
                .issuer(issuer)
                .issuerMode(issuerMode)
                .lastUpdated(lastUpdated)
                .name(name)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        String authServerId = null;
        String description = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        PolicyRuleConditions conditions = null;
        OffsetDateTime created = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        Integer priority = null;
        String status = null;
        Boolean system = null;
        PolicyType type = null;
        AuthorizationServerPolicy response = api.createPolicy(authServerId)
                .description(description)
                .embedded(embedded)
                .links(links)
                .conditions(conditions)
                .created(created)
                .id(id)
                .lastUpdated(lastUpdated)
                .name(name)
                .priority(priority)
                .status(status)
                .system(system)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a policy rule for the specified Custom Authorization Server and Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyRuleTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        AuthorizationServerPolicyRuleActions actions = null;
        AuthorizationServerPolicyRuleConditions conditions = null;
        OffsetDateTime created = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        Integer priority = null;
        String status = null;
        Boolean system = null;
        String type = null;
        AuthorizationServerPolicyRule response = api.createPolicyRule(authServerId, policyId)
                .actions(actions)
                .conditions(conditions)
                .created(created)
                .id(id)
                .lastUpdated(lastUpdated)
                .name(name)
                .priority(priority)
                .status(status)
                .system(system)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScopeTest() throws ApiException {
        String authServerId = null;
        String description = null;
        String consent = null;
        Boolean _default = null;
        String displayName = null;
        String id = null;
        String metadataPublish = null;
        String name = null;
        Boolean system = null;
        OAuth2Scope response = api.createScope(authServerId)
                .description(description)
                .consent(consent)
                ._default(_default)
                .displayName(displayName)
                .id(id)
                .metadataPublish(metadataPublish)
                .name(name)
                .system(system)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateLifecycleTest() throws ApiException {
        String authServerId = null;
        api.deactivateLifecycle(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate Authorization Server Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivatePolicyLifecycleTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        api.deactivatePolicyLifecycle(authServerId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate Authorization Server Policy Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivatePolicyRuleTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        String ruleId = null;
        api.deactivatePolicyRule(authServerId, policyId, ruleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthTokenTest() throws ApiException {
        String authServerId = null;
        String clientId = null;
        String tokenId = null;
        api.deleteAuthToken(authServerId, clientId, tokenId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClaimTest() throws ApiException {
        String authServerId = null;
        String claimId = null;
        api.deleteClaim(authServerId, claimId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClientTokenTest() throws ApiException {
        String authServerId = null;
        String clientId = null;
        api.deleteClientToken(authServerId, clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyByIdTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        api.deletePolicyById(authServerId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyRuleTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        String ruleId = null;
        api.deletePolicyRule(authServerId, policyId, ruleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScopeTest() throws ApiException {
        String authServerId = null;
        String scopeId = null;
        api.deleteScope(authServerId, scopeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSuccessTest() throws ApiException {
        String authServerId = null;
        api.deleteSuccess(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Enumerates all policy rules for the specified Custom Authorization Server and Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumeratePolicyRulesTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        List<AuthorizationServerPolicyRule> response = api.enumeratePolicyRules(authServerId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String authServerId = null;
        AuthorizationServer response = api.getById(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClaimsTest() throws ApiException {
        String authServerId = null;
        List<OAuth2Claim> response = api.getClaims(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClaims_0Test() throws ApiException {
        String authServerId = null;
        String claimId = null;
        OAuth2Claim response = api.getClaims_0(authServerId, claimId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientAuthTokenTest() throws ApiException {
        String authServerId = null;
        String clientId = null;
        String tokenId = null;
        String expand = null;
        OAuth2RefreshToken response = api.getClientAuthToken(authServerId, clientId, tokenId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientTokensTest() throws ApiException {
        String authServerId = null;
        String clientId = null;
        String expand = null;
        String after = null;
        Integer limit = null;
        List<OAuth2RefreshToken> response = api.getClientTokens(authServerId, clientId)
                .expand(expand)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPoliciesTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        AuthorizationServerPolicy response = api.getPolicies(authServerId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPoliciesSuccessTest() throws ApiException {
        String authServerId = null;
        List<AuthorizationServerPolicy> response = api.getPoliciesSuccess(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyRuleByIdTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        String ruleId = null;
        AuthorizationServerPolicyRule response = api.getPolicyRuleById(authServerId, policyId, ruleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScopesTest() throws ApiException {
        String authServerId = null;
        String q = null;
        String filter = null;
        String cursor = null;
        Integer limit = null;
        List<OAuth2Scope> response = api.getScopes(authServerId)
                .q(q)
                .filter(filter)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScopes_0Test() throws ApiException {
        String authServerId = null;
        String scopeId = null;
        OAuth2Scope response = api.getScopes_0(authServerId, scopeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClientsTest() throws ApiException {
        String authServerId = null;
        List<OAuth2Client> response = api.listClients(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCredentialsKeysTest() throws ApiException {
        String authServerId = null;
        List<JsonWebKey> response = api.listCredentialsKeys(authServerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServersTest() throws ApiException {
        String q = null;
        String limit = null;
        String after = null;
        List<AuthorizationServer> response = api.listServers()
                .q(q)
                .limit(limit)
                .after(after)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rotateKeyLifecycleTest() throws ApiException {
        String authServerId = null;
        String use = null;
        List<JsonWebKey> response = api.rotateKeyLifecycle(authServerId)
                .use(use)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        String authServerId = null;
        String description = null;
        Map<String, Object> links = null;
        List<String> audiences = null;
        OffsetDateTime created = null;
        AuthorizationServerCredentials credentials = null;
        Boolean _default = null;
        String id = null;
        String issuer = null;
        String issuerMode = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        String status = null;
        AuthorizationServer response = api.updateById(authServerId)
                .description(description)
                .links(links)
                .audiences(audiences)
                .created(created)
                .credentials(credentials)
                ._default(_default)
                .id(id)
                .issuer(issuer)
                .issuerMode(issuerMode)
                .lastUpdated(lastUpdated)
                .name(name)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClaimSuccessTest() throws ApiException {
        String authServerId = null;
        String claimId = null;
        Map<String, Object> links = null;
        Boolean alwaysIncludeInToken = null;
        String claimType = null;
        OAuth2ClaimConditions conditions = null;
        String groupFilterType = null;
        String id = null;
        String name = null;
        String status = null;
        Boolean system = null;
        String value = null;
        String valueType = null;
        OAuth2Claim response = api.updateClaimSuccess(authServerId, claimId)
                .links(links)
                .alwaysIncludeInToken(alwaysIncludeInToken)
                .claimType(claimType)
                .conditions(conditions)
                .groupFilterType(groupFilterType)
                .id(id)
                .name(name)
                .status(status)
                .system(system)
                .value(value)
                .valueType(valueType)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyRuleConfigurationTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        String ruleId = null;
        AuthorizationServerPolicyRuleActions actions = null;
        AuthorizationServerPolicyRuleConditions conditions = null;
        OffsetDateTime created = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        Integer priority = null;
        String status = null;
        Boolean system = null;
        String type = null;
        AuthorizationServerPolicyRule response = api.updatePolicyRuleConfiguration(authServerId, policyId, ruleId)
                .actions(actions)
                .conditions(conditions)
                .created(created)
                .id(id)
                .lastUpdated(lastUpdated)
                .name(name)
                .priority(priority)
                .status(status)
                .system(system)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicySuccessTest() throws ApiException {
        String authServerId = null;
        String policyId = null;
        String description = null;
        Map<String, Object> embedded = null;
        Map<String, Object> links = null;
        PolicyRuleConditions conditions = null;
        OffsetDateTime created = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        String name = null;
        Integer priority = null;
        String status = null;
        Boolean system = null;
        PolicyType type = null;
        AuthorizationServerPolicy response = api.updatePolicySuccess(authServerId, policyId)
                .description(description)
                .embedded(embedded)
                .links(links)
                .conditions(conditions)
                .created(created)
                .id(id)
                .lastUpdated(lastUpdated)
                .name(name)
                .priority(priority)
                .status(status)
                .system(system)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScopeSuccessTest() throws ApiException {
        String authServerId = null;
        String scopeId = null;
        String description = null;
        String consent = null;
        Boolean _default = null;
        String displayName = null;
        String id = null;
        String metadataPublish = null;
        String name = null;
        Boolean system = null;
        OAuth2Scope response = api.updateScopeSuccess(authServerId, scopeId)
                .description(description)
                .consent(consent)
                ._default(_default)
                .displayName(displayName)
                .id(id)
                .metadataPublish(metadataPublish)
                .name(name)
                .system(system)
                .execute();
        // TODO: test validations
    }

}
