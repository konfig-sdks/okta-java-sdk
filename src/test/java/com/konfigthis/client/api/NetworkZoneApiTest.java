/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.NetworkZone;
import com.konfigthis.client.model.NetworkZoneAddress;
import com.konfigthis.client.model.NetworkZoneLocation;
import com.konfigthis.client.model.NetworkZoneStatus;
import com.konfigthis.client.model.NetworkZoneType;
import com.konfigthis.client.model.NetworkZoneUsage;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkZoneApi
 */
@Disabled
public class NetworkZoneApiTest {

    private static NetworkZoneApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new NetworkZoneApi(apiClient);
    }

    /**
     * Activate Network Zone
     *
     * Activate Network Zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateLifecycleTest() throws ApiException {
        String zoneId = null;
        NetworkZone response = api.activateLifecycle(zoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add Network Zone
     *
     * Adds a new network zone to your Okta organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        Map<String, Object> links = null;
        List<String> asns = null;
        OffsetDateTime created = null;
        List<NetworkZoneAddress> gateways = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        List<NetworkZoneLocation> locations = null;
        String name = null;
        List<NetworkZoneAddress> proxies = null;
        String proxyType = null;
        NetworkZoneStatus status = null;
        Boolean system = null;
        NetworkZoneType type = null;
        NetworkZoneUsage usage = null;
        NetworkZone response = api.createNew()
                .links(links)
                .asns(asns)
                .created(created)
                .gateways(gateways)
                .id(id)
                .lastUpdated(lastUpdated)
                .locations(locations)
                .name(name)
                .proxies(proxies)
                .proxyType(proxyType)
                .status(status)
                .system(system)
                .type(type)
                .usage(usage)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate Network Zone
     *
     * Deactivates a network zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateZoneLifecycleTest() throws ApiException {
        String zoneId = null;
        NetworkZone response = api.deactivateZoneLifecycle(zoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Network Zone
     *
     * Fetches a network zone from your Okta organization by &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String zoneId = null;
        NetworkZone response = api.getById(zoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Network Zones
     *
     * Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listZonesTest() throws ApiException {
        String after = null;
        Integer limit = null;
        String filter = null;
        List<NetworkZone> response = api.listZones()
                .after(after)
                .limit(limit)
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Network Zone
     *
     * Removes network zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeZoneTest() throws ApiException {
        String zoneId = null;
        api.removeZone(zoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Network Zone
     *
     * Updates a network zone in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateZoneTest() throws ApiException {
        String zoneId = null;
        Map<String, Object> links = null;
        List<String> asns = null;
        OffsetDateTime created = null;
        List<NetworkZoneAddress> gateways = null;
        String id = null;
        OffsetDateTime lastUpdated = null;
        List<NetworkZoneLocation> locations = null;
        String name = null;
        List<NetworkZoneAddress> proxies = null;
        String proxyType = null;
        NetworkZoneStatus status = null;
        Boolean system = null;
        NetworkZoneType type = null;
        NetworkZoneUsage usage = null;
        NetworkZone response = api.updateZone(zoneId)
                .links(links)
                .asns(asns)
                .created(created)
                .gateways(gateways)
                .id(id)
                .lastUpdated(lastUpdated)
                .locations(locations)
                .name(name)
                .proxies(proxies)
                .proxyType(proxyType)
                .status(status)
                .system(system)
                .type(type)
                .usage(usage)
                .execute();
        // TODO: test validations
    }

}
