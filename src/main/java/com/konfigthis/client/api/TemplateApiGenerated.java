/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.SmsTemplate;
import com.konfigthis.client.model.SmsTemplateType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCustomSmsCall(SmsTemplate smsTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsTemplate;

        // create path and map variables
        String localVarPath = "/api/v1/templates/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCustomSmsValidateBeforeCall(SmsTemplate smsTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsTemplate' is set
        if (smsTemplate == null) {
            throw new ApiException("Missing the required parameter 'smsTemplate' when calling addNewCustomSms(Async)");
        }

        return addNewCustomSmsCall(smsTemplate, _callback);

    }


    private ApiResponse<SmsTemplate> addNewCustomSmsWithHttpInfo(SmsTemplate smsTemplate) throws ApiException {
        okhttp3.Call localVarCall = addNewCustomSmsValidateBeforeCall(smsTemplate, null);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCustomSmsAsync(SmsTemplate smsTemplate, final ApiCallback<SmsTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCustomSmsValidateBeforeCall(smsTemplate, _callback);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCustomSmsRequestBuilder {
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private String template;
        private Object translations;
        private SmsTemplateType type;

        private AddNewCustomSmsRequestBuilder() {
        }

        /**
         * Set created
         * @param created  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set template
         * @param template  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder template(String template) {
            this.template = template;
            return this;
        }
        
        /**
         * Set translations
         * @param translations  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder translations(Object translations) {
            this.translations = translations;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AddNewCustomSmsRequestBuilder
         */
        public AddNewCustomSmsRequestBuilder type(SmsTemplateType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for addNewCustomSms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return addNewCustomSmsCall(smsTemplate, _callback);
        }

        private SmsTemplate buildBodyParams() {
            SmsTemplate smsTemplate = new SmsTemplate();
            smsTemplate.created(this.created);
            smsTemplate.id(this.id);
            smsTemplate.lastUpdated(this.lastUpdated);
            smsTemplate.name(this.name);
            smsTemplate.template(this.template);
            smsTemplate.translations(this.translations);
            smsTemplate.type(this.type);
            return smsTemplate;
        }

        /**
         * Execute addNewCustomSms request
         * @return SmsTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SmsTemplate execute() throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            ApiResponse<SmsTemplate> localVarResp = addNewCustomSmsWithHttpInfo(smsTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewCustomSms request with HTTP info returned
         * @return ApiResponse&lt;SmsTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmsTemplate> executeWithHttpInfo() throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return addNewCustomSmsWithHttpInfo(smsTemplate);
        }

        /**
         * Execute addNewCustomSms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmsTemplate> _callback) throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return addNewCustomSmsAsync(smsTemplate, _callback);
        }
    }

    /**
     * Add SMS Template
     * Adds a new custom SMS template to your organization.
     * @param smsTemplate  (required)
     * @return AddNewCustomSmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCustomSmsRequestBuilder addNewCustomSms() throws IllegalArgumentException {
        return new AddNewCustomSmsRequestBuilder();
    }
    private okhttp3.Call enumerateSmsTemplatesCall(String templateType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/templates/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateType", templateType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateSmsTemplatesValidateBeforeCall(String templateType, final ApiCallback _callback) throws ApiException {
        return enumerateSmsTemplatesCall(templateType, _callback);

    }


    private ApiResponse<List<SmsTemplate>> enumerateSmsTemplatesWithHttpInfo(String templateType) throws ApiException {
        okhttp3.Call localVarCall = enumerateSmsTemplatesValidateBeforeCall(templateType, null);
        Type localVarReturnType = new TypeToken<List<SmsTemplate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateSmsTemplatesAsync(String templateType, final ApiCallback<List<SmsTemplate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateSmsTemplatesValidateBeforeCall(templateType, _callback);
        Type localVarReturnType = new TypeToken<List<SmsTemplate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateSmsTemplatesRequestBuilder {
        private String templateType;

        private EnumerateSmsTemplatesRequestBuilder() {
        }

        /**
         * Set templateType
         * @param templateType  (optional)
         * @return EnumerateSmsTemplatesRequestBuilder
         */
        public EnumerateSmsTemplatesRequestBuilder templateType(String templateType) {
            this.templateType = templateType;
            return this;
        }
        
        /**
         * Build call for enumerateSmsTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateSmsTemplatesCall(templateType, _callback);
        }


        /**
         * Execute enumerateSmsTemplates request
         * @return List&lt;SmsTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<SmsTemplate> execute() throws ApiException {
            ApiResponse<List<SmsTemplate>> localVarResp = enumerateSmsTemplatesWithHttpInfo(templateType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateSmsTemplates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SmsTemplate&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SmsTemplate>> executeWithHttpInfo() throws ApiException {
            return enumerateSmsTemplatesWithHttpInfo(templateType);
        }

        /**
         * Execute enumerateSmsTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SmsTemplate>> _callback) throws ApiException {
            return enumerateSmsTemplatesAsync(templateType, _callback);
        }
    }

    /**
     * List SMS Templates
     * Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
     * @return EnumerateSmsTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateSmsTemplatesRequestBuilder enumerateSmsTemplates() throws IllegalArgumentException {
        return new EnumerateSmsTemplatesRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/templates/sms/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getById(Async)");
        }

        return getByIdCall(templateId, _callback);

    }


    private ApiResponse<SmsTemplate> getByIdWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String templateId, final ApiCallback<SmsTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String templateId;

        private GetByIdRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(templateId, _callback);
        }


        /**
         * Execute getById request
         * @return SmsTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SmsTemplate execute() throws ApiException {
            ApiResponse<SmsTemplate> localVarResp = getByIdWithHttpInfo(templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;SmsTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmsTemplate> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(templateId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmsTemplate> _callback) throws ApiException {
            return getByIdAsync(templateId, _callback);
        }
    }

    /**
     * Get SMS Template
     * Fetches a specific template by &#x60;id&#x60;
     * @param templateId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new GetByIdRequestBuilder(templateId);
    }
    private okhttp3.Call partialSmsUpdateCall(String templateId, SmsTemplate smsTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsTemplate;

        // create path and map variables
        String localVarPath = "/api/v1/templates/sms/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialSmsUpdateValidateBeforeCall(String templateId, SmsTemplate smsTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling partialSmsUpdate(Async)");
        }

        // verify the required parameter 'smsTemplate' is set
        if (smsTemplate == null) {
            throw new ApiException("Missing the required parameter 'smsTemplate' when calling partialSmsUpdate(Async)");
        }

        return partialSmsUpdateCall(templateId, smsTemplate, _callback);

    }


    private ApiResponse<SmsTemplate> partialSmsUpdateWithHttpInfo(String templateId, SmsTemplate smsTemplate) throws ApiException {
        okhttp3.Call localVarCall = partialSmsUpdateValidateBeforeCall(templateId, smsTemplate, null);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partialSmsUpdateAsync(String templateId, SmsTemplate smsTemplate, final ApiCallback<SmsTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialSmsUpdateValidateBeforeCall(templateId, smsTemplate, _callback);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartialSmsUpdateRequestBuilder {
        private final String templateId;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private String template;
        private Object translations;
        private SmsTemplateType type;

        private PartialSmsUpdateRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Set created
         * @param created  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set template
         * @param template  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder template(String template) {
            this.template = template;
            return this;
        }
        
        /**
         * Set translations
         * @param translations  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder translations(Object translations) {
            this.translations = translations;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return PartialSmsUpdateRequestBuilder
         */
        public PartialSmsUpdateRequestBuilder type(SmsTemplateType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for partialSmsUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return partialSmsUpdateCall(templateId, smsTemplate, _callback);
        }

        private SmsTemplate buildBodyParams() {
            SmsTemplate smsTemplate = new SmsTemplate();
            smsTemplate.created(this.created);
            smsTemplate.id(this.id);
            smsTemplate.lastUpdated(this.lastUpdated);
            smsTemplate.name(this.name);
            smsTemplate.template(this.template);
            smsTemplate.translations(this.translations);
            smsTemplate.type(this.type);
            return smsTemplate;
        }

        /**
         * Execute partialSmsUpdate request
         * @return SmsTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SmsTemplate execute() throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            ApiResponse<SmsTemplate> localVarResp = partialSmsUpdateWithHttpInfo(templateId, smsTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partialSmsUpdate request with HTTP info returned
         * @return ApiResponse&lt;SmsTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmsTemplate> executeWithHttpInfo() throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return partialSmsUpdateWithHttpInfo(templateId, smsTemplate);
        }

        /**
         * Execute partialSmsUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmsTemplate> _callback) throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return partialSmsUpdateAsync(templateId, smsTemplate, _callback);
        }
    }

    /**
     * Partial SMS Template Update
     * Updates only some of the SMS template properties:
     * @param templateId  (required)
     * @param smsTemplate  (required)
     * @return PartialSmsUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PartialSmsUpdateRequestBuilder partialSmsUpdate(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new PartialSmsUpdateRequestBuilder(templateId);
    }
    private okhttp3.Call removeSmsCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/templates/sms/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSmsValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling removeSms(Async)");
        }

        return removeSmsCall(templateId, _callback);

    }


    private ApiResponse<Void> removeSmsWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = removeSmsValidateBeforeCall(templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSmsAsync(String templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSmsValidateBeforeCall(templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSmsRequestBuilder {
        private final String templateId;

        private RemoveSmsRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for removeSms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSmsCall(templateId, _callback);
        }


        /**
         * Execute removeSms request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSmsWithHttpInfo(templateId);
        }

        /**
         * Execute removeSms request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSmsWithHttpInfo(templateId);
        }

        /**
         * Execute removeSms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSmsAsync(templateId, _callback);
        }
    }

    /**
     * Remove SMS Template
     * Removes an SMS template.
     * @param templateId  (required)
     * @return RemoveSmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSmsRequestBuilder removeSms(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new RemoveSmsRequestBuilder(templateId);
    }
    private okhttp3.Call updateSmsTemplateCall(String templateId, SmsTemplate smsTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsTemplate;

        // create path and map variables
        String localVarPath = "/api/v1/templates/sms/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSmsTemplateValidateBeforeCall(String templateId, SmsTemplate smsTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateSmsTemplate(Async)");
        }

        // verify the required parameter 'smsTemplate' is set
        if (smsTemplate == null) {
            throw new ApiException("Missing the required parameter 'smsTemplate' when calling updateSmsTemplate(Async)");
        }

        return updateSmsTemplateCall(templateId, smsTemplate, _callback);

    }


    private ApiResponse<SmsTemplate> updateSmsTemplateWithHttpInfo(String templateId, SmsTemplate smsTemplate) throws ApiException {
        okhttp3.Call localVarCall = updateSmsTemplateValidateBeforeCall(templateId, smsTemplate, null);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSmsTemplateAsync(String templateId, SmsTemplate smsTemplate, final ApiCallback<SmsTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSmsTemplateValidateBeforeCall(templateId, smsTemplate, _callback);
        Type localVarReturnType = new TypeToken<SmsTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSmsTemplateRequestBuilder {
        private final String templateId;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private String template;
        private Object translations;
        private SmsTemplateType type;

        private UpdateSmsTemplateRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Set created
         * @param created  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set template
         * @param template  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder template(String template) {
            this.template = template;
            return this;
        }
        
        /**
         * Set translations
         * @param translations  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder translations(Object translations) {
            this.translations = translations;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateSmsTemplateRequestBuilder
         */
        public UpdateSmsTemplateRequestBuilder type(SmsTemplateType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateSmsTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return updateSmsTemplateCall(templateId, smsTemplate, _callback);
        }

        private SmsTemplate buildBodyParams() {
            SmsTemplate smsTemplate = new SmsTemplate();
            smsTemplate.created(this.created);
            smsTemplate.id(this.id);
            smsTemplate.lastUpdated(this.lastUpdated);
            smsTemplate.name(this.name);
            smsTemplate.template(this.template);
            smsTemplate.translations(this.translations);
            smsTemplate.type(this.type);
            return smsTemplate;
        }

        /**
         * Execute updateSmsTemplate request
         * @return SmsTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SmsTemplate execute() throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            ApiResponse<SmsTemplate> localVarResp = updateSmsTemplateWithHttpInfo(templateId, smsTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSmsTemplate request with HTTP info returned
         * @return ApiResponse&lt;SmsTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmsTemplate> executeWithHttpInfo() throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return updateSmsTemplateWithHttpInfo(templateId, smsTemplate);
        }

        /**
         * Execute updateSmsTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmsTemplate> _callback) throws ApiException {
            SmsTemplate smsTemplate = buildBodyParams();
            return updateSmsTemplateAsync(templateId, smsTemplate, _callback);
        }
    }

    /**
     * Update SMS Template
     * Updates the SMS template.
     * @param templateId  (required)
     * @param smsTemplate  (required)
     * @return UpdateSmsTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSmsTemplateRequestBuilder updateSmsTemplate(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new UpdateSmsTemplateRequestBuilder(templateId);
    }
}
