/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppUser;
import com.konfigthis.client.model.AppUserCredentials;
import com.konfigthis.client.model.Application;
import com.konfigthis.client.model.ApplicationAccessibility;
import com.konfigthis.client.model.ApplicationCredentials;
import com.konfigthis.client.model.ApplicationFeature;
import com.konfigthis.client.model.ApplicationGroupAssignment;
import com.konfigthis.client.model.ApplicationLicensing;
import com.konfigthis.client.model.ApplicationPreviewSamlAppMetadataResponse;
import com.konfigthis.client.model.ApplicationSettings;
import com.konfigthis.client.model.ApplicationSignOnMode;
import com.konfigthis.client.model.ApplicationUpdateLogoRequest;
import com.konfigthis.client.model.ApplicationVisibility;
import com.konfigthis.client.model.CapabilitiesCreateObject;
import com.konfigthis.client.model.CapabilitiesObject;
import com.konfigthis.client.model.CapabilitiesUpdateObject;
import com.konfigthis.client.model.ClientSecret;
import com.konfigthis.client.model.ClientSecretMetadata;
import com.konfigthis.client.model.Csr;
import com.konfigthis.client.model.CsrMetadata;
import com.konfigthis.client.model.CsrMetadataSubject;
import com.konfigthis.client.model.CsrMetadataSubjectAltNames;
import java.io.File;
import com.konfigthis.client.model.JsonWebKey;
import com.konfigthis.client.model.OAuth2Actor;
import com.konfigthis.client.model.OAuth2ScopeConsentGrant;
import com.konfigthis.client.model.OAuth2ScopeConsentGrantSource;
import com.konfigthis.client.model.OAuth2ScopeConsentGrantStatus;
import com.konfigthis.client.model.OAuth2Token;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProvisioningConnection;
import com.konfigthis.client.model.ProvisioningConnectionProfile;
import com.konfigthis.client.model.ProvisioningConnectionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateClientSecretCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/secrets/{secretId}/lifecycle/activate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateClientSecretValidateBeforeCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling activateClientSecret(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling activateClientSecret(Async)");
        }

        return activateClientSecretCall(appId, secretId, _callback);

    }


    private ApiResponse<ClientSecret> activateClientSecretWithHttpInfo(String appId, String secretId) throws ApiException {
        okhttp3.Call localVarCall = activateClientSecretValidateBeforeCall(appId, secretId, null);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateClientSecretAsync(String appId, String secretId, final ApiCallback<ClientSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateClientSecretValidateBeforeCall(appId, secretId, _callback);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateClientSecretRequestBuilder {
        private final String appId;
        private final String secretId;

        private ActivateClientSecretRequestBuilder(String appId, String secretId) {
            this.appId = appId;
            this.secretId = secretId;
        }

        /**
         * Build call for activateClientSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateClientSecretCall(appId, secretId, _callback);
        }


        /**
         * Execute activateClientSecret request
         * @return ClientSecret
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ClientSecret execute() throws ApiException {
            ApiResponse<ClientSecret> localVarResp = activateClientSecretWithHttpInfo(appId, secretId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateClientSecret request with HTTP info returned
         * @return ApiResponse&lt;ClientSecret&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientSecret> executeWithHttpInfo() throws ApiException {
            return activateClientSecretWithHttpInfo(appId, secretId);
        }

        /**
         * Execute activateClientSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientSecret> _callback) throws ApiException {
            return activateClientSecretAsync(appId, secretId, _callback);
        }
    }

    /**
     * Activate a client secret
     * Activates a specific client secret by secretId
     * @param appId  (required)
     * @param secretId  (required)
     * @return ActivateClientSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateClientSecretRequestBuilder activateClientSecret(String appId, String secretId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (secretId == null) throw new IllegalArgumentException("\"secretId\" is required but got null");
            

        return new ActivateClientSecretRequestBuilder(appId, secretId);
    }
    private okhttp3.Call activateDefaultProvisioningConnectionCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/connections/default/lifecycle/activate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateDefaultProvisioningConnectionValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling activateDefaultProvisioningConnection(Async)");
        }

        return activateDefaultProvisioningConnectionCall(appId, _callback);

    }


    private ApiResponse<Void> activateDefaultProvisioningConnectionWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = activateDefaultProvisioningConnectionValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activateDefaultProvisioningConnectionAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateDefaultProvisioningConnectionValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivateDefaultProvisioningConnectionRequestBuilder {
        private final String appId;

        private ActivateDefaultProvisioningConnectionRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for activateDefaultProvisioningConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateDefaultProvisioningConnectionCall(appId, _callback);
        }


        /**
         * Execute activateDefaultProvisioningConnection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activateDefaultProvisioningConnectionWithHttpInfo(appId);
        }

        /**
         * Execute activateDefaultProvisioningConnection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activateDefaultProvisioningConnectionWithHttpInfo(appId);
        }

        /**
         * Execute activateDefaultProvisioningConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activateDefaultProvisioningConnectionAsync(appId, _callback);
        }
    }

    /**
     * Activate default Provisioning Connection for application
     * Activates the default Provisioning Connection for an application.
     * @param appId  (required)
     * @return ActivateDefaultProvisioningConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ActivateDefaultProvisioningConnectionRequestBuilder activateDefaultProvisioningConnection(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ActivateDefaultProvisioningConnectionRequestBuilder(appId);
    }
    private okhttp3.Call activateInactiveCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/lifecycle/activate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateInactiveValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling activateInactive(Async)");
        }

        return activateInactiveCall(appId, _callback);

    }


    private ApiResponse<Void> activateInactiveWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = activateInactiveValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activateInactiveAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateInactiveValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivateInactiveRequestBuilder {
        private final String appId;

        private ActivateInactiveRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for activateInactive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateInactiveCall(appId, _callback);
        }


        /**
         * Execute activateInactive request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activateInactiveWithHttpInfo(appId);
        }

        /**
         * Execute activateInactive request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activateInactiveWithHttpInfo(appId);
        }

        /**
         * Execute activateInactive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activateInactiveAsync(appId, _callback);
        }
    }

    /**
     * Activate Application
     * Activates an inactive application.
     * @param appId  (required)
     * @return ActivateInactiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateInactiveRequestBuilder activateInactive(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ActivateInactiveRequestBuilder(appId);
    }
    private okhttp3.Call addClientSecretCall(String appId, ClientSecretMetadata clientSecretMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientSecretMetadata;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/secrets"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClientSecretValidateBeforeCall(String appId, ClientSecretMetadata clientSecretMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling addClientSecret(Async)");
        }

        // verify the required parameter 'clientSecretMetadata' is set
        if (clientSecretMetadata == null) {
            throw new ApiException("Missing the required parameter 'clientSecretMetadata' when calling addClientSecret(Async)");
        }

        return addClientSecretCall(appId, clientSecretMetadata, _callback);

    }


    private ApiResponse<ClientSecret> addClientSecretWithHttpInfo(String appId, ClientSecretMetadata clientSecretMetadata) throws ApiException {
        okhttp3.Call localVarCall = addClientSecretValidateBeforeCall(appId, clientSecretMetadata, null);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addClientSecretAsync(String appId, ClientSecretMetadata clientSecretMetadata, final ApiCallback<ClientSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClientSecretValidateBeforeCall(appId, clientSecretMetadata, _callback);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddClientSecretRequestBuilder {
        private final String appId;
        private String clientSecret;

        private AddClientSecretRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set clientSecret
         * @param clientSecret  (optional)
         * @return AddClientSecretRequestBuilder
         */
        public AddClientSecretRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Build call for addClientSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClientSecretMetadata clientSecretMetadata = buildBodyParams();
            return addClientSecretCall(appId, clientSecretMetadata, _callback);
        }

        private ClientSecretMetadata buildBodyParams() {
            ClientSecretMetadata clientSecretMetadata = new ClientSecretMetadata();
            clientSecretMetadata.clientSecret(this.clientSecret);
            return clientSecretMetadata;
        }

        /**
         * Execute addClientSecret request
         * @return ClientSecret
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ClientSecret execute() throws ApiException {
            ClientSecretMetadata clientSecretMetadata = buildBodyParams();
            ApiResponse<ClientSecret> localVarResp = addClientSecretWithHttpInfo(appId, clientSecretMetadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addClientSecret request with HTTP info returned
         * @return ApiResponse&lt;ClientSecret&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientSecret> executeWithHttpInfo() throws ApiException {
            ClientSecretMetadata clientSecretMetadata = buildBodyParams();
            return addClientSecretWithHttpInfo(appId, clientSecretMetadata);
        }

        /**
         * Execute addClientSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientSecret> _callback) throws ApiException {
            ClientSecretMetadata clientSecretMetadata = buildBodyParams();
            return addClientSecretAsync(appId, clientSecretMetadata, _callback);
        }
    }

    /**
     * Add new client secret
     * Adds a new secret to the client&#39;s collection of secrets.
     * @param appId  (required)
     * @param clientSecretMetadata  (required)
     * @return AddClientSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AddClientSecretRequestBuilder addClientSecret(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new AddClientSecretRequestBuilder(appId);
    }
    private okhttp3.Call assignGroupToCall(String appId, String groupId, ApplicationGroupAssignment applicationGroupAssignment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationGroupAssignment;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/groups/{groupId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignGroupToValidateBeforeCall(String appId, String groupId, ApplicationGroupAssignment applicationGroupAssignment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling assignGroupTo(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling assignGroupTo(Async)");
        }

        return assignGroupToCall(appId, groupId, applicationGroupAssignment, _callback);

    }


    private ApiResponse<ApplicationGroupAssignment> assignGroupToWithHttpInfo(String appId, String groupId, ApplicationGroupAssignment applicationGroupAssignment) throws ApiException {
        okhttp3.Call localVarCall = assignGroupToValidateBeforeCall(appId, groupId, applicationGroupAssignment, null);
        Type localVarReturnType = new TypeToken<ApplicationGroupAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignGroupToAsync(String appId, String groupId, ApplicationGroupAssignment applicationGroupAssignment, final ApiCallback<ApplicationGroupAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignGroupToValidateBeforeCall(appId, groupId, applicationGroupAssignment, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGroupAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignGroupToRequestBuilder {
        private final String appId;
        private final String groupId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private String id;
        private OffsetDateTime lastUpdated;
        private Integer priority;
        private Map<String, Object> profile;

        private AssignGroupToRequestBuilder(String appId, String groupId) {
            this.appId = appId;
            this.groupId = groupId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return AssignGroupToRequestBuilder
         */
        public AssignGroupToRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AssignGroupToRequestBuilder
         */
        public AssignGroupToRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return AssignGroupToRequestBuilder
         */
        public AssignGroupToRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return AssignGroupToRequestBuilder
         */
        public AssignGroupToRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return AssignGroupToRequestBuilder
         */
        public AssignGroupToRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return AssignGroupToRequestBuilder
         */
        public AssignGroupToRequestBuilder profile(Map<String, Object> profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Build call for assignGroupTo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationGroupAssignment applicationGroupAssignment = buildBodyParams();
            return assignGroupToCall(appId, groupId, applicationGroupAssignment, _callback);
        }

        private ApplicationGroupAssignment buildBodyParams() {
            ApplicationGroupAssignment applicationGroupAssignment = new ApplicationGroupAssignment();
            applicationGroupAssignment.embedded(this.embedded);
            applicationGroupAssignment.links(this.links);
            applicationGroupAssignment.id(this.id);
            applicationGroupAssignment.lastUpdated(this.lastUpdated);
            applicationGroupAssignment.priority(this.priority);
            applicationGroupAssignment.profile(this.profile);
            return applicationGroupAssignment;
        }

        /**
         * Execute assignGroupTo request
         * @return ApplicationGroupAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationGroupAssignment execute() throws ApiException {
            ApplicationGroupAssignment applicationGroupAssignment = buildBodyParams();
            ApiResponse<ApplicationGroupAssignment> localVarResp = assignGroupToWithHttpInfo(appId, groupId, applicationGroupAssignment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignGroupTo request with HTTP info returned
         * @return ApiResponse&lt;ApplicationGroupAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationGroupAssignment> executeWithHttpInfo() throws ApiException {
            ApplicationGroupAssignment applicationGroupAssignment = buildBodyParams();
            return assignGroupToWithHttpInfo(appId, groupId, applicationGroupAssignment);
        }

        /**
         * Execute assignGroupTo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationGroupAssignment> _callback) throws ApiException {
            ApplicationGroupAssignment applicationGroupAssignment = buildBodyParams();
            return assignGroupToAsync(appId, groupId, applicationGroupAssignment, _callback);
        }
    }

    /**
     * Assign Group to Application
     * Assigns a group to an application
     * @param appId  (required)
     * @param groupId  (required)
     * @return AssignGroupToRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssignGroupToRequestBuilder assignGroupTo(String appId, String groupId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new AssignGroupToRequestBuilder(appId, groupId);
    }
    private okhttp3.Call assignPolicyToApplicationCall(String appId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/policies/{policyId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignPolicyToApplicationValidateBeforeCall(String appId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling assignPolicyToApplication(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling assignPolicyToApplication(Async)");
        }

        return assignPolicyToApplicationCall(appId, policyId, _callback);

    }


    private ApiResponse<Void> assignPolicyToApplicationWithHttpInfo(String appId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = assignPolicyToApplicationValidateBeforeCall(appId, policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call assignPolicyToApplicationAsync(String appId, String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignPolicyToApplicationValidateBeforeCall(appId, policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssignPolicyToApplicationRequestBuilder {
        private final String appId;
        private final String policyId;

        private AssignPolicyToApplicationRequestBuilder(String appId, String policyId) {
            this.appId = appId;
            this.policyId = policyId;
        }

        /**
         * Build call for assignPolicyToApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return assignPolicyToApplicationCall(appId, policyId, _callback);
        }


        /**
         * Execute assignPolicyToApplication request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            assignPolicyToApplicationWithHttpInfo(appId, policyId);
        }

        /**
         * Execute assignPolicyToApplication request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return assignPolicyToApplicationWithHttpInfo(appId, policyId);
        }

        /**
         * Execute assignPolicyToApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return assignPolicyToApplicationAsync(appId, policyId, _callback);
        }
    }

    /**
     * Update application policy
     * Assign an application to a specific policy. This unassigns the application from its currently assigned policy.
     * @param appId  (required)
     * @param policyId  (required)
     * @return AssignPolicyToApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public AssignPolicyToApplicationRequestBuilder assignPolicyToApplication(String appId, String policyId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new AssignPolicyToApplicationRequestBuilder(appId, policyId);
    }
    private okhttp3.Call assignUserToApplicationCall(String appId, AppUser appUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appUser;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/users"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignUserToApplicationValidateBeforeCall(String appId, AppUser appUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling assignUserToApplication(Async)");
        }

        // verify the required parameter 'appUser' is set
        if (appUser == null) {
            throw new ApiException("Missing the required parameter 'appUser' when calling assignUserToApplication(Async)");
        }

        return assignUserToApplicationCall(appId, appUser, _callback);

    }


    private ApiResponse<AppUser> assignUserToApplicationWithHttpInfo(String appId, AppUser appUser) throws ApiException {
        okhttp3.Call localVarCall = assignUserToApplicationValidateBeforeCall(appId, appUser, null);
        Type localVarReturnType = new TypeToken<AppUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignUserToApplicationAsync(String appId, AppUser appUser, final ApiCallback<AppUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignUserToApplicationValidateBeforeCall(appId, appUser, _callback);
        Type localVarReturnType = new TypeToken<AppUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignUserToApplicationRequestBuilder {
        private final String appId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private AppUserCredentials credentials;
        private String externalId;
        private String id;
        private OffsetDateTime lastSync;
        private OffsetDateTime lastUpdated;
        private OffsetDateTime passwordChanged;
        private Map<String, Object> profile;
        private String scope;
        private String status;
        private OffsetDateTime statusChanged;
        private String syncState;

        private AssignUserToApplicationRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder credentials(AppUserCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastSync
         * @param lastSync  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder lastSync(OffsetDateTime lastSync) {
            this.lastSync = lastSync;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set passwordChanged
         * @param passwordChanged  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder passwordChanged(OffsetDateTime passwordChanged) {
            this.passwordChanged = passwordChanged;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder profile(Map<String, Object> profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set scope
         * @param scope  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set statusChanged
         * @param statusChanged  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder statusChanged(OffsetDateTime statusChanged) {
            this.statusChanged = statusChanged;
            return this;
        }
        
        /**
         * Set syncState
         * @param syncState  (optional)
         * @return AssignUserToApplicationRequestBuilder
         */
        public AssignUserToApplicationRequestBuilder syncState(String syncState) {
            this.syncState = syncState;
            return this;
        }
        
        /**
         * Build call for assignUserToApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppUser appUser = buildBodyParams();
            return assignUserToApplicationCall(appId, appUser, _callback);
        }

        private AppUser buildBodyParams() {
            AppUser appUser = new AppUser();
            appUser.embedded(this.embedded);
            appUser.links(this.links);
            appUser.created(this.created);
            appUser.credentials(this.credentials);
            appUser.externalId(this.externalId);
            appUser.id(this.id);
            appUser.lastSync(this.lastSync);
            appUser.lastUpdated(this.lastUpdated);
            appUser.passwordChanged(this.passwordChanged);
            appUser.profile(this.profile);
            appUser.scope(this.scope);
            appUser.status(this.status);
            appUser.statusChanged(this.statusChanged);
            appUser.syncState(this.syncState);
            return appUser;
        }

        /**
         * Execute assignUserToApplication request
         * @return AppUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AppUser execute() throws ApiException {
            AppUser appUser = buildBodyParams();
            ApiResponse<AppUser> localVarResp = assignUserToApplicationWithHttpInfo(appId, appUser);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignUserToApplication request with HTTP info returned
         * @return ApiResponse&lt;AppUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppUser> executeWithHttpInfo() throws ApiException {
            AppUser appUser = buildBodyParams();
            return assignUserToApplicationWithHttpInfo(appId, appUser);
        }

        /**
         * Execute assignUserToApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppUser> _callback) throws ApiException {
            AppUser appUser = buildBodyParams();
            return assignUserToApplicationAsync(appId, appUser, _callback);
        }
    }

    /**
     * Assign User to Application for SSO &amp; Provisioning
     * Assigns an user to an application with [credentials](https://raw.githubusercontent.com) and an app-specific [profile](https://raw.githubusercontent.com). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
     * @param appId  (required)
     * @param appUser  (required)
     * @return AssignUserToApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssignUserToApplicationRequestBuilder assignUserToApplication(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new AssignUserToApplicationRequestBuilder(appId);
    }
    private okhttp3.Call cloneApplicationKeyCredentialCall(String appId, String keyId, String targetAid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/keys/{keyId}/clone"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetAid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetAid", targetAid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneApplicationKeyCredentialValidateBeforeCall(String appId, String keyId, String targetAid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling cloneApplicationKeyCredential(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling cloneApplicationKeyCredential(Async)");
        }

        // verify the required parameter 'targetAid' is set
        if (targetAid == null) {
            throw new ApiException("Missing the required parameter 'targetAid' when calling cloneApplicationKeyCredential(Async)");
        }

        return cloneApplicationKeyCredentialCall(appId, keyId, targetAid, _callback);

    }


    private ApiResponse<JsonWebKey> cloneApplicationKeyCredentialWithHttpInfo(String appId, String keyId, String targetAid) throws ApiException {
        okhttp3.Call localVarCall = cloneApplicationKeyCredentialValidateBeforeCall(appId, keyId, targetAid, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cloneApplicationKeyCredentialAsync(String appId, String keyId, String targetAid, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneApplicationKeyCredentialValidateBeforeCall(appId, keyId, targetAid, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloneApplicationKeyCredentialRequestBuilder {
        private final String appId;
        private final String keyId;
        private final String targetAid;

        private CloneApplicationKeyCredentialRequestBuilder(String appId, String keyId, String targetAid) {
            this.appId = appId;
            this.keyId = keyId;
            this.targetAid = targetAid;
        }

        /**
         * Build call for cloneApplicationKeyCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cloneApplicationKeyCredentialCall(appId, keyId, targetAid, _callback);
        }


        /**
         * Execute cloneApplicationKeyCredential request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = cloneApplicationKeyCredentialWithHttpInfo(appId, keyId, targetAid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cloneApplicationKeyCredential request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return cloneApplicationKeyCredentialWithHttpInfo(appId, keyId, targetAid);
        }

        /**
         * Execute cloneApplicationKeyCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return cloneApplicationKeyCredentialAsync(appId, keyId, targetAid, _callback);
        }
    }

    /**
     * Clone Application Key Credential
     * Clones a X.509 certificate for an application key credential from a source application to target application.
     * @param appId  (required)
     * @param keyId  (required)
     * @param targetAid Unique key of the target Application (required)
     * @return CloneApplicationKeyCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CloneApplicationKeyCredentialRequestBuilder cloneApplicationKeyCredential(String appId, String keyId, String targetAid) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        if (targetAid == null) throw new IllegalArgumentException("\"targetAid\" is required but got null");
            

        return new CloneApplicationKeyCredentialRequestBuilder(appId, keyId, targetAid);
    }
    private okhttp3.Call createNewCall(Application application, Boolean activate, String oktaAccessGatewayAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/api/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        if (oktaAccessGatewayAgent != null) {
            localVarHeaderParams.put("OktaAccessGateway-Agent", localVarApiClient.parameterToString(oktaAccessGatewayAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(Application application, Boolean activate, String oktaAccessGatewayAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling createNew(Async)");
        }

        return createNewCall(application, activate, oktaAccessGatewayAgent, _callback);

    }


    private ApiResponse<Application> createNewWithHttpInfo(Application application, Boolean activate, String oktaAccessGatewayAgent) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(application, activate, oktaAccessGatewayAgent, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(Application application, Boolean activate, String oktaAccessGatewayAgent, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(application, activate, oktaAccessGatewayAgent, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private ApplicationAccessibility accessibility;
        private OffsetDateTime created;
        private ApplicationCredentials credentials;
        private List<String> features;
        private String id;
        private String label;
        private OffsetDateTime lastUpdated;
        private ApplicationLicensing licensing;
        private String name;
        private Map<String, Object> profile;
        private ApplicationSettings settings;
        private ApplicationSignOnMode signOnMode;
        private String status;
        private ApplicationVisibility visibility;
        private Boolean activate;
        private String oktaAccessGatewayAgent;

        private CreateNewRequestBuilder() {
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set accessibility
         * @param accessibility  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder accessibility(ApplicationAccessibility accessibility) {
            this.accessibility = accessibility;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder credentials(ApplicationCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set features
         * @param features  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder features(List<String> features) {
            this.features = features;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set label
         * @param label  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set licensing
         * @param licensing  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder licensing(ApplicationLicensing licensing) {
            this.licensing = licensing;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder profile(Map<String, Object> profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder settings(ApplicationSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set signOnMode
         * @param signOnMode  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder signOnMode(ApplicationSignOnMode signOnMode) {
            this.signOnMode = signOnMode;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder visibility(ApplicationVisibility visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set activate
         * @param activate Executes activation lifecycle operation when creating the app (optional, default to true)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder activate(Boolean activate) {
            this.activate = activate;
            return this;
        }
        
        /**
         * Set oktaAccessGatewayAgent
         * @param oktaAccessGatewayAgent  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder oktaAccessGatewayAgent(String oktaAccessGatewayAgent) {
            this.oktaAccessGatewayAgent = oktaAccessGatewayAgent;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Application application = buildBodyParams();
            return createNewCall(application, activate, oktaAccessGatewayAgent, _callback);
        }

        private Application buildBodyParams() {
            Application application = new Application();
            application.embedded(this.embedded);
            application.links(this.links);
            application.accessibility(this.accessibility);
            application.created(this.created);
            application.credentials(this.credentials);
            application.features(this.features);
            application.id(this.id);
            application.label(this.label);
            application.lastUpdated(this.lastUpdated);
            application.licensing(this.licensing);
            application.name(this.name);
            application.profile(this.profile);
            application.settings(this.settings);
            application.signOnMode(this.signOnMode);
            if (this.status != null)
            application.status(Application.StatusEnum.fromValue(this.status));
            application.visibility(this.visibility);
            return application;
        }

        /**
         * Execute createNew request
         * @return Application
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Application execute() throws ApiException {
            Application application = buildBodyParams();
            ApiResponse<Application> localVarResp = createNewWithHttpInfo(application, activate, oktaAccessGatewayAgent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;Application&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Application> executeWithHttpInfo() throws ApiException {
            Application application = buildBodyParams();
            return createNewWithHttpInfo(application, activate, oktaAccessGatewayAgent);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Application> _callback) throws ApiException {
            Application application = buildBodyParams();
            return createNewAsync(application, activate, oktaAccessGatewayAgent, _callback);
        }
    }

    /**
     * Add Application
     * Adds a new application to your Okta organization.
     * @param application  (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew() throws IllegalArgumentException {
        return new CreateNewRequestBuilder();
    }
    private okhttp3.Call deactivateClientSecretByIdCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/secrets/{secretId}/lifecycle/deactivate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateClientSecretByIdValidateBeforeCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deactivateClientSecretById(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling deactivateClientSecretById(Async)");
        }

        return deactivateClientSecretByIdCall(appId, secretId, _callback);

    }


    private ApiResponse<ClientSecret> deactivateClientSecretByIdWithHttpInfo(String appId, String secretId) throws ApiException {
        okhttp3.Call localVarCall = deactivateClientSecretByIdValidateBeforeCall(appId, secretId, null);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateClientSecretByIdAsync(String appId, String secretId, final ApiCallback<ClientSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateClientSecretByIdValidateBeforeCall(appId, secretId, _callback);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateClientSecretByIdRequestBuilder {
        private final String appId;
        private final String secretId;

        private DeactivateClientSecretByIdRequestBuilder(String appId, String secretId) {
            this.appId = appId;
            this.secretId = secretId;
        }

        /**
         * Build call for deactivateClientSecretById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateClientSecretByIdCall(appId, secretId, _callback);
        }


        /**
         * Execute deactivateClientSecretById request
         * @return ClientSecret
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ClientSecret execute() throws ApiException {
            ApiResponse<ClientSecret> localVarResp = deactivateClientSecretByIdWithHttpInfo(appId, secretId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateClientSecretById request with HTTP info returned
         * @return ApiResponse&lt;ClientSecret&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientSecret> executeWithHttpInfo() throws ApiException {
            return deactivateClientSecretByIdWithHttpInfo(appId, secretId);
        }

        /**
         * Execute deactivateClientSecretById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientSecret> _callback) throws ApiException {
            return deactivateClientSecretByIdAsync(appId, secretId, _callback);
        }
    }

    /**
     * Deactivate a client secret
     * Deactivates a specific client secret by secretId
     * @param appId  (required)
     * @param secretId  (required)
     * @return DeactivateClientSecretByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateClientSecretByIdRequestBuilder deactivateClientSecretById(String appId, String secretId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (secretId == null) throw new IllegalArgumentException("\"secretId\" is required but got null");
            

        return new DeactivateClientSecretByIdRequestBuilder(appId, secretId);
    }
    private okhttp3.Call deactivateDefaultProvisioningConnectionCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/connections/default/lifecycle/deactivate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateDefaultProvisioningConnectionValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deactivateDefaultProvisioningConnection(Async)");
        }

        return deactivateDefaultProvisioningConnectionCall(appId, _callback);

    }


    private ApiResponse<Void> deactivateDefaultProvisioningConnectionWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deactivateDefaultProvisioningConnectionValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateDefaultProvisioningConnectionAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateDefaultProvisioningConnectionValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateDefaultProvisioningConnectionRequestBuilder {
        private final String appId;

        private DeactivateDefaultProvisioningConnectionRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for deactivateDefaultProvisioningConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateDefaultProvisioningConnectionCall(appId, _callback);
        }


        /**
         * Execute deactivateDefaultProvisioningConnection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateDefaultProvisioningConnectionWithHttpInfo(appId);
        }

        /**
         * Execute deactivateDefaultProvisioningConnection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateDefaultProvisioningConnectionWithHttpInfo(appId);
        }

        /**
         * Execute deactivateDefaultProvisioningConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateDefaultProvisioningConnectionAsync(appId, _callback);
        }
    }

    /**
     * Deactivate default Provisioning Connection for application
     * Deactivates the default Provisioning Connection for an application.
     * @param appId  (required)
     * @return DeactivateDefaultProvisioningConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateDefaultProvisioningConnectionRequestBuilder deactivateDefaultProvisioningConnection(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new DeactivateDefaultProvisioningConnectionRequestBuilder(appId);
    }
    private okhttp3.Call deactivateLifecycleCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/lifecycle/deactivate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deactivateLifecycle(Async)");
        }

        return deactivateLifecycleCall(appId, _callback);

    }


    private ApiResponse<Void> deactivateLifecycleWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateLifecycleAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleRequestBuilder {
        private final String appId;

        private DeactivateLifecycleRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for deactivateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleCall(appId, _callback);
        }


        /**
         * Execute deactivateLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateLifecycleWithHttpInfo(appId);
        }

        /**
         * Execute deactivateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleWithHttpInfo(appId);
        }

        /**
         * Execute deactivateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateLifecycleAsync(appId, _callback);
        }
    }

    /**
     * Deactivate Application
     * Deactivates an active application.
     * @param appId  (required)
     * @return DeactivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleRequestBuilder deactivateLifecycle(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new DeactivateLifecycleRequestBuilder(appId);
    }
    private okhttp3.Call deleteCsrByIdCall(String appId, String csrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/csrs/{csrId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "csrId" + "}", localVarApiClient.escapeString(csrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCsrByIdValidateBeforeCall(String appId, String csrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteCsrById(Async)");
        }

        // verify the required parameter 'csrId' is set
        if (csrId == null) {
            throw new ApiException("Missing the required parameter 'csrId' when calling deleteCsrById(Async)");
        }

        return deleteCsrByIdCall(appId, csrId, _callback);

    }


    private ApiResponse<Void> deleteCsrByIdWithHttpInfo(String appId, String csrId) throws ApiException {
        okhttp3.Call localVarCall = deleteCsrByIdValidateBeforeCall(appId, csrId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCsrByIdAsync(String appId, String csrId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCsrByIdValidateBeforeCall(appId, csrId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCsrByIdRequestBuilder {
        private final String appId;
        private final String csrId;

        private DeleteCsrByIdRequestBuilder(String appId, String csrId) {
            this.appId = appId;
            this.csrId = csrId;
        }

        /**
         * Build call for deleteCsrById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCsrByIdCall(appId, csrId, _callback);
        }


        /**
         * Execute deleteCsrById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCsrByIdWithHttpInfo(appId, csrId);
        }

        /**
         * Execute deleteCsrById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCsrByIdWithHttpInfo(appId, csrId);
        }

        /**
         * Execute deleteCsrById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCsrByIdAsync(appId, csrId, _callback);
        }
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param csrId  (required)
     * @return DeleteCsrByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCsrByIdRequestBuilder deleteCsrById(String appId, String csrId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (csrId == null) throw new IllegalArgumentException("\"csrId\" is required but got null");
            

        return new DeleteCsrByIdRequestBuilder(appId, csrId);
    }
    private okhttp3.Call generateCsrForApplicationCall(String appId, CsrMetadata csrMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = csrMetadata;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/csrs"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCsrForApplicationValidateBeforeCall(String appId, CsrMetadata csrMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling generateCsrForApplication(Async)");
        }

        // verify the required parameter 'csrMetadata' is set
        if (csrMetadata == null) {
            throw new ApiException("Missing the required parameter 'csrMetadata' when calling generateCsrForApplication(Async)");
        }

        return generateCsrForApplicationCall(appId, csrMetadata, _callback);

    }


    private ApiResponse<Csr> generateCsrForApplicationWithHttpInfo(String appId, CsrMetadata csrMetadata) throws ApiException {
        okhttp3.Call localVarCall = generateCsrForApplicationValidateBeforeCall(appId, csrMetadata, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateCsrForApplicationAsync(String appId, CsrMetadata csrMetadata, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCsrForApplicationValidateBeforeCall(appId, csrMetadata, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateCsrForApplicationRequestBuilder {
        private final String appId;
        private CsrMetadataSubject subject;
        private CsrMetadataSubjectAltNames subjectAltNames;

        private GenerateCsrForApplicationRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set subject
         * @param subject  (optional)
         * @return GenerateCsrForApplicationRequestBuilder
         */
        public GenerateCsrForApplicationRequestBuilder subject(CsrMetadataSubject subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set subjectAltNames
         * @param subjectAltNames  (optional)
         * @return GenerateCsrForApplicationRequestBuilder
         */
        public GenerateCsrForApplicationRequestBuilder subjectAltNames(CsrMetadataSubjectAltNames subjectAltNames) {
            this.subjectAltNames = subjectAltNames;
            return this;
        }
        
        /**
         * Build call for generateCsrForApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            return generateCsrForApplicationCall(appId, csrMetadata, _callback);
        }

        private CsrMetadata buildBodyParams() {
            CsrMetadata csrMetadata = new CsrMetadata();
            csrMetadata.subject(this.subject);
            csrMetadata.subjectAltNames(this.subjectAltNames);
            return csrMetadata;
        }

        /**
         * Execute generateCsrForApplication request
         * @return Csr
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public Csr execute() throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            ApiResponse<Csr> localVarResp = generateCsrForApplicationWithHttpInfo(appId, csrMetadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateCsrForApplication request with HTTP info returned
         * @return ApiResponse&lt;Csr&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Csr> executeWithHttpInfo() throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            return generateCsrForApplicationWithHttpInfo(appId, csrMetadata);
        }

        /**
         * Execute generateCsrForApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Csr> _callback) throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            return generateCsrForApplicationAsync(appId, csrMetadata, _callback);
        }
    }

    /**
     * Generate Certificate Signing Request for Application
     * Generates a new key pair and returns the Certificate Signing Request for it.
     * @param appId  (required)
     * @param csrMetadata  (required)
     * @return GenerateCsrForApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCsrForApplicationRequestBuilder generateCsrForApplication(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GenerateCsrForApplicationRequestBuilder(appId);
    }
    private okhttp3.Call generateX509CertificateCall(String appId, Integer validityYears, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/keys/generate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validityYears != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validityYears", validityYears));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateX509CertificateValidateBeforeCall(String appId, Integer validityYears, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling generateX509Certificate(Async)");
        }

        return generateX509CertificateCall(appId, validityYears, _callback);

    }


    private ApiResponse<JsonWebKey> generateX509CertificateWithHttpInfo(String appId, Integer validityYears) throws ApiException {
        okhttp3.Call localVarCall = generateX509CertificateValidateBeforeCall(appId, validityYears, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateX509CertificateAsync(String appId, Integer validityYears, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateX509CertificateValidateBeforeCall(appId, validityYears, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateX509CertificateRequestBuilder {
        private final String appId;
        private Integer validityYears;

        private GenerateX509CertificateRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set validityYears
         * @param validityYears  (optional)
         * @return GenerateX509CertificateRequestBuilder
         */
        public GenerateX509CertificateRequestBuilder validityYears(Integer validityYears) {
            this.validityYears = validityYears;
            return this;
        }
        
        /**
         * Build call for generateX509Certificate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateX509CertificateCall(appId, validityYears, _callback);
        }


        /**
         * Execute generateX509Certificate request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = generateX509CertificateWithHttpInfo(appId, validityYears);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateX509Certificate request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return generateX509CertificateWithHttpInfo(appId, validityYears);
        }

        /**
         * Execute generateX509Certificate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return generateX509CertificateAsync(appId, validityYears, _callback);
        }
    }

    /**
     * 
     * Generates a new X.509 certificate for an application key credential
     * @param appId  (required)
     * @return GenerateX509CertificateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public GenerateX509CertificateRequestBuilder generateX509Certificate(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GenerateX509CertificateRequestBuilder(appId);
    }
    private okhttp3.Call getByIdCall(String appId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String appId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getById(Async)");
        }

        return getByIdCall(appId, expand, _callback);

    }


    private ApiResponse<Application> getByIdWithHttpInfo(String appId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, expand, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String appId, String expand, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, expand, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String appId;
        private String expand;

        private GetByIdRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(appId, expand, _callback);
        }


        /**
         * Execute getById request
         * @return Application
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Application execute() throws ApiException {
            ApiResponse<Application> localVarResp = getByIdWithHttpInfo(appId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Application&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Application> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(appId, expand);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Application> _callback) throws ApiException {
            return getByIdAsync(appId, expand, _callback);
        }
    }

    /**
     * Get Application
     * Fetches an application from your Okta organization by &#x60;id&#x60;.
     * @param appId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetByIdRequestBuilder(appId);
    }
    private okhttp3.Call getClientSecretCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/secrets/{secretId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientSecretValidateBeforeCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getClientSecret(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling getClientSecret(Async)");
        }

        return getClientSecretCall(appId, secretId, _callback);

    }


    private ApiResponse<ClientSecret> getClientSecretWithHttpInfo(String appId, String secretId) throws ApiException {
        okhttp3.Call localVarCall = getClientSecretValidateBeforeCall(appId, secretId, null);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientSecretAsync(String appId, String secretId, final ApiCallback<ClientSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientSecretValidateBeforeCall(appId, secretId, _callback);
        Type localVarReturnType = new TypeToken<ClientSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientSecretRequestBuilder {
        private final String appId;
        private final String secretId;

        private GetClientSecretRequestBuilder(String appId, String secretId) {
            this.appId = appId;
            this.secretId = secretId;
        }

        /**
         * Build call for getClientSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientSecretCall(appId, secretId, _callback);
        }


        /**
         * Execute getClientSecret request
         * @return ClientSecret
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ClientSecret execute() throws ApiException {
            ApiResponse<ClientSecret> localVarResp = getClientSecretWithHttpInfo(appId, secretId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientSecret request with HTTP info returned
         * @return ApiResponse&lt;ClientSecret&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientSecret> executeWithHttpInfo() throws ApiException {
            return getClientSecretWithHttpInfo(appId, secretId);
        }

        /**
         * Execute getClientSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientSecret> _callback) throws ApiException {
            return getClientSecretAsync(appId, secretId, _callback);
        }
    }

    /**
     * Get client secret
     * Gets a specific client secret by secretId
     * @param appId  (required)
     * @param secretId  (required)
     * @return GetClientSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClientSecretRequestBuilder getClientSecret(String appId, String secretId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (secretId == null) throw new IllegalArgumentException("\"secretId\" is required but got null");
            

        return new GetClientSecretRequestBuilder(appId, secretId);
    }
    private okhttp3.Call getCredentialsCsrsCall(String appId, String csrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/csrs/{csrId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "csrId" + "}", localVarApiClient.escapeString(csrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialsCsrsValidateBeforeCall(String appId, String csrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCredentialsCsrs(Async)");
        }

        // verify the required parameter 'csrId' is set
        if (csrId == null) {
            throw new ApiException("Missing the required parameter 'csrId' when calling getCredentialsCsrs(Async)");
        }

        return getCredentialsCsrsCall(appId, csrId, _callback);

    }


    private ApiResponse<Csr> getCredentialsCsrsWithHttpInfo(String appId, String csrId) throws ApiException {
        okhttp3.Call localVarCall = getCredentialsCsrsValidateBeforeCall(appId, csrId, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCredentialsCsrsAsync(String appId, String csrId, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialsCsrsValidateBeforeCall(appId, csrId, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCredentialsCsrsRequestBuilder {
        private final String appId;
        private final String csrId;

        private GetCredentialsCsrsRequestBuilder(String appId, String csrId) {
            this.appId = appId;
            this.csrId = csrId;
        }

        /**
         * Build call for getCredentialsCsrs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCredentialsCsrsCall(appId, csrId, _callback);
        }


        /**
         * Execute getCredentialsCsrs request
         * @return Csr
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Csr execute() throws ApiException {
            ApiResponse<Csr> localVarResp = getCredentialsCsrsWithHttpInfo(appId, csrId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCredentialsCsrs request with HTTP info returned
         * @return ApiResponse&lt;Csr&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Csr> executeWithHttpInfo() throws ApiException {
            return getCredentialsCsrsWithHttpInfo(appId, csrId);
        }

        /**
         * Execute getCredentialsCsrs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Csr> _callback) throws ApiException {
            return getCredentialsCsrsAsync(appId, csrId, _callback);
        }
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param csrId  (required)
     * @return GetCredentialsCsrsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCredentialsCsrsRequestBuilder getCredentialsCsrs(String appId, String csrId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (csrId == null) throw new IllegalArgumentException("\"csrId\" is required but got null");
            

        return new GetCredentialsCsrsRequestBuilder(appId, csrId);
    }
    private okhttp3.Call getDefaultProvisioningConnectionCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/connections/default"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultProvisioningConnectionValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getDefaultProvisioningConnection(Async)");
        }

        return getDefaultProvisioningConnectionCall(appId, _callback);

    }


    private ApiResponse<ProvisioningConnection> getDefaultProvisioningConnectionWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getDefaultProvisioningConnectionValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ProvisioningConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultProvisioningConnectionAsync(String appId, final ApiCallback<ProvisioningConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultProvisioningConnectionValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultProvisioningConnectionRequestBuilder {
        private final String appId;

        private GetDefaultProvisioningConnectionRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getDefaultProvisioningConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultProvisioningConnectionCall(appId, _callback);
        }


        /**
         * Execute getDefaultProvisioningConnection request
         * @return ProvisioningConnection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ProvisioningConnection execute() throws ApiException {
            ApiResponse<ProvisioningConnection> localVarResp = getDefaultProvisioningConnectionWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultProvisioningConnection request with HTTP info returned
         * @return ApiResponse&lt;ProvisioningConnection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProvisioningConnection> executeWithHttpInfo() throws ApiException {
            return getDefaultProvisioningConnectionWithHttpInfo(appId);
        }

        /**
         * Execute getDefaultProvisioningConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProvisioningConnection> _callback) throws ApiException {
            return getDefaultProvisioningConnectionAsync(appId, _callback);
        }
    }

    /**
     * Fetches the default Provisioning Connection for an application.
     * Get default Provisioning Connection for application
     * @param appId  (required)
     * @return GetDefaultProvisioningConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultProvisioningConnectionRequestBuilder getDefaultProvisioningConnection(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetDefaultProvisioningConnectionRequestBuilder(appId);
    }
    private okhttp3.Call getFeatureCall(String appId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/features/{name}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeatureValidateBeforeCall(String appId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getFeature(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFeature(Async)");
        }

        return getFeatureCall(appId, name, _callback);

    }


    private ApiResponse<ApplicationFeature> getFeatureWithHttpInfo(String appId, String name) throws ApiException {
        okhttp3.Call localVarCall = getFeatureValidateBeforeCall(appId, name, null);
        Type localVarReturnType = new TypeToken<ApplicationFeature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeatureAsync(String appId, String name, final ApiCallback<ApplicationFeature> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeatureValidateBeforeCall(appId, name, _callback);
        Type localVarReturnType = new TypeToken<ApplicationFeature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeatureRequestBuilder {
        private final String appId;
        private final String name;

        private GetFeatureRequestBuilder(String appId, String name) {
            this.appId = appId;
            this.name = name;
        }

        /**
         * Build call for getFeature
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeatureCall(appId, name, _callback);
        }


        /**
         * Execute getFeature request
         * @return ApplicationFeature
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationFeature execute() throws ApiException {
            ApiResponse<ApplicationFeature> localVarResp = getFeatureWithHttpInfo(appId, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeature request with HTTP info returned
         * @return ApiResponse&lt;ApplicationFeature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationFeature> executeWithHttpInfo() throws ApiException {
            return getFeatureWithHttpInfo(appId, name);
        }

        /**
         * Execute getFeature request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationFeature> _callback) throws ApiException {
            return getFeatureAsync(appId, name, _callback);
        }
    }

    /**
     * Fetches a Feature object for an application.
     * Fetches a Feature object for an application.
     * @param appId  (required)
     * @param name  (required)
     * @return GetFeatureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetFeatureRequestBuilder getFeature(String appId, String name) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new GetFeatureRequestBuilder(appId, name);
    }
    private okhttp3.Call getGroupAssignmentCall(String appId, String groupId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/groups/{groupId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupAssignmentValidateBeforeCall(String appId, String groupId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getGroupAssignment(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupAssignment(Async)");
        }

        return getGroupAssignmentCall(appId, groupId, expand, _callback);

    }


    private ApiResponse<ApplicationGroupAssignment> getGroupAssignmentWithHttpInfo(String appId, String groupId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getGroupAssignmentValidateBeforeCall(appId, groupId, expand, null);
        Type localVarReturnType = new TypeToken<ApplicationGroupAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupAssignmentAsync(String appId, String groupId, String expand, final ApiCallback<ApplicationGroupAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupAssignmentValidateBeforeCall(appId, groupId, expand, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGroupAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupAssignmentRequestBuilder {
        private final String appId;
        private final String groupId;
        private String expand;

        private GetGroupAssignmentRequestBuilder(String appId, String groupId) {
            this.appId = appId;
            this.groupId = groupId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetGroupAssignmentRequestBuilder
         */
        public GetGroupAssignmentRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getGroupAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupAssignmentCall(appId, groupId, expand, _callback);
        }


        /**
         * Execute getGroupAssignment request
         * @return ApplicationGroupAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationGroupAssignment execute() throws ApiException {
            ApiResponse<ApplicationGroupAssignment> localVarResp = getGroupAssignmentWithHttpInfo(appId, groupId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupAssignment request with HTTP info returned
         * @return ApiResponse&lt;ApplicationGroupAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationGroupAssignment> executeWithHttpInfo() throws ApiException {
            return getGroupAssignmentWithHttpInfo(appId, groupId, expand);
        }

        /**
         * Execute getGroupAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationGroupAssignment> _callback) throws ApiException {
            return getGroupAssignmentAsync(appId, groupId, expand, _callback);
        }
    }

    /**
     * Get Assigned Group for Application
     * Fetches an application group assignment
     * @param appId  (required)
     * @param groupId  (required)
     * @return GetGroupAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupAssignmentRequestBuilder getGroupAssignment(String appId, String groupId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetGroupAssignmentRequestBuilder(appId, groupId);
    }
    private okhttp3.Call getKeyCredentialCall(String appId, String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/keys/{keyId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyCredentialValidateBeforeCall(String appId, String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getKeyCredential(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getKeyCredential(Async)");
        }

        return getKeyCredentialCall(appId, keyId, _callback);

    }


    private ApiResponse<JsonWebKey> getKeyCredentialWithHttpInfo(String appId, String keyId) throws ApiException {
        okhttp3.Call localVarCall = getKeyCredentialValidateBeforeCall(appId, keyId, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKeyCredentialAsync(String appId, String keyId, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyCredentialValidateBeforeCall(appId, keyId, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKeyCredentialRequestBuilder {
        private final String appId;
        private final String keyId;

        private GetKeyCredentialRequestBuilder(String appId, String keyId) {
            this.appId = appId;
            this.keyId = keyId;
        }

        /**
         * Build call for getKeyCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKeyCredentialCall(appId, keyId, _callback);
        }


        /**
         * Execute getKeyCredential request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = getKeyCredentialWithHttpInfo(appId, keyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKeyCredential request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return getKeyCredentialWithHttpInfo(appId, keyId);
        }

        /**
         * Execute getKeyCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return getKeyCredentialAsync(appId, keyId, _callback);
        }
    }

    /**
     * Get Key Credential for Application
     * Gets a specific application key credential by kid
     * @param appId  (required)
     * @param keyId  (required)
     * @return GetKeyCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetKeyCredentialRequestBuilder getKeyCredential(String appId, String keyId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new GetKeyCredentialRequestBuilder(appId, keyId);
    }
    private okhttp3.Call getSingleScopeConsentGrantCall(String appId, String grantId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/grants/{grantId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "grantId" + "}", localVarApiClient.escapeString(grantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleScopeConsentGrantValidateBeforeCall(String appId, String grantId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSingleScopeConsentGrant(Async)");
        }

        // verify the required parameter 'grantId' is set
        if (grantId == null) {
            throw new ApiException("Missing the required parameter 'grantId' when calling getSingleScopeConsentGrant(Async)");
        }

        return getSingleScopeConsentGrantCall(appId, grantId, expand, _callback);

    }


    private ApiResponse<OAuth2ScopeConsentGrant> getSingleScopeConsentGrantWithHttpInfo(String appId, String grantId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getSingleScopeConsentGrantValidateBeforeCall(appId, grantId, expand, null);
        Type localVarReturnType = new TypeToken<OAuth2ScopeConsentGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleScopeConsentGrantAsync(String appId, String grantId, String expand, final ApiCallback<OAuth2ScopeConsentGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleScopeConsentGrantValidateBeforeCall(appId, grantId, expand, _callback);
        Type localVarReturnType = new TypeToken<OAuth2ScopeConsentGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleScopeConsentGrantRequestBuilder {
        private final String appId;
        private final String grantId;
        private String expand;

        private GetSingleScopeConsentGrantRequestBuilder(String appId, String grantId) {
            this.appId = appId;
            this.grantId = grantId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetSingleScopeConsentGrantRequestBuilder
         */
        public GetSingleScopeConsentGrantRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getSingleScopeConsentGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleScopeConsentGrantCall(appId, grantId, expand, _callback);
        }


        /**
         * Execute getSingleScopeConsentGrant request
         * @return OAuth2ScopeConsentGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2ScopeConsentGrant execute() throws ApiException {
            ApiResponse<OAuth2ScopeConsentGrant> localVarResp = getSingleScopeConsentGrantWithHttpInfo(appId, grantId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleScopeConsentGrant request with HTTP info returned
         * @return ApiResponse&lt;OAuth2ScopeConsentGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2ScopeConsentGrant> executeWithHttpInfo() throws ApiException {
            return getSingleScopeConsentGrantWithHttpInfo(appId, grantId, expand);
        }

        /**
         * Execute getSingleScopeConsentGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2ScopeConsentGrant> _callback) throws ApiException {
            return getSingleScopeConsentGrantAsync(appId, grantId, expand, _callback);
        }
    }

    /**
     * 
     * Fetches a single scope consent grant for the application
     * @param appId  (required)
     * @param grantId  (required)
     * @return GetSingleScopeConsentGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleScopeConsentGrantRequestBuilder getSingleScopeConsentGrant(String appId, String grantId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (grantId == null) throw new IllegalArgumentException("\"grantId\" is required but got null");
            

        return new GetSingleScopeConsentGrantRequestBuilder(appId, grantId);
    }
    private okhttp3.Call getSpecificUserAssignmentCall(String appId, String userId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/users/{userId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificUserAssignmentValidateBeforeCall(String appId, String userId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSpecificUserAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificUserAssignment(Async)");
        }

        return getSpecificUserAssignmentCall(appId, userId, expand, _callback);

    }


    private ApiResponse<AppUser> getSpecificUserAssignmentWithHttpInfo(String appId, String userId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getSpecificUserAssignmentValidateBeforeCall(appId, userId, expand, null);
        Type localVarReturnType = new TypeToken<AppUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificUserAssignmentAsync(String appId, String userId, String expand, final ApiCallback<AppUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificUserAssignmentValidateBeforeCall(appId, userId, expand, _callback);
        Type localVarReturnType = new TypeToken<AppUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificUserAssignmentRequestBuilder {
        private final String appId;
        private final String userId;
        private String expand;

        private GetSpecificUserAssignmentRequestBuilder(String appId, String userId) {
            this.appId = appId;
            this.userId = userId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetSpecificUserAssignmentRequestBuilder
         */
        public GetSpecificUserAssignmentRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getSpecificUserAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificUserAssignmentCall(appId, userId, expand, _callback);
        }


        /**
         * Execute getSpecificUserAssignment request
         * @return AppUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AppUser execute() throws ApiException {
            ApiResponse<AppUser> localVarResp = getSpecificUserAssignmentWithHttpInfo(appId, userId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificUserAssignment request with HTTP info returned
         * @return ApiResponse&lt;AppUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppUser> executeWithHttpInfo() throws ApiException {
            return getSpecificUserAssignmentWithHttpInfo(appId, userId, expand);
        }

        /**
         * Execute getSpecificUserAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppUser> _callback) throws ApiException {
            return getSpecificUserAssignmentAsync(appId, userId, expand, _callback);
        }
    }

    /**
     * Get Assigned User for Application
     * Fetches a specific user assignment for application by &#x60;id&#x60;.
     * @param appId  (required)
     * @param userId  (required)
     * @return GetSpecificUserAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificUserAssignmentRequestBuilder getSpecificUserAssignment(String appId, String userId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetSpecificUserAssignmentRequestBuilder(appId, userId);
    }
    private okhttp3.Call getTokenCall(String appId, String tokenId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/tokens/{tokenId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenValidateBeforeCall(String appId, String tokenId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getToken(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getToken(Async)");
        }

        return getTokenCall(appId, tokenId, expand, _callback);

    }


    private ApiResponse<OAuth2Token> getTokenWithHttpInfo(String appId, String tokenId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getTokenValidateBeforeCall(appId, tokenId, expand, null);
        Type localVarReturnType = new TypeToken<OAuth2Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTokenAsync(String appId, String tokenId, String expand, final ApiCallback<OAuth2Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenValidateBeforeCall(appId, tokenId, expand, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTokenRequestBuilder {
        private final String appId;
        private final String tokenId;
        private String expand;

        private GetTokenRequestBuilder(String appId, String tokenId) {
            this.appId = appId;
            this.tokenId = tokenId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetTokenRequestBuilder
         */
        public GetTokenRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTokenCall(appId, tokenId, expand, _callback);
        }


        /**
         * Execute getToken request
         * @return OAuth2Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Token execute() throws ApiException {
            ApiResponse<OAuth2Token> localVarResp = getTokenWithHttpInfo(appId, tokenId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getToken request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Token> executeWithHttpInfo() throws ApiException {
            return getTokenWithHttpInfo(appId, tokenId, expand);
        }

        /**
         * Execute getToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Token> _callback) throws ApiException {
            return getTokenAsync(appId, tokenId, expand, _callback);
        }
    }

    /**
     * 
     * Gets a token for the specified application
     * @param appId  (required)
     * @param tokenId  (required)
     * @return GetTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenRequestBuilder getToken(String appId, String tokenId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (tokenId == null) throw new IllegalArgumentException("\"tokenId\" is required but got null");
            

        return new GetTokenRequestBuilder(appId, tokenId);
    }
    private okhttp3.Call grantConsentToScopeCall(String appId, OAuth2ScopeConsentGrant oauth2ScopeConsentGrant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2ScopeConsentGrant;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/grants"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantConsentToScopeValidateBeforeCall(String appId, OAuth2ScopeConsentGrant oauth2ScopeConsentGrant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling grantConsentToScope(Async)");
        }

        // verify the required parameter 'oauth2ScopeConsentGrant' is set
        if (oauth2ScopeConsentGrant == null) {
            throw new ApiException("Missing the required parameter 'oauth2ScopeConsentGrant' when calling grantConsentToScope(Async)");
        }

        return grantConsentToScopeCall(appId, oauth2ScopeConsentGrant, _callback);

    }


    private ApiResponse<OAuth2ScopeConsentGrant> grantConsentToScopeWithHttpInfo(String appId, OAuth2ScopeConsentGrant oauth2ScopeConsentGrant) throws ApiException {
        okhttp3.Call localVarCall = grantConsentToScopeValidateBeforeCall(appId, oauth2ScopeConsentGrant, null);
        Type localVarReturnType = new TypeToken<OAuth2ScopeConsentGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call grantConsentToScopeAsync(String appId, OAuth2ScopeConsentGrant oauth2ScopeConsentGrant, final ApiCallback<OAuth2ScopeConsentGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantConsentToScopeValidateBeforeCall(appId, oauth2ScopeConsentGrant, _callback);
        Type localVarReturnType = new TypeToken<OAuth2ScopeConsentGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GrantConsentToScopeRequestBuilder {
        private final String appId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private String clientId;
        private OffsetDateTime created;
        private OAuth2Actor createdBy;
        private String id;
        private String issuer;
        private OffsetDateTime lastUpdated;
        private String scopeId;
        private OAuth2ScopeConsentGrantSource source;
        private OAuth2ScopeConsentGrantStatus status;
        private String userId;

        private GrantConsentToScopeRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder createdBy(OAuth2Actor createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuer
         * @param issuer  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder issuer(String issuer) {
            this.issuer = issuer;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set scopeId
         * @param scopeId  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder scopeId(String scopeId) {
            this.scopeId = scopeId;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder source(OAuth2ScopeConsentGrantSource source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder status(OAuth2ScopeConsentGrantStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set userId
         * @param userId  (optional)
         * @return GrantConsentToScopeRequestBuilder
         */
        public GrantConsentToScopeRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for grantConsentToScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OAuth2ScopeConsentGrant oauth2ScopeConsentGrant = buildBodyParams();
            return grantConsentToScopeCall(appId, oauth2ScopeConsentGrant, _callback);
        }

        private OAuth2ScopeConsentGrant buildBodyParams() {
            OAuth2ScopeConsentGrant oauth2ScopeConsentGrant = new OAuth2ScopeConsentGrant();
            oauth2ScopeConsentGrant.embedded(this.embedded);
            oauth2ScopeConsentGrant.links(this.links);
            oauth2ScopeConsentGrant.clientId(this.clientId);
            oauth2ScopeConsentGrant.created(this.created);
            oauth2ScopeConsentGrant.createdBy(this.createdBy);
            oauth2ScopeConsentGrant.id(this.id);
            oauth2ScopeConsentGrant.issuer(this.issuer);
            oauth2ScopeConsentGrant.lastUpdated(this.lastUpdated);
            oauth2ScopeConsentGrant.scopeId(this.scopeId);
            oauth2ScopeConsentGrant.source(this.source);
            oauth2ScopeConsentGrant.status(this.status);
            oauth2ScopeConsentGrant.userId(this.userId);
            return oauth2ScopeConsentGrant;
        }

        /**
         * Execute grantConsentToScope request
         * @return OAuth2ScopeConsentGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2ScopeConsentGrant execute() throws ApiException {
            OAuth2ScopeConsentGrant oauth2ScopeConsentGrant = buildBodyParams();
            ApiResponse<OAuth2ScopeConsentGrant> localVarResp = grantConsentToScopeWithHttpInfo(appId, oauth2ScopeConsentGrant);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute grantConsentToScope request with HTTP info returned
         * @return ApiResponse&lt;OAuth2ScopeConsentGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2ScopeConsentGrant> executeWithHttpInfo() throws ApiException {
            OAuth2ScopeConsentGrant oauth2ScopeConsentGrant = buildBodyParams();
            return grantConsentToScopeWithHttpInfo(appId, oauth2ScopeConsentGrant);
        }

        /**
         * Execute grantConsentToScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2ScopeConsentGrant> _callback) throws ApiException {
            OAuth2ScopeConsentGrant oauth2ScopeConsentGrant = buildBodyParams();
            return grantConsentToScopeAsync(appId, oauth2ScopeConsentGrant, _callback);
        }
    }

    /**
     * 
     * Grants consent for the application to request an OAuth 2.0 Okta scope
     * @param appId  (required)
     * @param oauth2ScopeConsentGrant  (required)
     * @return GrantConsentToScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public GrantConsentToScopeRequestBuilder grantConsentToScope(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GrantConsentToScopeRequestBuilder(appId);
    }
    private okhttp3.Call listAppsCall(String q, String after, Integer limit, String filter, String expand, Boolean includeNonDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (includeNonDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNonDeleted", includeNonDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppsValidateBeforeCall(String q, String after, Integer limit, String filter, String expand, Boolean includeNonDeleted, final ApiCallback _callback) throws ApiException {
        return listAppsCall(q, after, limit, filter, expand, includeNonDeleted, _callback);

    }


    private ApiResponse<List<Application>> listAppsWithHttpInfo(String q, String after, Integer limit, String filter, String expand, Boolean includeNonDeleted) throws ApiException {
        okhttp3.Call localVarCall = listAppsValidateBeforeCall(q, after, limit, filter, expand, includeNonDeleted, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAppsAsync(String q, String after, Integer limit, String filter, String expand, Boolean includeNonDeleted, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppsValidateBeforeCall(q, after, limit, filter, expand, includeNonDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAppsRequestBuilder {
        private String q;
        private String after;
        private Integer limit;
        private String filter;
        private String expand;
        private Boolean includeNonDeleted;

        private ListAppsRequestBuilder() {
        }

        /**
         * Set q
         * @param q  (optional)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of apps (optional)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of results for a page (optional, default to -1)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Traverses users link relationship and optionally embeds Application User resource (optional)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set includeNonDeleted
         * @param includeNonDeleted  (optional, default to false)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder includeNonDeleted(Boolean includeNonDeleted) {
            this.includeNonDeleted = includeNonDeleted;
            return this;
        }
        
        /**
         * Build call for listApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAppsCall(q, after, limit, filter, expand, includeNonDeleted, _callback);
        }


        /**
         * Execute listApps request
         * @return List&lt;Application&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Application> execute() throws ApiException {
            ApiResponse<List<Application>> localVarResp = listAppsWithHttpInfo(q, after, limit, filter, expand, includeNonDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listApps request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Application&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Application>> executeWithHttpInfo() throws ApiException {
            return listAppsWithHttpInfo(q, after, limit, filter, expand, includeNonDeleted);
        }

        /**
         * Execute listApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Application>> _callback) throws ApiException {
            return listAppsAsync(q, after, limit, filter, expand, includeNonDeleted, _callback);
        }
    }

    /**
     * List Applications
     * Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
     * @return ListAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAppsRequestBuilder listApps() throws IllegalArgumentException {
        return new ListAppsRequestBuilder();
    }
    private okhttp3.Call listAssignedUsersCall(String appId, String q, String queryScope, String after, Integer limit, String filter, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/users"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (queryScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query_scope", queryScope));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignedUsersValidateBeforeCall(String appId, String q, String queryScope, String after, Integer limit, String filter, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAssignedUsers(Async)");
        }

        return listAssignedUsersCall(appId, q, queryScope, after, limit, filter, expand, _callback);

    }


    private ApiResponse<List<AppUser>> listAssignedUsersWithHttpInfo(String appId, String q, String queryScope, String after, Integer limit, String filter, String expand) throws ApiException {
        okhttp3.Call localVarCall = listAssignedUsersValidateBeforeCall(appId, q, queryScope, after, limit, filter, expand, null);
        Type localVarReturnType = new TypeToken<List<AppUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignedUsersAsync(String appId, String q, String queryScope, String after, Integer limit, String filter, String expand, final ApiCallback<List<AppUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignedUsersValidateBeforeCall(appId, q, queryScope, after, limit, filter, expand, _callback);
        Type localVarReturnType = new TypeToken<List<AppUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignedUsersRequestBuilder {
        private final String appId;
        private String q;
        private String queryScope;
        private String after;
        private Integer limit;
        private String filter;
        private String expand;

        private ListAssignedUsersRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set q
         * @param q  (optional)
         * @return ListAssignedUsersRequestBuilder
         */
        public ListAssignedUsersRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set queryScope
         * @param queryScope  (optional)
         * @return ListAssignedUsersRequestBuilder
         */
        public ListAssignedUsersRequestBuilder queryScope(String queryScope) {
            this.queryScope = queryScope;
            return this;
        }
        
        /**
         * Set after
         * @param after specifies the pagination cursor for the next page of assignments (optional)
         * @return ListAssignedUsersRequestBuilder
         */
        public ListAssignedUsersRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit specifies the number of results for a page (optional, default to -1)
         * @return ListAssignedUsersRequestBuilder
         */
        public ListAssignedUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set filter
         * @param filter  (optional)
         * @return ListAssignedUsersRequestBuilder
         */
        public ListAssignedUsersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional)
         * @return ListAssignedUsersRequestBuilder
         */
        public ListAssignedUsersRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listAssignedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignedUsersCall(appId, q, queryScope, after, limit, filter, expand, _callback);
        }


        /**
         * Execute listAssignedUsers request
         * @return List&lt;AppUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<AppUser> execute() throws ApiException {
            ApiResponse<List<AppUser>> localVarResp = listAssignedUsersWithHttpInfo(appId, q, queryScope, after, limit, filter, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignedUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AppUser&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AppUser>> executeWithHttpInfo() throws ApiException {
            return listAssignedUsersWithHttpInfo(appId, q, queryScope, after, limit, filter, expand);
        }

        /**
         * Execute listAssignedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AppUser>> _callback) throws ApiException {
            return listAssignedUsersAsync(appId, q, queryScope, after, limit, filter, expand, _callback);
        }
    }

    /**
     * List Users Assigned to Application
     * Enumerates all assigned [application users](https://raw.githubusercontent.com) for an application.
     * @param appId  (required)
     * @return ListAssignedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignedUsersRequestBuilder listAssignedUsers(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListAssignedUsersRequestBuilder(appId);
    }
    private okhttp3.Call listClientSecretsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/secrets"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClientSecretsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listClientSecrets(Async)");
        }

        return listClientSecretsCall(appId, _callback);

    }


    private ApiResponse<List<ClientSecret>> listClientSecretsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = listClientSecretsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<ClientSecret>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listClientSecretsAsync(String appId, final ApiCallback<List<ClientSecret>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClientSecretsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<ClientSecret>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListClientSecretsRequestBuilder {
        private final String appId;

        private ListClientSecretsRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for listClientSecrets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listClientSecretsCall(appId, _callback);
        }


        /**
         * Execute listClientSecrets request
         * @return List&lt;ClientSecret&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<ClientSecret> execute() throws ApiException {
            ApiResponse<List<ClientSecret>> localVarResp = listClientSecretsWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listClientSecrets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ClientSecret&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ClientSecret>> executeWithHttpInfo() throws ApiException {
            return listClientSecretsWithHttpInfo(appId);
        }

        /**
         * Execute listClientSecrets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ClientSecret>> _callback) throws ApiException {
            return listClientSecretsAsync(appId, _callback);
        }
    }

    /**
     * List client secrets
     * Enumerates the client&#39;s collection of secrets
     * @param appId  (required)
     * @return ListClientSecretsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListClientSecretsRequestBuilder listClientSecrets(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListClientSecretsRequestBuilder(appId);
    }
    private okhttp3.Call listCsrsForApplicationCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/csrs"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCsrsForApplicationValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listCsrsForApplication(Async)");
        }

        return listCsrsForApplicationCall(appId, _callback);

    }


    private ApiResponse<List<Csr>> listCsrsForApplicationWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = listCsrsForApplicationValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Csr>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCsrsForApplicationAsync(String appId, final ApiCallback<List<Csr>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCsrsForApplicationValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Csr>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCsrsForApplicationRequestBuilder {
        private final String appId;

        private ListCsrsForApplicationRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for listCsrsForApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCsrsForApplicationCall(appId, _callback);
        }


        /**
         * Execute listCsrsForApplication request
         * @return List&lt;Csr&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Csr> execute() throws ApiException {
            ApiResponse<List<Csr>> localVarResp = listCsrsForApplicationWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCsrsForApplication request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Csr&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Csr>> executeWithHttpInfo() throws ApiException {
            return listCsrsForApplicationWithHttpInfo(appId);
        }

        /**
         * Execute listCsrsForApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Csr>> _callback) throws ApiException {
            return listCsrsForApplicationAsync(appId, _callback);
        }
    }

    /**
     * List Certificate Signing Requests for Application
     * Enumerates Certificate Signing Requests for an application
     * @param appId  (required)
     * @return ListCsrsForApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCsrsForApplicationRequestBuilder listCsrsForApplication(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListCsrsForApplicationRequestBuilder(appId);
    }
    private okhttp3.Call listFeaturesCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/features"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeaturesValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listFeatures(Async)");
        }

        return listFeaturesCall(appId, _callback);

    }


    private ApiResponse<List<ApplicationFeature>> listFeaturesWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = listFeaturesValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<ApplicationFeature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeaturesAsync(String appId, final ApiCallback<List<ApplicationFeature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeaturesValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationFeature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFeaturesRequestBuilder {
        private final String appId;

        private ListFeaturesRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for listFeatures
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeaturesCall(appId, _callback);
        }


        /**
         * Execute listFeatures request
         * @return List&lt;ApplicationFeature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicationFeature> execute() throws ApiException {
            ApiResponse<List<ApplicationFeature>> localVarResp = listFeaturesWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFeatures request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicationFeature&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicationFeature>> executeWithHttpInfo() throws ApiException {
            return listFeaturesWithHttpInfo(appId);
        }

        /**
         * Execute listFeatures request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicationFeature>> _callback) throws ApiException {
            return listFeaturesAsync(appId, _callback);
        }
    }

    /**
     * Fetches the Feature objects for an application.
     * List Features for application
     * @param appId  (required)
     * @return ListFeaturesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListFeaturesRequestBuilder listFeatures(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListFeaturesRequestBuilder(appId);
    }
    private okhttp3.Call listGroupsAssignedCall(String appId, String q, String after, Integer limit, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/groups"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupsAssignedValidateBeforeCall(String appId, String q, String after, Integer limit, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listGroupsAssigned(Async)");
        }

        return listGroupsAssignedCall(appId, q, after, limit, expand, _callback);

    }


    private ApiResponse<List<ApplicationGroupAssignment>> listGroupsAssignedWithHttpInfo(String appId, String q, String after, Integer limit, String expand) throws ApiException {
        okhttp3.Call localVarCall = listGroupsAssignedValidateBeforeCall(appId, q, after, limit, expand, null);
        Type localVarReturnType = new TypeToken<List<ApplicationGroupAssignment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupsAssignedAsync(String appId, String q, String after, Integer limit, String expand, final ApiCallback<List<ApplicationGroupAssignment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupsAssignedValidateBeforeCall(appId, q, after, limit, expand, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationGroupAssignment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupsAssignedRequestBuilder {
        private final String appId;
        private String q;
        private String after;
        private Integer limit;
        private String expand;

        private ListGroupsAssignedRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set q
         * @param q  (optional)
         * @return ListGroupsAssignedRequestBuilder
         */
        public ListGroupsAssignedRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of assignments (optional)
         * @return ListGroupsAssignedRequestBuilder
         */
        public ListGroupsAssignedRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of results for a page (optional, default to -1)
         * @return ListGroupsAssignedRequestBuilder
         */
        public ListGroupsAssignedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional)
         * @return ListGroupsAssignedRequestBuilder
         */
        public ListGroupsAssignedRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listGroupsAssigned
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupsAssignedCall(appId, q, after, limit, expand, _callback);
        }


        /**
         * Execute listGroupsAssigned request
         * @return List&lt;ApplicationGroupAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<ApplicationGroupAssignment> execute() throws ApiException {
            ApiResponse<List<ApplicationGroupAssignment>> localVarResp = listGroupsAssignedWithHttpInfo(appId, q, after, limit, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroupsAssigned request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApplicationGroupAssignment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApplicationGroupAssignment>> executeWithHttpInfo() throws ApiException {
            return listGroupsAssignedWithHttpInfo(appId, q, after, limit, expand);
        }

        /**
         * Execute listGroupsAssigned request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApplicationGroupAssignment>> _callback) throws ApiException {
            return listGroupsAssignedAsync(appId, q, after, limit, expand, _callback);
        }
    }

    /**
     * List Groups Assigned to Application
     * Enumerates group assignments for an application.
     * @param appId  (required)
     * @return ListGroupsAssignedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListGroupsAssignedRequestBuilder listGroupsAssigned(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListGroupsAssignedRequestBuilder(appId);
    }
    private okhttp3.Call listKeyCredentialsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/keys"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listKeyCredentialsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listKeyCredentials(Async)");
        }

        return listKeyCredentialsCall(appId, _callback);

    }


    private ApiResponse<List<JsonWebKey>> listKeyCredentialsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = listKeyCredentialsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listKeyCredentialsAsync(String appId, final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listKeyCredentialsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListKeyCredentialsRequestBuilder {
        private final String appId;

        private ListKeyCredentialsRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for listKeyCredentials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listKeyCredentialsCall(appId, _callback);
        }


        /**
         * Execute listKeyCredentials request
         * @return List&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<JsonWebKey> execute() throws ApiException {
            ApiResponse<List<JsonWebKey>> localVarResp = listKeyCredentialsWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listKeyCredentials request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JsonWebKey&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JsonWebKey>> executeWithHttpInfo() throws ApiException {
            return listKeyCredentialsWithHttpInfo(appId);
        }

        /**
         * Execute listKeyCredentials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {
            return listKeyCredentialsAsync(appId, _callback);
        }
    }

    /**
     * List Key Credentials for Application
     * Enumerates key credentials for an application
     * @param appId  (required)
     * @return ListKeyCredentialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListKeyCredentialsRequestBuilder listKeyCredentials(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListKeyCredentialsRequestBuilder(appId);
    }
    private okhttp3.Call listScopeConsentGrantsCall(String appId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/grants"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScopeConsentGrantsValidateBeforeCall(String appId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listScopeConsentGrants(Async)");
        }

        return listScopeConsentGrantsCall(appId, expand, _callback);

    }


    private ApiResponse<List<OAuth2ScopeConsentGrant>> listScopeConsentGrantsWithHttpInfo(String appId, String expand) throws ApiException {
        okhttp3.Call localVarCall = listScopeConsentGrantsValidateBeforeCall(appId, expand, null);
        Type localVarReturnType = new TypeToken<List<OAuth2ScopeConsentGrant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listScopeConsentGrantsAsync(String appId, String expand, final ApiCallback<List<OAuth2ScopeConsentGrant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScopeConsentGrantsValidateBeforeCall(appId, expand, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2ScopeConsentGrant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListScopeConsentGrantsRequestBuilder {
        private final String appId;
        private String expand;

        private ListScopeConsentGrantsRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return ListScopeConsentGrantsRequestBuilder
         */
        public ListScopeConsentGrantsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listScopeConsentGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listScopeConsentGrantsCall(appId, expand, _callback);
        }


        /**
         * Execute listScopeConsentGrants request
         * @return List&lt;OAuth2ScopeConsentGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2ScopeConsentGrant> execute() throws ApiException {
            ApiResponse<List<OAuth2ScopeConsentGrant>> localVarResp = listScopeConsentGrantsWithHttpInfo(appId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listScopeConsentGrants request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2ScopeConsentGrant&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2ScopeConsentGrant>> executeWithHttpInfo() throws ApiException {
            return listScopeConsentGrantsWithHttpInfo(appId, expand);
        }

        /**
         * Execute listScopeConsentGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2ScopeConsentGrant>> _callback) throws ApiException {
            return listScopeConsentGrantsAsync(appId, expand, _callback);
        }
    }

    /**
     * 
     * Lists all scope consent grants for the application
     * @param appId  (required)
     * @return ListScopeConsentGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListScopeConsentGrantsRequestBuilder listScopeConsentGrants(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListScopeConsentGrantsRequestBuilder(appId);
    }
    private okhttp3.Call listTokensCall(String appId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/tokens"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTokensValidateBeforeCall(String appId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listTokens(Async)");
        }

        return listTokensCall(appId, expand, after, limit, _callback);

    }


    private ApiResponse<List<OAuth2Token>> listTokensWithHttpInfo(String appId, String expand, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listTokensValidateBeforeCall(appId, expand, after, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Token>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTokensAsync(String appId, String expand, String after, Integer limit, final ApiCallback<List<OAuth2Token>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTokensValidateBeforeCall(appId, expand, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Token>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTokensRequestBuilder {
        private final String appId;
        private String expand;
        private String after;
        private Integer limit;

        private ListTokensRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return ListTokensRequestBuilder
         */
        public ListTokensRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return ListTokensRequestBuilder
         */
        public ListTokensRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListTokensRequestBuilder
         */
        public ListTokensRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTokensCall(appId, expand, after, limit, _callback);
        }


        /**
         * Execute listTokens request
         * @return List&lt;OAuth2Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2Token> execute() throws ApiException {
            ApiResponse<List<OAuth2Token>> localVarResp = listTokensWithHttpInfo(appId, expand, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTokens request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2Token&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2Token>> executeWithHttpInfo() throws ApiException {
            return listTokensWithHttpInfo(appId, expand, after, limit);
        }

        /**
         * Execute listTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2Token>> _callback) throws ApiException {
            return listTokensAsync(appId, expand, after, limit, _callback);
        }
    }

    /**
     * 
     * Lists all tokens for the application
     * @param appId  (required)
     * @return ListTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListTokensRequestBuilder listTokens(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ListTokensRequestBuilder(appId);
    }
    private okhttp3.Call previewSamlAppMetadataCall(String appId, String kid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/sso/saml/metadata"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kid", kid));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewSamlAppMetadataValidateBeforeCall(String appId, String kid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling previewSamlAppMetadata(Async)");
        }

        // verify the required parameter 'kid' is set
        if (kid == null) {
            throw new ApiException("Missing the required parameter 'kid' when calling previewSamlAppMetadata(Async)");
        }

        return previewSamlAppMetadataCall(appId, kid, _callback);

    }


    private ApiResponse<ApplicationPreviewSamlAppMetadataResponse> previewSamlAppMetadataWithHttpInfo(String appId, String kid) throws ApiException {
        okhttp3.Call localVarCall = previewSamlAppMetadataValidateBeforeCall(appId, kid, null);
        Type localVarReturnType = new TypeToken<ApplicationPreviewSamlAppMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewSamlAppMetadataAsync(String appId, String kid, final ApiCallback<ApplicationPreviewSamlAppMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewSamlAppMetadataValidateBeforeCall(appId, kid, _callback);
        Type localVarReturnType = new TypeToken<ApplicationPreviewSamlAppMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewSamlAppMetadataRequestBuilder {
        private final String appId;
        private final String kid;

        private PreviewSamlAppMetadataRequestBuilder(String appId, String kid) {
            this.appId = appId;
            this.kid = kid;
        }

        /**
         * Build call for previewSamlAppMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return previewSamlAppMetadataCall(appId, kid, _callback);
        }


        /**
         * Execute previewSamlAppMetadata request
         * @return ApplicationPreviewSamlAppMetadataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationPreviewSamlAppMetadataResponse execute() throws ApiException {
            ApiResponse<ApplicationPreviewSamlAppMetadataResponse> localVarResp = previewSamlAppMetadataWithHttpInfo(appId, kid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewSamlAppMetadata request with HTTP info returned
         * @return ApiResponse&lt;ApplicationPreviewSamlAppMetadataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationPreviewSamlAppMetadataResponse> executeWithHttpInfo() throws ApiException {
            return previewSamlAppMetadataWithHttpInfo(appId, kid);
        }

        /**
         * Execute previewSamlAppMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationPreviewSamlAppMetadataResponse> _callback) throws ApiException {
            return previewSamlAppMetadataAsync(appId, kid, _callback);
        }
    }

    /**
     * 
     * Previews SAML metadata based on a specific key credential for an application
     * @param appId  (required)
     * @param kid unique key identifier of an Application Key Credential (required)
     * @return PreviewSamlAppMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PreviewSamlAppMetadataRequestBuilder previewSamlAppMetadata(String appId, String kid) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (kid == null) throw new IllegalArgumentException("\"kid\" is required but got null");
            

        return new PreviewSamlAppMetadataRequestBuilder(appId, kid);
    }
    private okhttp3.Call publishCsrLifecycleCall(String appId, String csrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "csrId" + "}", localVarApiClient.escapeString(csrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishCsrLifecycleValidateBeforeCall(String appId, String csrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling publishCsrLifecycle(Async)");
        }

        // verify the required parameter 'csrId' is set
        if (csrId == null) {
            throw new ApiException("Missing the required parameter 'csrId' when calling publishCsrLifecycle(Async)");
        }

        return publishCsrLifecycleCall(appId, csrId, _callback);

    }


    private ApiResponse<JsonWebKey> publishCsrLifecycleWithHttpInfo(String appId, String csrId) throws ApiException {
        okhttp3.Call localVarCall = publishCsrLifecycleValidateBeforeCall(appId, csrId, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call publishCsrLifecycleAsync(String appId, String csrId, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishCsrLifecycleValidateBeforeCall(appId, csrId, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PublishCsrLifecycleRequestBuilder {
        private final String appId;
        private final String csrId;

        private PublishCsrLifecycleRequestBuilder(String appId, String csrId) {
            this.appId = appId;
            this.csrId = csrId;
        }

        /**
         * Build call for publishCsrLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return publishCsrLifecycleCall(appId, csrId, _callback);
        }


        /**
         * Execute publishCsrLifecycle request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = publishCsrLifecycleWithHttpInfo(appId, csrId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute publishCsrLifecycle request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return publishCsrLifecycleWithHttpInfo(appId, csrId);
        }

        /**
         * Execute publishCsrLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return publishCsrLifecycleAsync(appId, csrId, _callback);
        }
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param csrId  (required)
     * @return PublishCsrLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PublishCsrLifecycleRequestBuilder publishCsrLifecycle(String appId, String csrId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (csrId == null) throw new IllegalArgumentException("\"csrId\" is required but got null");
            

        return new PublishCsrLifecycleRequestBuilder(appId, csrId);
    }
    private okhttp3.Call removeGroupAssignmentCall(String appId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/groups/{groupId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGroupAssignmentValidateBeforeCall(String appId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeGroupAssignment(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeGroupAssignment(Async)");
        }

        return removeGroupAssignmentCall(appId, groupId, _callback);

    }


    private ApiResponse<Void> removeGroupAssignmentWithHttpInfo(String appId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = removeGroupAssignmentValidateBeforeCall(appId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeGroupAssignmentAsync(String appId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGroupAssignmentValidateBeforeCall(appId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveGroupAssignmentRequestBuilder {
        private final String appId;
        private final String groupId;

        private RemoveGroupAssignmentRequestBuilder(String appId, String groupId) {
            this.appId = appId;
            this.groupId = groupId;
        }

        /**
         * Build call for removeGroupAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeGroupAssignmentCall(appId, groupId, _callback);
        }


        /**
         * Execute removeGroupAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeGroupAssignmentWithHttpInfo(appId, groupId);
        }

        /**
         * Execute removeGroupAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeGroupAssignmentWithHttpInfo(appId, groupId);
        }

        /**
         * Execute removeGroupAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeGroupAssignmentAsync(appId, groupId, _callback);
        }
    }

    /**
     * Remove Group from Application
     * Removes a group assignment from an application.
     * @param appId  (required)
     * @param groupId  (required)
     * @return RemoveGroupAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveGroupAssignmentRequestBuilder removeGroupAssignment(String appId, String groupId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveGroupAssignmentRequestBuilder(appId, groupId);
    }
    private okhttp3.Call removeInactiveCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInactiveValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeInactive(Async)");
        }

        return removeInactiveCall(appId, _callback);

    }


    private ApiResponse<Void> removeInactiveWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = removeInactiveValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeInactiveAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInactiveValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveInactiveRequestBuilder {
        private final String appId;

        private RemoveInactiveRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for removeInactive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInactiveCall(appId, _callback);
        }


        /**
         * Execute removeInactive request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeInactiveWithHttpInfo(appId);
        }

        /**
         * Execute removeInactive request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeInactiveWithHttpInfo(appId);
        }

        /**
         * Execute removeInactive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeInactiveAsync(appId, _callback);
        }
    }

    /**
     * Delete Application
     * Removes an inactive application.
     * @param appId  (required)
     * @return RemoveInactiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInactiveRequestBuilder removeInactive(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new RemoveInactiveRequestBuilder(appId);
    }
    private okhttp3.Call removeSecretCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/credentials/secrets/{secretId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSecretValidateBeforeCall(String appId, String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeSecret(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling removeSecret(Async)");
        }

        return removeSecretCall(appId, secretId, _callback);

    }


    private ApiResponse<Void> removeSecretWithHttpInfo(String appId, String secretId) throws ApiException {
        okhttp3.Call localVarCall = removeSecretValidateBeforeCall(appId, secretId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSecretAsync(String appId, String secretId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSecretValidateBeforeCall(appId, secretId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSecretRequestBuilder {
        private final String appId;
        private final String secretId;

        private RemoveSecretRequestBuilder(String appId, String secretId) {
            this.appId = appId;
            this.secretId = secretId;
        }

        /**
         * Build call for removeSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSecretCall(appId, secretId, _callback);
        }


        /**
         * Execute removeSecret request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSecretWithHttpInfo(appId, secretId);
        }

        /**
         * Execute removeSecret request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSecretWithHttpInfo(appId, secretId);
        }

        /**
         * Execute removeSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSecretAsync(appId, secretId, _callback);
        }
    }

    /**
     * 
     * Removes a secret from the client&#39;s collection of secrets.
     * @param appId  (required)
     * @param secretId  (required)
     * @return RemoveSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSecretRequestBuilder removeSecret(String appId, String secretId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (secretId == null) throw new IllegalArgumentException("\"secretId\" is required but got null");
            

        return new RemoveSecretRequestBuilder(appId, secretId);
    }
    private okhttp3.Call removeUserFromCall(String appId, String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/users/{userId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmail", sendEmail));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromValidateBeforeCall(String appId, String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeUserFrom(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFrom(Async)");
        }

        return removeUserFromCall(appId, userId, sendEmail, _callback);

    }


    private ApiResponse<Void> removeUserFromWithHttpInfo(String appId, String userId, Boolean sendEmail) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromValidateBeforeCall(appId, userId, sendEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUserFromAsync(String appId, String userId, Boolean sendEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromValidateBeforeCall(appId, userId, sendEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUserFromRequestBuilder {
        private final String appId;
        private final String userId;
        private Boolean sendEmail;

        private RemoveUserFromRequestBuilder(String appId, String userId) {
            this.appId = appId;
            this.userId = userId;
        }

        /**
         * Set sendEmail
         * @param sendEmail  (optional, default to false)
         * @return RemoveUserFromRequestBuilder
         */
        public RemoveUserFromRequestBuilder sendEmail(Boolean sendEmail) {
            this.sendEmail = sendEmail;
            return this;
        }
        
        /**
         * Build call for removeUserFrom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserFromCall(appId, userId, sendEmail, _callback);
        }


        /**
         * Execute removeUserFrom request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUserFromWithHttpInfo(appId, userId, sendEmail);
        }

        /**
         * Execute removeUserFrom request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUserFromWithHttpInfo(appId, userId, sendEmail);
        }

        /**
         * Execute removeUserFrom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUserFromAsync(appId, userId, sendEmail, _callback);
        }
    }

    /**
     * Remove User from Application
     * Removes an assignment for a user from an application.
     * @param appId  (required)
     * @param userId  (required)
     * @return RemoveUserFromRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserFromRequestBuilder removeUserFrom(String appId, String userId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveUserFromRequestBuilder(appId, userId);
    }
    private okhttp3.Call revokeAllTokensCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/tokens"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAllTokensValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling revokeAllTokens(Async)");
        }

        return revokeAllTokensCall(appId, _callback);

    }


    private ApiResponse<Void> revokeAllTokensWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = revokeAllTokensValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeAllTokensAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAllTokensValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeAllTokensRequestBuilder {
        private final String appId;

        private RevokeAllTokensRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for revokeAllTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAllTokensCall(appId, _callback);
        }


        /**
         * Execute revokeAllTokens request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeAllTokensWithHttpInfo(appId);
        }

        /**
         * Execute revokeAllTokens request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeAllTokensWithHttpInfo(appId);
        }

        /**
         * Execute revokeAllTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeAllTokensAsync(appId, _callback);
        }
    }

    /**
     * 
     * Revokes all tokens for the specified application
     * @param appId  (required)
     * @return RevokeAllTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAllTokensRequestBuilder revokeAllTokens(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new RevokeAllTokensRequestBuilder(appId);
    }
    private okhttp3.Call revokePermissionCall(String appId, String grantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/grants/{grantId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "grantId" + "}", localVarApiClient.escapeString(grantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokePermissionValidateBeforeCall(String appId, String grantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling revokePermission(Async)");
        }

        // verify the required parameter 'grantId' is set
        if (grantId == null) {
            throw new ApiException("Missing the required parameter 'grantId' when calling revokePermission(Async)");
        }

        return revokePermissionCall(appId, grantId, _callback);

    }


    private ApiResponse<Void> revokePermissionWithHttpInfo(String appId, String grantId) throws ApiException {
        okhttp3.Call localVarCall = revokePermissionValidateBeforeCall(appId, grantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokePermissionAsync(String appId, String grantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokePermissionValidateBeforeCall(appId, grantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokePermissionRequestBuilder {
        private final String appId;
        private final String grantId;

        private RevokePermissionRequestBuilder(String appId, String grantId) {
            this.appId = appId;
            this.grantId = grantId;
        }

        /**
         * Build call for revokePermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokePermissionCall(appId, grantId, _callback);
        }


        /**
         * Execute revokePermission request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokePermissionWithHttpInfo(appId, grantId);
        }

        /**
         * Execute revokePermission request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokePermissionWithHttpInfo(appId, grantId);
        }

        /**
         * Execute revokePermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokePermissionAsync(appId, grantId, _callback);
        }
    }

    /**
     * 
     * Revokes permission for the application to request the given scope
     * @param appId  (required)
     * @param grantId  (required)
     * @return RevokePermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokePermissionRequestBuilder revokePermission(String appId, String grantId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (grantId == null) throw new IllegalArgumentException("\"grantId\" is required but got null");
            

        return new RevokePermissionRequestBuilder(appId, grantId);
    }
    private okhttp3.Call revokeTokenCall(String appId, String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/tokens/{tokenId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenValidateBeforeCall(String appId, String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling revokeToken(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling revokeToken(Async)");
        }

        return revokeTokenCall(appId, tokenId, _callback);

    }


    private ApiResponse<Void> revokeTokenWithHttpInfo(String appId, String tokenId) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(appId, tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeTokenAsync(String appId, String tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(appId, tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeTokenRequestBuilder {
        private final String appId;
        private final String tokenId;

        private RevokeTokenRequestBuilder(String appId, String tokenId) {
            this.appId = appId;
            this.tokenId = tokenId;
        }

        /**
         * Build call for revokeToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeTokenCall(appId, tokenId, _callback);
        }


        /**
         * Execute revokeToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeTokenWithHttpInfo(appId, tokenId);
        }

        /**
         * Execute revokeToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeTokenWithHttpInfo(appId, tokenId);
        }

        /**
         * Execute revokeToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeTokenAsync(appId, tokenId, _callback);
        }
    }

    /**
     * 
     * Revokes the specified token for the specified application
     * @param appId  (required)
     * @param tokenId  (required)
     * @return RevokeTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeTokenRequestBuilder revokeToken(String appId, String tokenId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (tokenId == null) throw new IllegalArgumentException("\"tokenId\" is required but got null");
            

        return new RevokeTokenRequestBuilder(appId, tokenId);
    }
    private okhttp3.Call setDefaultProvisioningConnectionCall(String appId, ProvisioningConnectionRequest provisioningConnectionRequest, Boolean activate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisioningConnectionRequest;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/connections/default"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultProvisioningConnectionValidateBeforeCall(String appId, ProvisioningConnectionRequest provisioningConnectionRequest, Boolean activate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling setDefaultProvisioningConnection(Async)");
        }

        // verify the required parameter 'provisioningConnectionRequest' is set
        if (provisioningConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'provisioningConnectionRequest' when calling setDefaultProvisioningConnection(Async)");
        }

        return setDefaultProvisioningConnectionCall(appId, provisioningConnectionRequest, activate, _callback);

    }


    private ApiResponse<ProvisioningConnection> setDefaultProvisioningConnectionWithHttpInfo(String appId, ProvisioningConnectionRequest provisioningConnectionRequest, Boolean activate) throws ApiException {
        okhttp3.Call localVarCall = setDefaultProvisioningConnectionValidateBeforeCall(appId, provisioningConnectionRequest, activate, null);
        Type localVarReturnType = new TypeToken<ProvisioningConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultProvisioningConnectionAsync(String appId, ProvisioningConnectionRequest provisioningConnectionRequest, Boolean activate, final ApiCallback<ProvisioningConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultProvisioningConnectionValidateBeforeCall(appId, provisioningConnectionRequest, activate, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultProvisioningConnectionRequestBuilder {
        private final String appId;
        private ProvisioningConnectionProfile profile;
        private Boolean activate;

        private SetDefaultProvisioningConnectionRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set profile
         * @param profile  (optional)
         * @return SetDefaultProvisioningConnectionRequestBuilder
         */
        public SetDefaultProvisioningConnectionRequestBuilder profile(ProvisioningConnectionProfile profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set activate
         * @param activate  (optional)
         * @return SetDefaultProvisioningConnectionRequestBuilder
         */
        public SetDefaultProvisioningConnectionRequestBuilder activate(Boolean activate) {
            this.activate = activate;
            return this;
        }
        
        /**
         * Build call for setDefaultProvisioningConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProvisioningConnectionRequest provisioningConnectionRequest = buildBodyParams();
            return setDefaultProvisioningConnectionCall(appId, provisioningConnectionRequest, activate, _callback);
        }

        private ProvisioningConnectionRequest buildBodyParams() {
            ProvisioningConnectionRequest provisioningConnectionRequest = new ProvisioningConnectionRequest();
            provisioningConnectionRequest.profile(this.profile);
            return provisioningConnectionRequest;
        }

        /**
         * Execute setDefaultProvisioningConnection request
         * @return ProvisioningConnection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ProvisioningConnection execute() throws ApiException {
            ProvisioningConnectionRequest provisioningConnectionRequest = buildBodyParams();
            ApiResponse<ProvisioningConnection> localVarResp = setDefaultProvisioningConnectionWithHttpInfo(appId, provisioningConnectionRequest, activate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultProvisioningConnection request with HTTP info returned
         * @return ApiResponse&lt;ProvisioningConnection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProvisioningConnection> executeWithHttpInfo() throws ApiException {
            ProvisioningConnectionRequest provisioningConnectionRequest = buildBodyParams();
            return setDefaultProvisioningConnectionWithHttpInfo(appId, provisioningConnectionRequest, activate);
        }

        /**
         * Execute setDefaultProvisioningConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProvisioningConnection> _callback) throws ApiException {
            ProvisioningConnectionRequest provisioningConnectionRequest = buildBodyParams();
            return setDefaultProvisioningConnectionAsync(appId, provisioningConnectionRequest, activate, _callback);
        }
    }

    /**
     * Sets the default Provisioning Connection for an application.
     * Set default Provisioning Connection for application
     * @param appId  (required)
     * @param provisioningConnectionRequest  (required)
     * @return SetDefaultProvisioningConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultProvisioningConnectionRequestBuilder setDefaultProvisioningConnection(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new SetDefaultProvisioningConnectionRequestBuilder(appId);
    }
    private okhttp3.Call updateApplicationInOrgCall(String appId, Application application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApplicationInOrgValidateBeforeCall(String appId, Application application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateApplicationInOrg(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling updateApplicationInOrg(Async)");
        }

        return updateApplicationInOrgCall(appId, application, _callback);

    }


    private ApiResponse<Application> updateApplicationInOrgWithHttpInfo(String appId, Application application) throws ApiException {
        okhttp3.Call localVarCall = updateApplicationInOrgValidateBeforeCall(appId, application, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateApplicationInOrgAsync(String appId, Application application, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApplicationInOrgValidateBeforeCall(appId, application, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateApplicationInOrgRequestBuilder {
        private final String appId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private ApplicationAccessibility accessibility;
        private OffsetDateTime created;
        private ApplicationCredentials credentials;
        private List<String> features;
        private String id;
        private String label;
        private OffsetDateTime lastUpdated;
        private ApplicationLicensing licensing;
        private String name;
        private Map<String, Object> profile;
        private ApplicationSettings settings;
        private ApplicationSignOnMode signOnMode;
        private String status;
        private ApplicationVisibility visibility;

        private UpdateApplicationInOrgRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set accessibility
         * @param accessibility  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder accessibility(ApplicationAccessibility accessibility) {
            this.accessibility = accessibility;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder credentials(ApplicationCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set features
         * @param features  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder features(List<String> features) {
            this.features = features;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set label
         * @param label  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set licensing
         * @param licensing  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder licensing(ApplicationLicensing licensing) {
            this.licensing = licensing;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder profile(Map<String, Object> profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder settings(ApplicationSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set signOnMode
         * @param signOnMode  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder signOnMode(ApplicationSignOnMode signOnMode) {
            this.signOnMode = signOnMode;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility  (optional)
         * @return UpdateApplicationInOrgRequestBuilder
         */
        public UpdateApplicationInOrgRequestBuilder visibility(ApplicationVisibility visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for updateApplicationInOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Application application = buildBodyParams();
            return updateApplicationInOrgCall(appId, application, _callback);
        }

        private Application buildBodyParams() {
            Application application = new Application();
            application.embedded(this.embedded);
            application.links(this.links);
            application.accessibility(this.accessibility);
            application.created(this.created);
            application.credentials(this.credentials);
            application.features(this.features);
            application.id(this.id);
            application.label(this.label);
            application.lastUpdated(this.lastUpdated);
            application.licensing(this.licensing);
            application.name(this.name);
            application.profile(this.profile);
            application.settings(this.settings);
            application.signOnMode(this.signOnMode);
            if (this.status != null)
            application.status(Application.StatusEnum.fromValue(this.status));
            application.visibility(this.visibility);
            return application;
        }

        /**
         * Execute updateApplicationInOrg request
         * @return Application
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Application execute() throws ApiException {
            Application application = buildBodyParams();
            ApiResponse<Application> localVarResp = updateApplicationInOrgWithHttpInfo(appId, application);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateApplicationInOrg request with HTTP info returned
         * @return ApiResponse&lt;Application&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Application> executeWithHttpInfo() throws ApiException {
            Application application = buildBodyParams();
            return updateApplicationInOrgWithHttpInfo(appId, application);
        }

        /**
         * Execute updateApplicationInOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Application> _callback) throws ApiException {
            Application application = buildBodyParams();
            return updateApplicationInOrgAsync(appId, application, _callback);
        }
    }

    /**
     * Update Application
     * Updates an application in your organization.
     * @param appId  (required)
     * @param application  (required)
     * @return UpdateApplicationInOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApplicationInOrgRequestBuilder updateApplicationInOrg(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new UpdateApplicationInOrgRequestBuilder(appId);
    }
    private okhttp3.Call updateFeatureCall(String appId, String name, CapabilitiesObject capabilitiesObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = capabilitiesObject;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/features/{name}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFeatureValidateBeforeCall(String appId, String name, CapabilitiesObject capabilitiesObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateFeature(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateFeature(Async)");
        }

        // verify the required parameter 'capabilitiesObject' is set
        if (capabilitiesObject == null) {
            throw new ApiException("Missing the required parameter 'capabilitiesObject' when calling updateFeature(Async)");
        }

        return updateFeatureCall(appId, name, capabilitiesObject, _callback);

    }


    private ApiResponse<ApplicationFeature> updateFeatureWithHttpInfo(String appId, String name, CapabilitiesObject capabilitiesObject) throws ApiException {
        okhttp3.Call localVarCall = updateFeatureValidateBeforeCall(appId, name, capabilitiesObject, null);
        Type localVarReturnType = new TypeToken<ApplicationFeature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFeatureAsync(String appId, String name, CapabilitiesObject capabilitiesObject, final ApiCallback<ApplicationFeature> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFeatureValidateBeforeCall(appId, name, capabilitiesObject, _callback);
        Type localVarReturnType = new TypeToken<ApplicationFeature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFeatureRequestBuilder {
        private final String appId;
        private final String name;
        private CapabilitiesCreateObject create;
        private CapabilitiesUpdateObject update;

        private UpdateFeatureRequestBuilder(String appId, String name) {
            this.appId = appId;
            this.name = name;
        }

        /**
         * Set create
         * @param create  (optional)
         * @return UpdateFeatureRequestBuilder
         */
        public UpdateFeatureRequestBuilder create(CapabilitiesCreateObject create) {
            this.create = create;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return UpdateFeatureRequestBuilder
         */
        public UpdateFeatureRequestBuilder update(CapabilitiesUpdateObject update) {
            this.update = update;
            return this;
        }
        
        /**
         * Build call for updateFeature
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CapabilitiesObject capabilitiesObject = buildBodyParams();
            return updateFeatureCall(appId, name, capabilitiesObject, _callback);
        }

        private CapabilitiesObject buildBodyParams() {
            CapabilitiesObject capabilitiesObject = new CapabilitiesObject();
            capabilitiesObject.create(this.create);
            capabilitiesObject.update(this.update);
            return capabilitiesObject;
        }

        /**
         * Execute updateFeature request
         * @return ApplicationFeature
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationFeature execute() throws ApiException {
            CapabilitiesObject capabilitiesObject = buildBodyParams();
            ApiResponse<ApplicationFeature> localVarResp = updateFeatureWithHttpInfo(appId, name, capabilitiesObject);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFeature request with HTTP info returned
         * @return ApiResponse&lt;ApplicationFeature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationFeature> executeWithHttpInfo() throws ApiException {
            CapabilitiesObject capabilitiesObject = buildBodyParams();
            return updateFeatureWithHttpInfo(appId, name, capabilitiesObject);
        }

        /**
         * Execute updateFeature request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationFeature> _callback) throws ApiException {
            CapabilitiesObject capabilitiesObject = buildBodyParams();
            return updateFeatureAsync(appId, name, capabilitiesObject, _callback);
        }
    }

    /**
     * Updates a Feature object for an application.
     * Updates a Feature object for an application.
     * @param appId  (required)
     * @param name  (required)
     * @param capabilitiesObject  (required)
     * @return UpdateFeatureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFeatureRequestBuilder updateFeature(String appId, String name) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new UpdateFeatureRequestBuilder(appId, name);
    }
    private okhttp3.Call updateLogoCall(String appId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationUpdateLogoRequest;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/logo"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLogoValidateBeforeCall(String appId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateLogo(Async)");
        }

        // verify the required parameter 'applicationUpdateLogoRequest' is set
        if (applicationUpdateLogoRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateLogoRequest' when calling updateLogo(Async)");
        }

        return updateLogoCall(appId, applicationUpdateLogoRequest, _callback);

    }


    private ApiResponse<Void> updateLogoWithHttpInfo(String appId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLogoValidateBeforeCall(appId, applicationUpdateLogoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLogoAsync(String appId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLogoValidateBeforeCall(appId, applicationUpdateLogoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLogoRequestBuilder {
        private final File _file;
        private final String appId;

        private UpdateLogoRequestBuilder(File _file, String appId) {
            this._file = _file;
            this.appId = appId;
        }

        /**
         * Build call for updateLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateLogoCall(appId, applicationUpdateLogoRequest, _callback);
        }

        private ApplicationUpdateLogoRequest buildBodyParams() {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = new ApplicationUpdateLogoRequest();
            applicationUpdateLogoRequest._file(this._file);
            return applicationUpdateLogoRequest;
        }

        /**
         * Execute updateLogo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            updateLogoWithHttpInfo(appId, applicationUpdateLogoRequest);
        }

        /**
         * Execute updateLogo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateLogoWithHttpInfo(appId, applicationUpdateLogoRequest);
        }

        /**
         * Execute updateLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateLogoAsync(appId, applicationUpdateLogoRequest, _callback);
        }
    }

    /**
     * The file must be in PNG, JPG, or GIF format, and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
     * Update the logo for an application.
     * @param appId  (required)
     * @param applicationUpdateLogoRequest  (required)
     * @return UpdateLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLogoRequestBuilder updateLogo(File _file, String appId) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new UpdateLogoRequestBuilder(_file, appId);
    }
    private okhttp3.Call updateProfileForUserCall(String appId, String userId, AppUser appUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appUser;

        // create path and map variables
        String localVarPath = "/api/v1/apps/{appId}/users/{userId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileForUserValidateBeforeCall(String appId, String userId, AppUser appUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateProfileForUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateProfileForUser(Async)");
        }

        // verify the required parameter 'appUser' is set
        if (appUser == null) {
            throw new ApiException("Missing the required parameter 'appUser' when calling updateProfileForUser(Async)");
        }

        return updateProfileForUserCall(appId, userId, appUser, _callback);

    }


    private ApiResponse<AppUser> updateProfileForUserWithHttpInfo(String appId, String userId, AppUser appUser) throws ApiException {
        okhttp3.Call localVarCall = updateProfileForUserValidateBeforeCall(appId, userId, appUser, null);
        Type localVarReturnType = new TypeToken<AppUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProfileForUserAsync(String appId, String userId, AppUser appUser, final ApiCallback<AppUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileForUserValidateBeforeCall(appId, userId, appUser, _callback);
        Type localVarReturnType = new TypeToken<AppUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProfileForUserRequestBuilder {
        private final String appId;
        private final String userId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private AppUserCredentials credentials;
        private String externalId;
        private String id;
        private OffsetDateTime lastSync;
        private OffsetDateTime lastUpdated;
        private OffsetDateTime passwordChanged;
        private Map<String, Object> profile;
        private String scope;
        private String status;
        private OffsetDateTime statusChanged;
        private String syncState;

        private UpdateProfileForUserRequestBuilder(String appId, String userId) {
            this.appId = appId;
            this.userId = userId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder credentials(AppUserCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastSync
         * @param lastSync  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder lastSync(OffsetDateTime lastSync) {
            this.lastSync = lastSync;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set passwordChanged
         * @param passwordChanged  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder passwordChanged(OffsetDateTime passwordChanged) {
            this.passwordChanged = passwordChanged;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder profile(Map<String, Object> profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set scope
         * @param scope  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set statusChanged
         * @param statusChanged  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder statusChanged(OffsetDateTime statusChanged) {
            this.statusChanged = statusChanged;
            return this;
        }
        
        /**
         * Set syncState
         * @param syncState  (optional)
         * @return UpdateProfileForUserRequestBuilder
         */
        public UpdateProfileForUserRequestBuilder syncState(String syncState) {
            this.syncState = syncState;
            return this;
        }
        
        /**
         * Build call for updateProfileForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppUser appUser = buildBodyParams();
            return updateProfileForUserCall(appId, userId, appUser, _callback);
        }

        private AppUser buildBodyParams() {
            AppUser appUser = new AppUser();
            appUser.embedded(this.embedded);
            appUser.links(this.links);
            appUser.created(this.created);
            appUser.credentials(this.credentials);
            appUser.externalId(this.externalId);
            appUser.id(this.id);
            appUser.lastSync(this.lastSync);
            appUser.lastUpdated(this.lastUpdated);
            appUser.passwordChanged(this.passwordChanged);
            appUser.profile(this.profile);
            appUser.scope(this.scope);
            appUser.status(this.status);
            appUser.statusChanged(this.statusChanged);
            appUser.syncState(this.syncState);
            return appUser;
        }

        /**
         * Execute updateProfileForUser request
         * @return AppUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AppUser execute() throws ApiException {
            AppUser appUser = buildBodyParams();
            ApiResponse<AppUser> localVarResp = updateProfileForUserWithHttpInfo(appId, userId, appUser);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProfileForUser request with HTTP info returned
         * @return ApiResponse&lt;AppUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppUser> executeWithHttpInfo() throws ApiException {
            AppUser appUser = buildBodyParams();
            return updateProfileForUserWithHttpInfo(appId, userId, appUser);
        }

        /**
         * Execute updateProfileForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppUser> _callback) throws ApiException {
            AppUser appUser = buildBodyParams();
            return updateProfileForUserAsync(appId, userId, appUser, _callback);
        }
    }

    /**
     * Update Application Profile for Assigned User
     * Updates a user&#39;s profile for an application
     * @param appId  (required)
     * @param userId  (required)
     * @param appUser  (required)
     * @return UpdateProfileForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProfileForUserRequestBuilder updateProfileForUser(String appId, String userId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateProfileForUserRequestBuilder(appId, userId);
    }
}
