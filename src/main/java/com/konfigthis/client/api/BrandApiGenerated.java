/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicationUpdateLogoRequest;
import com.konfigthis.client.model.Brand;
import com.konfigthis.client.model.EmailTemplate;
import com.konfigthis.client.model.EmailTemplateContent;
import com.konfigthis.client.model.EmailTemplateCustomization;
import com.konfigthis.client.model.EmailTemplateCustomizationRequest;
import com.konfigthis.client.model.EmailTemplateTestRequest;
import com.konfigthis.client.model.EmailTemplateTouchPointVariant;
import com.konfigthis.client.model.EndUserDashboardTouchPointVariant;
import com.konfigthis.client.model.ErrorPageTouchPointVariant;
import java.io.File;
import com.konfigthis.client.model.ImageUploadResponse;
import com.konfigthis.client.model.SignInPageTouchPointVariant;
import com.konfigthis.client.model.Theme;
import com.konfigthis.client.model.ThemeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BrandApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BrandApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmailTemplateCustomizationCall(String brandId, String templateName, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailTemplateCustomizationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailTemplateCustomizationValidateBeforeCall(String brandId, String templateName, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling createEmailTemplateCustomization(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling createEmailTemplateCustomization(Async)");
        }

        // verify the required parameter 'emailTemplateCustomizationRequest' is set
        if (emailTemplateCustomizationRequest == null) {
            throw new ApiException("Missing the required parameter 'emailTemplateCustomizationRequest' when calling createEmailTemplateCustomization(Async)");
        }

        return createEmailTemplateCustomizationCall(brandId, templateName, emailTemplateCustomizationRequest, _callback);

    }


    private ApiResponse<EmailTemplateCustomization> createEmailTemplateCustomizationWithHttpInfo(String brandId, String templateName, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmailTemplateCustomizationValidateBeforeCall(brandId, templateName, emailTemplateCustomizationRequest, null);
        Type localVarReturnType = new TypeToken<EmailTemplateCustomization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailTemplateCustomizationAsync(String brandId, String templateName, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest, final ApiCallback<EmailTemplateCustomization> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailTemplateCustomizationValidateBeforeCall(brandId, templateName, emailTemplateCustomizationRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateCustomization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailTemplateCustomizationRequestBuilder {
        private final String brandId;
        private final String templateName;
        private String body;
        private Boolean isDefault;
        private String language;
        private String subject;

        private CreateEmailTemplateCustomizationRequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CreateEmailTemplateCustomizationRequestBuilder
         */
        public CreateEmailTemplateCustomizationRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault  (optional)
         * @return CreateEmailTemplateCustomizationRequestBuilder
         */
        public CreateEmailTemplateCustomizationRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set language
         * @param language unique under each email template (optional)
         * @return CreateEmailTemplateCustomizationRequestBuilder
         */
        public CreateEmailTemplateCustomizationRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set subject
         * @param subject  (optional)
         * @return CreateEmailTemplateCustomizationRequestBuilder
         */
        public CreateEmailTemplateCustomizationRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Build call for createEmailTemplateCustomization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            return createEmailTemplateCustomizationCall(brandId, templateName, emailTemplateCustomizationRequest, _callback);
        }

        private EmailTemplateCustomizationRequest buildBodyParams() {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = new EmailTemplateCustomizationRequest();
            emailTemplateCustomizationRequest.body(this.body);
            emailTemplateCustomizationRequest.isDefault(this.isDefault);
            emailTemplateCustomizationRequest.language(this.language);
            emailTemplateCustomizationRequest.subject(this.subject);
            return emailTemplateCustomizationRequest;
        }

        /**
         * Execute createEmailTemplateCustomization request
         * @return EmailTemplateCustomization
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplateCustomization execute() throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            ApiResponse<EmailTemplateCustomization> localVarResp = createEmailTemplateCustomizationWithHttpInfo(brandId, templateName, emailTemplateCustomizationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmailTemplateCustomization request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplateCustomization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplateCustomization> executeWithHttpInfo() throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            return createEmailTemplateCustomizationWithHttpInfo(brandId, templateName, emailTemplateCustomizationRequest);
        }

        /**
         * Execute createEmailTemplateCustomization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplateCustomization> _callback) throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            return createEmailTemplateCustomizationAsync(brandId, templateName, emailTemplateCustomizationRequest, _callback);
        }
    }

    /**
     * Create Email Template Customization
     * Create an email customization
     * @param brandId  (required)
     * @param templateName  (required)
     * @param emailTemplateCustomizationRequest  (required)
     * @return CreateEmailTemplateCustomizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailTemplateCustomizationRequestBuilder createEmailTemplateCustomization(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new CreateEmailTemplateCustomizationRequestBuilder(brandId, templateName);
    }
    private okhttp3.Call deleteEmailCustomizationCall(String brandId, String templateName, String customizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()))
            .replace("{" + "customizationId" + "}", localVarApiClient.escapeString(customizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmailCustomizationValidateBeforeCall(String brandId, String templateName, String customizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteEmailCustomization(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling deleteEmailCustomization(Async)");
        }

        // verify the required parameter 'customizationId' is set
        if (customizationId == null) {
            throw new ApiException("Missing the required parameter 'customizationId' when calling deleteEmailCustomization(Async)");
        }

        return deleteEmailCustomizationCall(brandId, templateName, customizationId, _callback);

    }


    private ApiResponse<Void> deleteEmailCustomizationWithHttpInfo(String brandId, String templateName, String customizationId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmailCustomizationValidateBeforeCall(brandId, templateName, customizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmailCustomizationAsync(String brandId, String templateName, String customizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmailCustomizationValidateBeforeCall(brandId, templateName, customizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEmailCustomizationRequestBuilder {
        private final String brandId;
        private final String templateName;
        private final String customizationId;

        private DeleteEmailCustomizationRequestBuilder(String brandId, String templateName, String customizationId) {
            this.brandId = brandId;
            this.templateName = templateName;
            this.customizationId = customizationId;
        }

        /**
         * Build call for deleteEmailCustomization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmailCustomizationCall(brandId, templateName, customizationId, _callback);
        }


        /**
         * Execute deleteEmailCustomization request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmailCustomizationWithHttpInfo(brandId, templateName, customizationId);
        }

        /**
         * Execute deleteEmailCustomization request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmailCustomizationWithHttpInfo(brandId, templateName, customizationId);
        }

        /**
         * Execute deleteEmailCustomization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmailCustomizationAsync(brandId, templateName, customizationId, _callback);
        }
    }

    /**
     * Delete Email Customization
     * Delete an email customization
     * @param brandId  (required)
     * @param templateName  (required)
     * @param customizationId  (required)
     * @return DeleteEmailCustomizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEmailCustomizationRequestBuilder deleteEmailCustomization(String brandId, String templateName, String customizationId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        if (customizationId == null) throw new IllegalArgumentException("\"customizationId\" is required but got null");
            

        return new DeleteEmailCustomizationRequestBuilder(brandId, templateName, customizationId);
    }
    private okhttp3.Call deleteEmailTemplateCustomizationsCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmailTemplateCustomizationsValidateBeforeCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteEmailTemplateCustomizations(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling deleteEmailTemplateCustomizations(Async)");
        }

        return deleteEmailTemplateCustomizationsCall(brandId, templateName, _callback);

    }


    private ApiResponse<Void> deleteEmailTemplateCustomizationsWithHttpInfo(String brandId, String templateName) throws ApiException {
        okhttp3.Call localVarCall = deleteEmailTemplateCustomizationsValidateBeforeCall(brandId, templateName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmailTemplateCustomizationsAsync(String brandId, String templateName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmailTemplateCustomizationsValidateBeforeCall(brandId, templateName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEmailTemplateCustomizationsRequestBuilder {
        private final String brandId;
        private final String templateName;

        private DeleteEmailTemplateCustomizationsRequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Build call for deleteEmailTemplateCustomizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmailTemplateCustomizationsCall(brandId, templateName, _callback);
        }


        /**
         * Execute deleteEmailTemplateCustomizations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmailTemplateCustomizationsWithHttpInfo(brandId, templateName);
        }

        /**
         * Execute deleteEmailTemplateCustomizations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmailTemplateCustomizationsWithHttpInfo(brandId, templateName);
        }

        /**
         * Execute deleteEmailTemplateCustomizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmailTemplateCustomizationsAsync(brandId, templateName, _callback);
        }
    }

    /**
     * Delete Email Template Customization
     * Delete all customizations for an email template. Also known as “Reset to Default”.
     * @param brandId  (required)
     * @param templateName  (required)
     * @return DeleteEmailTemplateCustomizationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEmailTemplateCustomizationsRequestBuilder deleteEmailTemplateCustomizations(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new DeleteEmailTemplateCustomizationsRequestBuilder(brandId, templateName);
    }
    private okhttp3.Call deleteThemeBackgroundImageCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}/background-image"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThemeBackgroundImageValidateBeforeCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteThemeBackgroundImage(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling deleteThemeBackgroundImage(Async)");
        }

        return deleteThemeBackgroundImageCall(brandId, themeId, _callback);

    }


    private ApiResponse<Void> deleteThemeBackgroundImageWithHttpInfo(String brandId, String themeId) throws ApiException {
        okhttp3.Call localVarCall = deleteThemeBackgroundImageValidateBeforeCall(brandId, themeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteThemeBackgroundImageAsync(String brandId, String themeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThemeBackgroundImageValidateBeforeCall(brandId, themeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteThemeBackgroundImageRequestBuilder {
        private final String brandId;
        private final String themeId;

        private DeleteThemeBackgroundImageRequestBuilder(String brandId, String themeId) {
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for deleteThemeBackgroundImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThemeBackgroundImageCall(brandId, themeId, _callback);
        }


        /**
         * Execute deleteThemeBackgroundImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteThemeBackgroundImageWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute deleteThemeBackgroundImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteThemeBackgroundImageWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute deleteThemeBackgroundImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteThemeBackgroundImageAsync(brandId, themeId, _callback);
        }
    }

    /**
     * Deletes a Theme background image
     * Deletes a Theme background image
     * @param brandId  (required)
     * @param themeId  (required)
     * @return DeleteThemeBackgroundImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThemeBackgroundImageRequestBuilder deleteThemeBackgroundImage(String brandId, String themeId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new DeleteThemeBackgroundImageRequestBuilder(brandId, themeId);
    }
    private okhttp3.Call deleteThemeFaviconCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}/favicon"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThemeFaviconValidateBeforeCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteThemeFavicon(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling deleteThemeFavicon(Async)");
        }

        return deleteThemeFaviconCall(brandId, themeId, _callback);

    }


    private ApiResponse<Void> deleteThemeFaviconWithHttpInfo(String brandId, String themeId) throws ApiException {
        okhttp3.Call localVarCall = deleteThemeFaviconValidateBeforeCall(brandId, themeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteThemeFaviconAsync(String brandId, String themeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThemeFaviconValidateBeforeCall(brandId, themeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteThemeFaviconRequestBuilder {
        private final String brandId;
        private final String themeId;

        private DeleteThemeFaviconRequestBuilder(String brandId, String themeId) {
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for deleteThemeFavicon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThemeFaviconCall(brandId, themeId, _callback);
        }


        /**
         * Execute deleteThemeFavicon request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteThemeFaviconWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute deleteThemeFavicon request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteThemeFaviconWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute deleteThemeFavicon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteThemeFaviconAsync(brandId, themeId, _callback);
        }
    }

    /**
     * Deletes a Theme favicon. The org then uses the Okta default favicon.
     * Deletes a Theme favicon. The org then uses the Okta default favicon.
     * @param brandId  (required)
     * @param themeId  (required)
     * @return DeleteThemeFaviconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThemeFaviconRequestBuilder deleteThemeFavicon(String brandId, String themeId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new DeleteThemeFaviconRequestBuilder(brandId, themeId);
    }
    private okhttp3.Call deleteThemeLogoCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}/logo"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThemeLogoValidateBeforeCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteThemeLogo(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling deleteThemeLogo(Async)");
        }

        return deleteThemeLogoCall(brandId, themeId, _callback);

    }


    private ApiResponse<Void> deleteThemeLogoWithHttpInfo(String brandId, String themeId) throws ApiException {
        okhttp3.Call localVarCall = deleteThemeLogoValidateBeforeCall(brandId, themeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteThemeLogoAsync(String brandId, String themeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThemeLogoValidateBeforeCall(brandId, themeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteThemeLogoRequestBuilder {
        private final String brandId;
        private final String themeId;

        private DeleteThemeLogoRequestBuilder(String brandId, String themeId) {
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for deleteThemeLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThemeLogoCall(brandId, themeId, _callback);
        }


        /**
         * Execute deleteThemeLogo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteThemeLogoWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute deleteThemeLogo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteThemeLogoWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute deleteThemeLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteThemeLogoAsync(brandId, themeId, _callback);
        }
    }

    /**
     * Deletes a Theme logo. The org then uses the Okta default logo.
     * Deletes a Theme logo. The org then uses the Okta default logo.
     * @param brandId  (required)
     * @param themeId  (required)
     * @return DeleteThemeLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThemeLogoRequestBuilder deleteThemeLogo(String brandId, String themeId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new DeleteThemeLogoRequestBuilder(brandId, themeId);
    }
    private okhttp3.Call getAllBrandsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllBrandsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllBrandsCall(_callback);

    }


    private ApiResponse<List<Brand>> getAllBrandsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllBrandsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Brand>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllBrandsAsync(final ApiCallback<List<Brand>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllBrandsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Brand>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllBrandsRequestBuilder {

        private GetAllBrandsRequestBuilder() {
        }

        /**
         * Build call for getAllBrands
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllBrandsCall(_callback);
        }


        /**
         * Execute getAllBrands request
         * @return List&lt;Brand&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Brand> execute() throws ApiException {
            ApiResponse<List<Brand>> localVarResp = getAllBrandsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllBrands request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Brand&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Brand>> executeWithHttpInfo() throws ApiException {
            return getAllBrandsWithHttpInfo();
        }

        /**
         * Execute getAllBrands request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Brand>> _callback) throws ApiException {
            return getAllBrandsAsync(_callback);
        }
    }

    /**
     * List Brands
     * List all the brands in your org.
     * @return GetAllBrandsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBrandsRequestBuilder getAllBrands() throws IllegalArgumentException {
        return new GetAllBrandsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getById(Async)");
        }

        return getByIdCall(brandId, _callback);

    }


    private ApiResponse<Brand> getByIdWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String brandId, final ApiCallback<Brand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String brandId;

        private GetByIdRequestBuilder(String brandId) {
            this.brandId = brandId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(brandId, _callback);
        }


        /**
         * Execute getById request
         * @return Brand
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Brand execute() throws ApiException {
            ApiResponse<Brand> localVarResp = getByIdWithHttpInfo(brandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Brand&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Brand> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(brandId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Brand> _callback) throws ApiException {
            return getByIdAsync(brandId, _callback);
        }
    }

    /**
     * Get Brand
     * Fetches a brand by &#x60;brandId&#x60;
     * @param brandId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String brandId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new GetByIdRequestBuilder(brandId);
    }
    private okhttp3.Call getEmailCustomizationPreviewCall(String brandId, String templateName, String customizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()))
            .replace("{" + "customizationId" + "}", localVarApiClient.escapeString(customizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailCustomizationPreviewValidateBeforeCall(String brandId, String templateName, String customizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getEmailCustomizationPreview(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getEmailCustomizationPreview(Async)");
        }

        // verify the required parameter 'customizationId' is set
        if (customizationId == null) {
            throw new ApiException("Missing the required parameter 'customizationId' when calling getEmailCustomizationPreview(Async)");
        }

        return getEmailCustomizationPreviewCall(brandId, templateName, customizationId, _callback);

    }


    private ApiResponse<EmailTemplateContent> getEmailCustomizationPreviewWithHttpInfo(String brandId, String templateName, String customizationId) throws ApiException {
        okhttp3.Call localVarCall = getEmailCustomizationPreviewValidateBeforeCall(brandId, templateName, customizationId, null);
        Type localVarReturnType = new TypeToken<EmailTemplateContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailCustomizationPreviewAsync(String brandId, String templateName, String customizationId, final ApiCallback<EmailTemplateContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailCustomizationPreviewValidateBeforeCall(brandId, templateName, customizationId, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailCustomizationPreviewRequestBuilder {
        private final String brandId;
        private final String templateName;
        private final String customizationId;

        private GetEmailCustomizationPreviewRequestBuilder(String brandId, String templateName, String customizationId) {
            this.brandId = brandId;
            this.templateName = templateName;
            this.customizationId = customizationId;
        }

        /**
         * Build call for getEmailCustomizationPreview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailCustomizationPreviewCall(brandId, templateName, customizationId, _callback);
        }


        /**
         * Execute getEmailCustomizationPreview request
         * @return EmailTemplateContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplateContent execute() throws ApiException {
            ApiResponse<EmailTemplateContent> localVarResp = getEmailCustomizationPreviewWithHttpInfo(brandId, templateName, customizationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailCustomizationPreview request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplateContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplateContent> executeWithHttpInfo() throws ApiException {
            return getEmailCustomizationPreviewWithHttpInfo(brandId, templateName, customizationId);
        }

        /**
         * Execute getEmailCustomizationPreview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplateContent> _callback) throws ApiException {
            return getEmailCustomizationPreviewAsync(brandId, templateName, customizationId, _callback);
        }
    }

    /**
     * Get Preview Content of Email Customization
     * Get a preview of an email template customization.
     * @param brandId  (required)
     * @param templateName  (required)
     * @param customizationId  (required)
     * @return GetEmailCustomizationPreviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailCustomizationPreviewRequestBuilder getEmailCustomizationPreview(String brandId, String templateName, String customizationId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        if (customizationId == null) throw new IllegalArgumentException("\"customizationId\" is required but got null");
            

        return new GetEmailCustomizationPreviewRequestBuilder(brandId, templateName, customizationId);
    }
    private okhttp3.Call getEmailTemplateCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailTemplateValidateBeforeCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getEmailTemplate(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getEmailTemplate(Async)");
        }

        return getEmailTemplateCall(brandId, templateName, _callback);

    }


    private ApiResponse<EmailTemplate> getEmailTemplateWithHttpInfo(String brandId, String templateName) throws ApiException {
        okhttp3.Call localVarCall = getEmailTemplateValidateBeforeCall(brandId, templateName, null);
        Type localVarReturnType = new TypeToken<EmailTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailTemplateAsync(String brandId, String templateName, final ApiCallback<EmailTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailTemplateValidateBeforeCall(brandId, templateName, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailTemplateRequestBuilder {
        private final String brandId;
        private final String templateName;

        private GetEmailTemplateRequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Build call for getEmailTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailTemplateCall(brandId, templateName, _callback);
        }


        /**
         * Execute getEmailTemplate request
         * @return EmailTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplate execute() throws ApiException {
            ApiResponse<EmailTemplate> localVarResp = getEmailTemplateWithHttpInfo(brandId, templateName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailTemplate request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplate> executeWithHttpInfo() throws ApiException {
            return getEmailTemplateWithHttpInfo(brandId, templateName);
        }

        /**
         * Execute getEmailTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplate> _callback) throws ApiException {
            return getEmailTemplateAsync(brandId, templateName, _callback);
        }
    }

    /**
     * Get Email Template
     * Fetch an email template by templateName
     * @param brandId  (required)
     * @param templateName  (required)
     * @return GetEmailTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailTemplateRequestBuilder getEmailTemplate(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new GetEmailTemplateRequestBuilder(brandId, templateName);
    }
    private okhttp3.Call getEmailTemplateCustomizationByIdCall(String brandId, String templateName, String customizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()))
            .replace("{" + "customizationId" + "}", localVarApiClient.escapeString(customizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailTemplateCustomizationByIdValidateBeforeCall(String brandId, String templateName, String customizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getEmailTemplateCustomizationById(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getEmailTemplateCustomizationById(Async)");
        }

        // verify the required parameter 'customizationId' is set
        if (customizationId == null) {
            throw new ApiException("Missing the required parameter 'customizationId' when calling getEmailTemplateCustomizationById(Async)");
        }

        return getEmailTemplateCustomizationByIdCall(brandId, templateName, customizationId, _callback);

    }


    private ApiResponse<EmailTemplateCustomization> getEmailTemplateCustomizationByIdWithHttpInfo(String brandId, String templateName, String customizationId) throws ApiException {
        okhttp3.Call localVarCall = getEmailTemplateCustomizationByIdValidateBeforeCall(brandId, templateName, customizationId, null);
        Type localVarReturnType = new TypeToken<EmailTemplateCustomization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailTemplateCustomizationByIdAsync(String brandId, String templateName, String customizationId, final ApiCallback<EmailTemplateCustomization> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailTemplateCustomizationByIdValidateBeforeCall(brandId, templateName, customizationId, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateCustomization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailTemplateCustomizationByIdRequestBuilder {
        private final String brandId;
        private final String templateName;
        private final String customizationId;

        private GetEmailTemplateCustomizationByIdRequestBuilder(String brandId, String templateName, String customizationId) {
            this.brandId = brandId;
            this.templateName = templateName;
            this.customizationId = customizationId;
        }

        /**
         * Build call for getEmailTemplateCustomizationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailTemplateCustomizationByIdCall(brandId, templateName, customizationId, _callback);
        }


        /**
         * Execute getEmailTemplateCustomizationById request
         * @return EmailTemplateCustomization
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplateCustomization execute() throws ApiException {
            ApiResponse<EmailTemplateCustomization> localVarResp = getEmailTemplateCustomizationByIdWithHttpInfo(brandId, templateName, customizationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailTemplateCustomizationById request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplateCustomization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplateCustomization> executeWithHttpInfo() throws ApiException {
            return getEmailTemplateCustomizationByIdWithHttpInfo(brandId, templateName, customizationId);
        }

        /**
         * Execute getEmailTemplateCustomizationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplateCustomization> _callback) throws ApiException {
            return getEmailTemplateCustomizationByIdAsync(brandId, templateName, customizationId, _callback);
        }
    }

    /**
     * Get Email Template Customization
     * Fetch an email customization by id.
     * @param brandId  (required)
     * @param templateName  (required)
     * @param customizationId  (required)
     * @return GetEmailTemplateCustomizationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailTemplateCustomizationByIdRequestBuilder getEmailTemplateCustomizationById(String brandId, String templateName, String customizationId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        if (customizationId == null) throw new IllegalArgumentException("\"customizationId\" is required but got null");
            

        return new GetEmailTemplateCustomizationByIdRequestBuilder(brandId, templateName, customizationId);
    }
    private okhttp3.Call getEmailTemplateDefaultContentCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/default-content"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailTemplateDefaultContentValidateBeforeCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getEmailTemplateDefaultContent(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getEmailTemplateDefaultContent(Async)");
        }

        return getEmailTemplateDefaultContentCall(brandId, templateName, _callback);

    }


    private ApiResponse<EmailTemplateContent> getEmailTemplateDefaultContentWithHttpInfo(String brandId, String templateName) throws ApiException {
        okhttp3.Call localVarCall = getEmailTemplateDefaultContentValidateBeforeCall(brandId, templateName, null);
        Type localVarReturnType = new TypeToken<EmailTemplateContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailTemplateDefaultContentAsync(String brandId, String templateName, final ApiCallback<EmailTemplateContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailTemplateDefaultContentValidateBeforeCall(brandId, templateName, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailTemplateDefaultContentRequestBuilder {
        private final String brandId;
        private final String templateName;

        private GetEmailTemplateDefaultContentRequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Build call for getEmailTemplateDefaultContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailTemplateDefaultContentCall(brandId, templateName, _callback);
        }


        /**
         * Execute getEmailTemplateDefaultContent request
         * @return EmailTemplateContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplateContent execute() throws ApiException {
            ApiResponse<EmailTemplateContent> localVarResp = getEmailTemplateDefaultContentWithHttpInfo(brandId, templateName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailTemplateDefaultContent request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplateContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplateContent> executeWithHttpInfo() throws ApiException {
            return getEmailTemplateDefaultContentWithHttpInfo(brandId, templateName);
        }

        /**
         * Execute getEmailTemplateDefaultContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplateContent> _callback) throws ApiException {
            return getEmailTemplateDefaultContentAsync(brandId, templateName, _callback);
        }
    }

    /**
     * Get Default Content of Email Template
     * Fetch the default content for an email template.
     * @param brandId  (required)
     * @param templateName  (required)
     * @return GetEmailTemplateDefaultContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailTemplateDefaultContentRequestBuilder getEmailTemplateDefaultContent(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new GetEmailTemplateDefaultContentRequestBuilder(brandId, templateName);
    }
    private okhttp3.Call getEmailTemplateDefaultContentPreviewCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailTemplateDefaultContentPreviewValidateBeforeCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getEmailTemplateDefaultContentPreview(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getEmailTemplateDefaultContentPreview(Async)");
        }

        return getEmailTemplateDefaultContentPreviewCall(brandId, templateName, _callback);

    }


    private ApiResponse<EmailTemplateContent> getEmailTemplateDefaultContentPreviewWithHttpInfo(String brandId, String templateName) throws ApiException {
        okhttp3.Call localVarCall = getEmailTemplateDefaultContentPreviewValidateBeforeCall(brandId, templateName, null);
        Type localVarReturnType = new TypeToken<EmailTemplateContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailTemplateDefaultContentPreviewAsync(String brandId, String templateName, final ApiCallback<EmailTemplateContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailTemplateDefaultContentPreviewValidateBeforeCall(brandId, templateName, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailTemplateDefaultContentPreviewRequestBuilder {
        private final String brandId;
        private final String templateName;

        private GetEmailTemplateDefaultContentPreviewRequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Build call for getEmailTemplateDefaultContentPreview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailTemplateDefaultContentPreviewCall(brandId, templateName, _callback);
        }


        /**
         * Execute getEmailTemplateDefaultContentPreview request
         * @return EmailTemplateContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplateContent execute() throws ApiException {
            ApiResponse<EmailTemplateContent> localVarResp = getEmailTemplateDefaultContentPreviewWithHttpInfo(brandId, templateName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailTemplateDefaultContentPreview request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplateContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplateContent> executeWithHttpInfo() throws ApiException {
            return getEmailTemplateDefaultContentPreviewWithHttpInfo(brandId, templateName);
        }

        /**
         * Execute getEmailTemplateDefaultContentPreview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplateContent> _callback) throws ApiException {
            return getEmailTemplateDefaultContentPreviewAsync(brandId, templateName, _callback);
        }
    }

    /**
     * Get Preview of Email Template Default Content
     * Fetch a preview of an email template&#39;s default content by populating velocity references with the current user&#39;s environment.
     * @param brandId  (required)
     * @param templateName  (required)
     * @return GetEmailTemplateDefaultContentPreviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailTemplateDefaultContentPreviewRequestBuilder getEmailTemplateDefaultContentPreview(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new GetEmailTemplateDefaultContentPreviewRequestBuilder(brandId, templateName);
    }
    private okhttp3.Call getEmailTemplateDefaultContentPreview_0Call(String brandId, String templateName, EmailTemplateTestRequest emailTemplateTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailTemplateTestRequest;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/test"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailTemplateDefaultContentPreview_0ValidateBeforeCall(String brandId, String templateName, EmailTemplateTestRequest emailTemplateTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getEmailTemplateDefaultContentPreview_0(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getEmailTemplateDefaultContentPreview_0(Async)");
        }

        // verify the required parameter 'emailTemplateTestRequest' is set
        if (emailTemplateTestRequest == null) {
            throw new ApiException("Missing the required parameter 'emailTemplateTestRequest' when calling getEmailTemplateDefaultContentPreview_0(Async)");
        }

        return getEmailTemplateDefaultContentPreview_0Call(brandId, templateName, emailTemplateTestRequest, _callback);

    }


    private ApiResponse<Void> getEmailTemplateDefaultContentPreview_0WithHttpInfo(String brandId, String templateName, EmailTemplateTestRequest emailTemplateTestRequest) throws ApiException {
        okhttp3.Call localVarCall = getEmailTemplateDefaultContentPreview_0ValidateBeforeCall(brandId, templateName, emailTemplateTestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmailTemplateDefaultContentPreview_0Async(String brandId, String templateName, EmailTemplateTestRequest emailTemplateTestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailTemplateDefaultContentPreview_0ValidateBeforeCall(brandId, templateName, emailTemplateTestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmailTemplateDefaultContentPreview0RequestBuilder {
        private final String brandId;
        private final String templateName;
        private String customizationId;

        private GetEmailTemplateDefaultContentPreview0RequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Set customizationId
         * @param customizationId  (optional)
         * @return GetEmailTemplateDefaultContentPreview0RequestBuilder
         */
        public GetEmailTemplateDefaultContentPreview0RequestBuilder customizationId(String customizationId) {
            this.customizationId = customizationId;
            return this;
        }
        
        /**
         * Build call for getEmailTemplateDefaultContentPreview_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailTemplateTestRequest emailTemplateTestRequest = buildBodyParams();
            return getEmailTemplateDefaultContentPreview_0Call(brandId, templateName, emailTemplateTestRequest, _callback);
        }

        private EmailTemplateTestRequest buildBodyParams() {
            EmailTemplateTestRequest emailTemplateTestRequest = new EmailTemplateTestRequest();
            emailTemplateTestRequest.customizationId(this.customizationId);
            return emailTemplateTestRequest;
        }

        /**
         * Execute getEmailTemplateDefaultContentPreview_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmailTemplateTestRequest emailTemplateTestRequest = buildBodyParams();
            getEmailTemplateDefaultContentPreview_0WithHttpInfo(brandId, templateName, emailTemplateTestRequest);
        }

        /**
         * Execute getEmailTemplateDefaultContentPreview_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmailTemplateTestRequest emailTemplateTestRequest = buildBodyParams();
            return getEmailTemplateDefaultContentPreview_0WithHttpInfo(brandId, templateName, emailTemplateTestRequest);
        }

        /**
         * Execute getEmailTemplateDefaultContentPreview_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmailTemplateTestRequest emailTemplateTestRequest = buildBodyParams();
            return getEmailTemplateDefaultContentPreview_0Async(brandId, templateName, emailTemplateTestRequest, _callback);
        }
    }

    /**
     * Get Preview of Email Template Default Content
     * Send a test email to the current users primary and secondary email addresses. The email content is selected based on the following priority: An email customization specifically for the users locale. The default language of email customizations. The email templates default content.
     * @param brandId  (required)
     * @param templateName  (required)
     * @param emailTemplateTestRequest  (required)
     * @return GetEmailTemplateDefaultContentPreview0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailTemplateDefaultContentPreview0RequestBuilder getEmailTemplateDefaultContentPreview_0(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new GetEmailTemplateDefaultContentPreview0RequestBuilder(brandId, templateName);
    }
    private okhttp3.Call getThemeByIdCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThemeByIdValidateBeforeCall(String brandId, String themeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getThemeById(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling getThemeById(Async)");
        }

        return getThemeByIdCall(brandId, themeId, _callback);

    }


    private ApiResponse<ThemeResponse> getThemeByIdWithHttpInfo(String brandId, String themeId) throws ApiException {
        okhttp3.Call localVarCall = getThemeByIdValidateBeforeCall(brandId, themeId, null);
        Type localVarReturnType = new TypeToken<ThemeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThemeByIdAsync(String brandId, String themeId, final ApiCallback<ThemeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThemeByIdValidateBeforeCall(brandId, themeId, _callback);
        Type localVarReturnType = new TypeToken<ThemeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetThemeByIdRequestBuilder {
        private final String brandId;
        private final String themeId;

        private GetThemeByIdRequestBuilder(String brandId, String themeId) {
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for getThemeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThemeByIdCall(brandId, themeId, _callback);
        }


        /**
         * Execute getThemeById request
         * @return ThemeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ThemeResponse execute() throws ApiException {
            ApiResponse<ThemeResponse> localVarResp = getThemeByIdWithHttpInfo(brandId, themeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getThemeById request with HTTP info returned
         * @return ApiResponse&lt;ThemeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ThemeResponse> executeWithHttpInfo() throws ApiException {
            return getThemeByIdWithHttpInfo(brandId, themeId);
        }

        /**
         * Execute getThemeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ThemeResponse> _callback) throws ApiException {
            return getThemeByIdAsync(brandId, themeId, _callback);
        }
    }

    /**
     * Get a theme for a brand
     * Fetches a theme for a brand
     * @param brandId  (required)
     * @param themeId  (required)
     * @return GetThemeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetThemeByIdRequestBuilder getThemeById(String brandId, String themeId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new GetThemeByIdRequestBuilder(brandId, themeId);
    }
    private okhttp3.Call getThemesCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThemesValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getThemes(Async)");
        }

        return getThemesCall(brandId, _callback);

    }


    private ApiResponse<List<ThemeResponse>> getThemesWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = getThemesValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<List<ThemeResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThemesAsync(String brandId, final ApiCallback<List<ThemeResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThemesValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<List<ThemeResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetThemesRequestBuilder {
        private final String brandId;

        private GetThemesRequestBuilder(String brandId) {
            this.brandId = brandId;
        }

        /**
         * Build call for getThemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThemesCall(brandId, _callback);
        }


        /**
         * Execute getThemes request
         * @return List&lt;ThemeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<ThemeResponse> execute() throws ApiException {
            ApiResponse<List<ThemeResponse>> localVarResp = getThemesWithHttpInfo(brandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getThemes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ThemeResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ThemeResponse>> executeWithHttpInfo() throws ApiException {
            return getThemesWithHttpInfo(brandId);
        }

        /**
         * Execute getThemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ThemeResponse>> _callback) throws ApiException {
            return getThemesAsync(brandId, _callback);
        }
    }

    /**
     * Get Brand Themes
     * List all the themes in your brand
     * @param brandId  (required)
     * @return GetThemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetThemesRequestBuilder getThemes(String brandId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new GetThemesRequestBuilder(brandId);
    }
    private okhttp3.Call listEmailTemplateCustomizationsCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmailTemplateCustomizationsValidateBeforeCall(String brandId, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling listEmailTemplateCustomizations(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling listEmailTemplateCustomizations(Async)");
        }

        return listEmailTemplateCustomizationsCall(brandId, templateName, _callback);

    }


    private ApiResponse<List<EmailTemplateCustomization>> listEmailTemplateCustomizationsWithHttpInfo(String brandId, String templateName) throws ApiException {
        okhttp3.Call localVarCall = listEmailTemplateCustomizationsValidateBeforeCall(brandId, templateName, null);
        Type localVarReturnType = new TypeToken<List<EmailTemplateCustomization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmailTemplateCustomizationsAsync(String brandId, String templateName, final ApiCallback<List<EmailTemplateCustomization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmailTemplateCustomizationsValidateBeforeCall(brandId, templateName, _callback);
        Type localVarReturnType = new TypeToken<List<EmailTemplateCustomization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmailTemplateCustomizationsRequestBuilder {
        private final String brandId;
        private final String templateName;

        private ListEmailTemplateCustomizationsRequestBuilder(String brandId, String templateName) {
            this.brandId = brandId;
            this.templateName = templateName;
        }

        /**
         * Build call for listEmailTemplateCustomizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmailTemplateCustomizationsCall(brandId, templateName, _callback);
        }


        /**
         * Execute listEmailTemplateCustomizations request
         * @return List&lt;EmailTemplateCustomization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<EmailTemplateCustomization> execute() throws ApiException {
            ApiResponse<List<EmailTemplateCustomization>> localVarResp = listEmailTemplateCustomizationsWithHttpInfo(brandId, templateName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmailTemplateCustomizations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmailTemplateCustomization&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmailTemplateCustomization>> executeWithHttpInfo() throws ApiException {
            return listEmailTemplateCustomizationsWithHttpInfo(brandId, templateName);
        }

        /**
         * Execute listEmailTemplateCustomizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmailTemplateCustomization>> _callback) throws ApiException {
            return listEmailTemplateCustomizationsAsync(brandId, templateName, _callback);
        }
    }

    /**
     * List Email Template Customization
     * List all email customizations for an email template
     * @param brandId  (required)
     * @param templateName  (required)
     * @return ListEmailTemplateCustomizationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListEmailTemplateCustomizationsRequestBuilder listEmailTemplateCustomizations(String brandId, String templateName) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new ListEmailTemplateCustomizationsRequestBuilder(brandId, templateName);
    }
    private okhttp3.Call listEmailTemplatesCall(String brandId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmailTemplatesValidateBeforeCall(String brandId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling listEmailTemplates(Async)");
        }

        return listEmailTemplatesCall(brandId, after, limit, _callback);

    }


    private ApiResponse<List<EmailTemplate>> listEmailTemplatesWithHttpInfo(String brandId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listEmailTemplatesValidateBeforeCall(brandId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<EmailTemplate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmailTemplatesAsync(String brandId, String after, Integer limit, final ApiCallback<List<EmailTemplate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmailTemplatesValidateBeforeCall(brandId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<EmailTemplate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmailTemplatesRequestBuilder {
        private final String brandId;
        private String after;
        private Integer limit;

        private ListEmailTemplatesRequestBuilder(String brandId) {
            this.brandId = brandId;
        }

        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of email templates. (optional)
         * @return ListEmailTemplatesRequestBuilder
         */
        public ListEmailTemplatesRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of results returned (maximum 200) (optional, default to 20)
         * @return ListEmailTemplatesRequestBuilder
         */
        public ListEmailTemplatesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listEmailTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmailTemplatesCall(brandId, after, limit, _callback);
        }


        /**
         * Execute listEmailTemplates request
         * @return List&lt;EmailTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<EmailTemplate> execute() throws ApiException {
            ApiResponse<List<EmailTemplate>> localVarResp = listEmailTemplatesWithHttpInfo(brandId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmailTemplates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmailTemplate&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmailTemplate>> executeWithHttpInfo() throws ApiException {
            return listEmailTemplatesWithHttpInfo(brandId, after, limit);
        }

        /**
         * Execute listEmailTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmailTemplate>> _callback) throws ApiException {
            return listEmailTemplatesAsync(brandId, after, limit, _callback);
        }
    }

    /**
     * List Email Templates
     * List email templates in your organization with pagination.
     * @param brandId  (required)
     * @return ListEmailTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListEmailTemplatesRequestBuilder listEmailTemplates(String brandId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new ListEmailTemplatesRequestBuilder(brandId);
    }
    private okhttp3.Call updateByBrandIdCall(String brandId, Brand brand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brand;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByBrandIdValidateBeforeCall(String brandId, Brand brand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateByBrandId(Async)");
        }

        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling updateByBrandId(Async)");
        }

        return updateByBrandIdCall(brandId, brand, _callback);

    }


    private ApiResponse<Brand> updateByBrandIdWithHttpInfo(String brandId, Brand brand) throws ApiException {
        okhttp3.Call localVarCall = updateByBrandIdValidateBeforeCall(brandId, brand, null);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByBrandIdAsync(String brandId, Brand brand, final ApiCallback<Brand> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByBrandIdValidateBeforeCall(brandId, brand, _callback);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByBrandIdRequestBuilder {
        private final String brandId;
        private Map<String, Object> links;
        private Boolean agreeToCustomPrivacyPolicy;
        private String customPrivacyPolicyUrl;
        private String id;
        private Boolean removePoweredByOkta;

        private UpdateByBrandIdRequestBuilder(String brandId) {
            this.brandId = brandId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateByBrandIdRequestBuilder
         */
        public UpdateByBrandIdRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set agreeToCustomPrivacyPolicy
         * @param agreeToCustomPrivacyPolicy  (optional)
         * @return UpdateByBrandIdRequestBuilder
         */
        public UpdateByBrandIdRequestBuilder agreeToCustomPrivacyPolicy(Boolean agreeToCustomPrivacyPolicy) {
            this.agreeToCustomPrivacyPolicy = agreeToCustomPrivacyPolicy;
            return this;
        }
        
        /**
         * Set customPrivacyPolicyUrl
         * @param customPrivacyPolicyUrl  (optional)
         * @return UpdateByBrandIdRequestBuilder
         */
        public UpdateByBrandIdRequestBuilder customPrivacyPolicyUrl(String customPrivacyPolicyUrl) {
            this.customPrivacyPolicyUrl = customPrivacyPolicyUrl;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateByBrandIdRequestBuilder
         */
        public UpdateByBrandIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set removePoweredByOkta
         * @param removePoweredByOkta  (optional)
         * @return UpdateByBrandIdRequestBuilder
         */
        public UpdateByBrandIdRequestBuilder removePoweredByOkta(Boolean removePoweredByOkta) {
            this.removePoweredByOkta = removePoweredByOkta;
            return this;
        }
        
        /**
         * Build call for updateByBrandId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Brand brand = buildBodyParams();
            return updateByBrandIdCall(brandId, brand, _callback);
        }

        private Brand buildBodyParams() {
            Brand brand = new Brand();
            brand.links(this.links);
            brand.agreeToCustomPrivacyPolicy(this.agreeToCustomPrivacyPolicy);
            brand.customPrivacyPolicyUrl(this.customPrivacyPolicyUrl);
            brand.id(this.id);
            brand.removePoweredByOkta(this.removePoweredByOkta);
            return brand;
        }

        /**
         * Execute updateByBrandId request
         * @return Brand
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public Brand execute() throws ApiException {
            Brand brand = buildBodyParams();
            ApiResponse<Brand> localVarResp = updateByBrandIdWithHttpInfo(brandId, brand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByBrandId request with HTTP info returned
         * @return ApiResponse&lt;Brand&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Brand> executeWithHttpInfo() throws ApiException {
            Brand brand = buildBodyParams();
            return updateByBrandIdWithHttpInfo(brandId, brand);
        }

        /**
         * Execute updateByBrandId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Brand> _callback) throws ApiException {
            Brand brand = buildBodyParams();
            return updateByBrandIdAsync(brandId, brand, _callback);
        }
    }

    /**
     * Update Brand
     * Updates a brand by &#x60;brandId&#x60;
     * @param brandId  (required)
     * @param brand  (required)
     * @return UpdateByBrandIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByBrandIdRequestBuilder updateByBrandId(String brandId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new UpdateByBrandIdRequestBuilder(brandId);
    }
    private okhttp3.Call updateEmailCustomizationCall(String brandId, String templateName, String customizationId, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailTemplateCustomizationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()))
            .replace("{" + "customizationId" + "}", localVarApiClient.escapeString(customizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailCustomizationValidateBeforeCall(String brandId, String templateName, String customizationId, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateEmailCustomization(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling updateEmailCustomization(Async)");
        }

        // verify the required parameter 'customizationId' is set
        if (customizationId == null) {
            throw new ApiException("Missing the required parameter 'customizationId' when calling updateEmailCustomization(Async)");
        }

        // verify the required parameter 'emailTemplateCustomizationRequest' is set
        if (emailTemplateCustomizationRequest == null) {
            throw new ApiException("Missing the required parameter 'emailTemplateCustomizationRequest' when calling updateEmailCustomization(Async)");
        }

        return updateEmailCustomizationCall(brandId, templateName, customizationId, emailTemplateCustomizationRequest, _callback);

    }


    private ApiResponse<EmailTemplateCustomization> updateEmailCustomizationWithHttpInfo(String brandId, String templateName, String customizationId, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmailCustomizationValidateBeforeCall(brandId, templateName, customizationId, emailTemplateCustomizationRequest, null);
        Type localVarReturnType = new TypeToken<EmailTemplateCustomization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmailCustomizationAsync(String brandId, String templateName, String customizationId, EmailTemplateCustomizationRequest emailTemplateCustomizationRequest, final ApiCallback<EmailTemplateCustomization> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailCustomizationValidateBeforeCall(brandId, templateName, customizationId, emailTemplateCustomizationRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateCustomization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmailCustomizationRequestBuilder {
        private final String brandId;
        private final String templateName;
        private final String customizationId;
        private String body;
        private Boolean isDefault;
        private String language;
        private String subject;

        private UpdateEmailCustomizationRequestBuilder(String brandId, String templateName, String customizationId) {
            this.brandId = brandId;
            this.templateName = templateName;
            this.customizationId = customizationId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UpdateEmailCustomizationRequestBuilder
         */
        public UpdateEmailCustomizationRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault  (optional)
         * @return UpdateEmailCustomizationRequestBuilder
         */
        public UpdateEmailCustomizationRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set language
         * @param language unique under each email template (optional)
         * @return UpdateEmailCustomizationRequestBuilder
         */
        public UpdateEmailCustomizationRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set subject
         * @param subject  (optional)
         * @return UpdateEmailCustomizationRequestBuilder
         */
        public UpdateEmailCustomizationRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Build call for updateEmailCustomization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            return updateEmailCustomizationCall(brandId, templateName, customizationId, emailTemplateCustomizationRequest, _callback);
        }

        private EmailTemplateCustomizationRequest buildBodyParams() {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = new EmailTemplateCustomizationRequest();
            emailTemplateCustomizationRequest.body(this.body);
            emailTemplateCustomizationRequest.isDefault(this.isDefault);
            emailTemplateCustomizationRequest.language(this.language);
            emailTemplateCustomizationRequest.subject(this.subject);
            return emailTemplateCustomizationRequest;
        }

        /**
         * Execute updateEmailCustomization request
         * @return EmailTemplateCustomization
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public EmailTemplateCustomization execute() throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            ApiResponse<EmailTemplateCustomization> localVarResp = updateEmailCustomizationWithHttpInfo(brandId, templateName, customizationId, emailTemplateCustomizationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmailCustomization request with HTTP info returned
         * @return ApiResponse&lt;EmailTemplateCustomization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTemplateCustomization> executeWithHttpInfo() throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            return updateEmailCustomizationWithHttpInfo(brandId, templateName, customizationId, emailTemplateCustomizationRequest);
        }

        /**
         * Execute updateEmailCustomization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTemplateCustomization> _callback) throws ApiException {
            EmailTemplateCustomizationRequest emailTemplateCustomizationRequest = buildBodyParams();
            return updateEmailCustomizationAsync(brandId, templateName, customizationId, emailTemplateCustomizationRequest, _callback);
        }
    }

    /**
     * Update Email Customization
     * Update an email customization
     * @param brandId  (required)
     * @param templateName  (required)
     * @param customizationId  (required)
     * @param emailTemplateCustomizationRequest  (required)
     * @return UpdateEmailCustomizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailCustomizationRequestBuilder updateEmailCustomization(String brandId, String templateName, String customizationId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        if (customizationId == null) throw new IllegalArgumentException("\"customizationId\" is required but got null");
            

        return new UpdateEmailCustomizationRequestBuilder(brandId, templateName, customizationId);
    }
    private okhttp3.Call updateThemeCall(String brandId, String themeId, Theme theme, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = theme;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThemeValidateBeforeCall(String brandId, String themeId, Theme theme, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateTheme(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling updateTheme(Async)");
        }

        // verify the required parameter 'theme' is set
        if (theme == null) {
            throw new ApiException("Missing the required parameter 'theme' when calling updateTheme(Async)");
        }

        return updateThemeCall(brandId, themeId, theme, _callback);

    }


    private ApiResponse<ThemeResponse> updateThemeWithHttpInfo(String brandId, String themeId, Theme theme) throws ApiException {
        okhttp3.Call localVarCall = updateThemeValidateBeforeCall(brandId, themeId, theme, null);
        Type localVarReturnType = new TypeToken<ThemeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateThemeAsync(String brandId, String themeId, Theme theme, final ApiCallback<ThemeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThemeValidateBeforeCall(brandId, themeId, theme, _callback);
        Type localVarReturnType = new TypeToken<ThemeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateThemeRequestBuilder {
        private final String brandId;
        private final String themeId;
        private Map<String, Object> links;
        private String backgroundImage;
        private EmailTemplateTouchPointVariant emailTemplateTouchPointVariant;
        private EndUserDashboardTouchPointVariant endUserDashboardTouchPointVariant;
        private ErrorPageTouchPointVariant errorPageTouchPointVariant;
        private String primaryColorContrastHex;
        private String primaryColorHex;
        private String secondaryColorContrastHex;
        private String secondaryColorHex;
        private SignInPageTouchPointVariant signInPageTouchPointVariant;

        private UpdateThemeRequestBuilder(String brandId, String themeId) {
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set backgroundImage
         * @param backgroundImage  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder backgroundImage(String backgroundImage) {
            this.backgroundImage = backgroundImage;
            return this;
        }
        
        /**
         * Set emailTemplateTouchPointVariant
         * @param emailTemplateTouchPointVariant  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder emailTemplateTouchPointVariant(EmailTemplateTouchPointVariant emailTemplateTouchPointVariant) {
            this.emailTemplateTouchPointVariant = emailTemplateTouchPointVariant;
            return this;
        }
        
        /**
         * Set endUserDashboardTouchPointVariant
         * @param endUserDashboardTouchPointVariant  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder endUserDashboardTouchPointVariant(EndUserDashboardTouchPointVariant endUserDashboardTouchPointVariant) {
            this.endUserDashboardTouchPointVariant = endUserDashboardTouchPointVariant;
            return this;
        }
        
        /**
         * Set errorPageTouchPointVariant
         * @param errorPageTouchPointVariant  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder errorPageTouchPointVariant(ErrorPageTouchPointVariant errorPageTouchPointVariant) {
            this.errorPageTouchPointVariant = errorPageTouchPointVariant;
            return this;
        }
        
        /**
         * Set primaryColorContrastHex
         * @param primaryColorContrastHex  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder primaryColorContrastHex(String primaryColorContrastHex) {
            this.primaryColorContrastHex = primaryColorContrastHex;
            return this;
        }
        
        /**
         * Set primaryColorHex
         * @param primaryColorHex  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder primaryColorHex(String primaryColorHex) {
            this.primaryColorHex = primaryColorHex;
            return this;
        }
        
        /**
         * Set secondaryColorContrastHex
         * @param secondaryColorContrastHex  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder secondaryColorContrastHex(String secondaryColorContrastHex) {
            this.secondaryColorContrastHex = secondaryColorContrastHex;
            return this;
        }
        
        /**
         * Set secondaryColorHex
         * @param secondaryColorHex  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder secondaryColorHex(String secondaryColorHex) {
            this.secondaryColorHex = secondaryColorHex;
            return this;
        }
        
        /**
         * Set signInPageTouchPointVariant
         * @param signInPageTouchPointVariant  (optional)
         * @return UpdateThemeRequestBuilder
         */
        public UpdateThemeRequestBuilder signInPageTouchPointVariant(SignInPageTouchPointVariant signInPageTouchPointVariant) {
            this.signInPageTouchPointVariant = signInPageTouchPointVariant;
            return this;
        }
        
        /**
         * Build call for updateTheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Theme theme = buildBodyParams();
            return updateThemeCall(brandId, themeId, theme, _callback);
        }

        private Theme buildBodyParams() {
            Theme theme = new Theme();
            theme.links(this.links);
            theme.backgroundImage(this.backgroundImage);
            theme.emailTemplateTouchPointVariant(this.emailTemplateTouchPointVariant);
            theme.endUserDashboardTouchPointVariant(this.endUserDashboardTouchPointVariant);
            theme.errorPageTouchPointVariant(this.errorPageTouchPointVariant);
            theme.primaryColorContrastHex(this.primaryColorContrastHex);
            theme.primaryColorHex(this.primaryColorHex);
            theme.secondaryColorContrastHex(this.secondaryColorContrastHex);
            theme.secondaryColorHex(this.secondaryColorHex);
            theme.signInPageTouchPointVariant(this.signInPageTouchPointVariant);
            return theme;
        }

        /**
         * Execute updateTheme request
         * @return ThemeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ThemeResponse execute() throws ApiException {
            Theme theme = buildBodyParams();
            ApiResponse<ThemeResponse> localVarResp = updateThemeWithHttpInfo(brandId, themeId, theme);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTheme request with HTTP info returned
         * @return ApiResponse&lt;ThemeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ThemeResponse> executeWithHttpInfo() throws ApiException {
            Theme theme = buildBodyParams();
            return updateThemeWithHttpInfo(brandId, themeId, theme);
        }

        /**
         * Execute updateTheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ThemeResponse> _callback) throws ApiException {
            Theme theme = buildBodyParams();
            return updateThemeAsync(brandId, themeId, theme, _callback);
        }
    }

    /**
     * Update a theme for a brand
     * Updates a theme for a brand
     * @param brandId  (required)
     * @param themeId  (required)
     * @param theme  (required)
     * @return UpdateThemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateThemeRequestBuilder updateTheme(String brandId, String themeId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new UpdateThemeRequestBuilder(brandId, themeId);
    }
    private okhttp3.Call updateThemeBackgroundImageCall(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationUpdateLogoRequest;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}/background-image"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThemeBackgroundImageValidateBeforeCall(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateThemeBackgroundImage(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling updateThemeBackgroundImage(Async)");
        }

        // verify the required parameter 'applicationUpdateLogoRequest' is set
        if (applicationUpdateLogoRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateLogoRequest' when calling updateThemeBackgroundImage(Async)");
        }

        return updateThemeBackgroundImageCall(brandId, themeId, applicationUpdateLogoRequest, _callback);

    }


    private ApiResponse<ImageUploadResponse> updateThemeBackgroundImageWithHttpInfo(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateThemeBackgroundImageValidateBeforeCall(brandId, themeId, applicationUpdateLogoRequest, null);
        Type localVarReturnType = new TypeToken<ImageUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateThemeBackgroundImageAsync(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback<ImageUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThemeBackgroundImageValidateBeforeCall(brandId, themeId, applicationUpdateLogoRequest, _callback);
        Type localVarReturnType = new TypeToken<ImageUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateThemeBackgroundImageRequestBuilder {
        private final File _file;
        private final String brandId;
        private final String themeId;

        private UpdateThemeBackgroundImageRequestBuilder(File _file, String brandId, String themeId) {
            this._file = _file;
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for updateThemeBackgroundImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeBackgroundImageCall(brandId, themeId, applicationUpdateLogoRequest, _callback);
        }

        private ApplicationUpdateLogoRequest buildBodyParams() {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = new ApplicationUpdateLogoRequest();
            applicationUpdateLogoRequest._file(this._file);
            return applicationUpdateLogoRequest;
        }

        /**
         * Execute updateThemeBackgroundImage request
         * @return ImageUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ImageUploadResponse execute() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            ApiResponse<ImageUploadResponse> localVarResp = updateThemeBackgroundImageWithHttpInfo(brandId, themeId, applicationUpdateLogoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateThemeBackgroundImage request with HTTP info returned
         * @return ApiResponse&lt;ImageUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageUploadResponse> executeWithHttpInfo() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeBackgroundImageWithHttpInfo(brandId, themeId, applicationUpdateLogoRequest);
        }

        /**
         * Execute updateThemeBackgroundImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageUploadResponse> _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeBackgroundImageAsync(brandId, themeId, applicationUpdateLogoRequest, _callback);
        }
    }

    /**
     * Updates the background image for your Theme
     * Updates the background image for your Theme
     * @param brandId  (required)
     * @param themeId  (required)
     * @param applicationUpdateLogoRequest  (required)
     * @return UpdateThemeBackgroundImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateThemeBackgroundImageRequestBuilder updateThemeBackgroundImage(File _file, String brandId, String themeId) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new UpdateThemeBackgroundImageRequestBuilder(_file, brandId, themeId);
    }
    private okhttp3.Call updateThemeFaviconCall(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationUpdateLogoRequest;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}/favicon"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThemeFaviconValidateBeforeCall(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateThemeFavicon(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling updateThemeFavicon(Async)");
        }

        // verify the required parameter 'applicationUpdateLogoRequest' is set
        if (applicationUpdateLogoRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateLogoRequest' when calling updateThemeFavicon(Async)");
        }

        return updateThemeFaviconCall(brandId, themeId, applicationUpdateLogoRequest, _callback);

    }


    private ApiResponse<ImageUploadResponse> updateThemeFaviconWithHttpInfo(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateThemeFaviconValidateBeforeCall(brandId, themeId, applicationUpdateLogoRequest, null);
        Type localVarReturnType = new TypeToken<ImageUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateThemeFaviconAsync(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback<ImageUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThemeFaviconValidateBeforeCall(brandId, themeId, applicationUpdateLogoRequest, _callback);
        Type localVarReturnType = new TypeToken<ImageUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateThemeFaviconRequestBuilder {
        private final File _file;
        private final String brandId;
        private final String themeId;

        private UpdateThemeFaviconRequestBuilder(File _file, String brandId, String themeId) {
            this._file = _file;
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for updateThemeFavicon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeFaviconCall(brandId, themeId, applicationUpdateLogoRequest, _callback);
        }

        private ApplicationUpdateLogoRequest buildBodyParams() {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = new ApplicationUpdateLogoRequest();
            applicationUpdateLogoRequest._file(this._file);
            return applicationUpdateLogoRequest;
        }

        /**
         * Execute updateThemeFavicon request
         * @return ImageUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ImageUploadResponse execute() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            ApiResponse<ImageUploadResponse> localVarResp = updateThemeFaviconWithHttpInfo(brandId, themeId, applicationUpdateLogoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateThemeFavicon request with HTTP info returned
         * @return ApiResponse&lt;ImageUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageUploadResponse> executeWithHttpInfo() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeFaviconWithHttpInfo(brandId, themeId, applicationUpdateLogoRequest);
        }

        /**
         * Execute updateThemeFavicon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageUploadResponse> _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeFaviconAsync(brandId, themeId, applicationUpdateLogoRequest, _callback);
        }
    }

    /**
     * Updates the favicon for your theme
     * Updates the favicon for your theme
     * @param brandId  (required)
     * @param themeId  (required)
     * @param applicationUpdateLogoRequest  (required)
     * @return UpdateThemeFaviconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateThemeFaviconRequestBuilder updateThemeFavicon(File _file, String brandId, String themeId) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new UpdateThemeFaviconRequestBuilder(_file, brandId, themeId);
    }
    private okhttp3.Call updateThemeLogoCall(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationUpdateLogoRequest;

        // create path and map variables
        String localVarPath = "/api/v1/brands/{brandId}/themes/{themeId}/logo"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThemeLogoValidateBeforeCall(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateThemeLogo(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling updateThemeLogo(Async)");
        }

        // verify the required parameter 'applicationUpdateLogoRequest' is set
        if (applicationUpdateLogoRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateLogoRequest' when calling updateThemeLogo(Async)");
        }

        return updateThemeLogoCall(brandId, themeId, applicationUpdateLogoRequest, _callback);

    }


    private ApiResponse<ImageUploadResponse> updateThemeLogoWithHttpInfo(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateThemeLogoValidateBeforeCall(brandId, themeId, applicationUpdateLogoRequest, null);
        Type localVarReturnType = new TypeToken<ImageUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateThemeLogoAsync(String brandId, String themeId, ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback<ImageUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThemeLogoValidateBeforeCall(brandId, themeId, applicationUpdateLogoRequest, _callback);
        Type localVarReturnType = new TypeToken<ImageUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateThemeLogoRequestBuilder {
        private final File _file;
        private final String brandId;
        private final String themeId;

        private UpdateThemeLogoRequestBuilder(File _file, String brandId, String themeId) {
            this._file = _file;
            this.brandId = brandId;
            this.themeId = themeId;
        }

        /**
         * Build call for updateThemeLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeLogoCall(brandId, themeId, applicationUpdateLogoRequest, _callback);
        }

        private ApplicationUpdateLogoRequest buildBodyParams() {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = new ApplicationUpdateLogoRequest();
            applicationUpdateLogoRequest._file(this._file);
            return applicationUpdateLogoRequest;
        }

        /**
         * Execute updateThemeLogo request
         * @return ImageUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ImageUploadResponse execute() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            ApiResponse<ImageUploadResponse> localVarResp = updateThemeLogoWithHttpInfo(brandId, themeId, applicationUpdateLogoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateThemeLogo request with HTTP info returned
         * @return ApiResponse&lt;ImageUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageUploadResponse> executeWithHttpInfo() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeLogoWithHttpInfo(brandId, themeId, applicationUpdateLogoRequest);
        }

        /**
         * Execute updateThemeLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageUploadResponse> _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateThemeLogoAsync(brandId, themeId, applicationUpdateLogoRequest, _callback);
        }
    }

    /**
     * Update a themes logo
     * Updates the logo for your Theme
     * @param brandId  (required)
     * @param themeId  (required)
     * @param applicationUpdateLogoRequest  (required)
     * @return UpdateThemeLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateThemeLogoRequestBuilder updateThemeLogo(File _file, String brandId, String themeId) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (themeId == null) throw new IllegalArgumentException("\"themeId\" is required but got null");
            

        return new UpdateThemeLogoRequestBuilder(_file, brandId, themeId);
    }
}
