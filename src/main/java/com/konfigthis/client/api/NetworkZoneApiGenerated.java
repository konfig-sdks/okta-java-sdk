/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.NetworkZone;
import com.konfigthis.client.model.NetworkZoneAddress;
import com.konfigthis.client.model.NetworkZoneLocation;
import com.konfigthis.client.model.NetworkZoneStatus;
import com.konfigthis.client.model.NetworkZoneType;
import com.konfigthis.client.model.NetworkZoneUsage;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NetworkZoneApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkZoneApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkZoneApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zones/{zoneId}/lifecycle/activate"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling activateLifecycle(Async)");
        }

        return activateLifecycleCall(zoneId, _callback);

    }


    private ApiResponse<NetworkZone> activateLifecycleWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateLifecycleAsync(String zoneId, final ApiCallback<NetworkZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleRequestBuilder {
        private final String zoneId;

        private ActivateLifecycleRequestBuilder(String zoneId) {
            this.zoneId = zoneId;
        }

        /**
         * Build call for activateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleCall(zoneId, _callback);
        }


        /**
         * Execute activateLifecycle request
         * @return NetworkZone
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZone execute() throws ApiException {
            ApiResponse<NetworkZone> localVarResp = activateLifecycleWithHttpInfo(zoneId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;NetworkZone&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZone> executeWithHttpInfo() throws ApiException {
            return activateLifecycleWithHttpInfo(zoneId);
        }

        /**
         * Execute activateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZone> _callback) throws ApiException {
            return activateLifecycleAsync(zoneId, _callback);
        }
    }

    /**
     * Activate Network Zone
     * Activate Network Zone
     * @param zoneId  (required)
     * @return ActivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleRequestBuilder activateLifecycle(String zoneId) throws IllegalArgumentException {
        if (zoneId == null) throw new IllegalArgumentException("\"zoneId\" is required but got null");
            

        return new ActivateLifecycleRequestBuilder(zoneId);
    }
    private okhttp3.Call createNewCall(NetworkZone networkZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkZone;

        // create path and map variables
        String localVarPath = "/api/v1/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(NetworkZone networkZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkZone' is set
        if (networkZone == null) {
            throw new ApiException("Missing the required parameter 'networkZone' when calling createNew(Async)");
        }

        return createNewCall(networkZone, _callback);

    }


    private ApiResponse<NetworkZone> createNewWithHttpInfo(NetworkZone networkZone) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(networkZone, null);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(NetworkZone networkZone, final ApiCallback<NetworkZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(networkZone, _callback);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private Map<String, Object> links;
        private List<String> asns;
        private OffsetDateTime created;
        private List<NetworkZoneAddress> gateways;
        private String id;
        private OffsetDateTime lastUpdated;
        private List<NetworkZoneLocation> locations;
        private String name;
        private List<NetworkZoneAddress> proxies;
        private String proxyType;
        private NetworkZoneStatus status;
        private Boolean system;
        private NetworkZoneType type;
        private NetworkZoneUsage usage;

        private CreateNewRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set asns
         * @param asns  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder asns(List<String> asns) {
            this.asns = asns;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set gateways
         * @param gateways  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder gateways(List<NetworkZoneAddress> gateways) {
            this.gateways = gateways;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set locations
         * @param locations  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder locations(List<NetworkZoneLocation> locations) {
            this.locations = locations;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set proxies
         * @param proxies  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder proxies(List<NetworkZoneAddress> proxies) {
            this.proxies = proxies;
            return this;
        }
        
        /**
         * Set proxyType
         * @param proxyType  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder proxyType(String proxyType) {
            this.proxyType = proxyType;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder status(NetworkZoneStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder type(NetworkZoneType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder usage(NetworkZoneUsage usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            return createNewCall(networkZone, _callback);
        }

        private NetworkZone buildBodyParams() {
            NetworkZone networkZone = new NetworkZone();
            networkZone.links(this.links);
            networkZone.asns(this.asns);
            networkZone.created(this.created);
            networkZone.gateways(this.gateways);
            networkZone.id(this.id);
            networkZone.lastUpdated(this.lastUpdated);
            networkZone.locations(this.locations);
            networkZone.name(this.name);
            networkZone.proxies(this.proxies);
            networkZone.proxyType(this.proxyType);
            networkZone.status(this.status);
            networkZone.system(this.system);
            networkZone.type(this.type);
            networkZone.usage(this.usage);
            return networkZone;
        }

        /**
         * Execute createNew request
         * @return NetworkZone
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZone execute() throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            ApiResponse<NetworkZone> localVarResp = createNewWithHttpInfo(networkZone);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;NetworkZone&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZone> executeWithHttpInfo() throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            return createNewWithHttpInfo(networkZone);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZone> _callback) throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            return createNewAsync(networkZone, _callback);
        }
    }

    /**
     * Add Network Zone
     * Adds a new network zone to your Okta organization.
     * @param networkZone  (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew() throws IllegalArgumentException {
        return new CreateNewRequestBuilder();
    }
    private okhttp3.Call deactivateZoneLifecycleCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zones/{zoneId}/lifecycle/deactivate"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateZoneLifecycleValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deactivateZoneLifecycle(Async)");
        }

        return deactivateZoneLifecycleCall(zoneId, _callback);

    }


    private ApiResponse<NetworkZone> deactivateZoneLifecycleWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = deactivateZoneLifecycleValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateZoneLifecycleAsync(String zoneId, final ApiCallback<NetworkZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateZoneLifecycleValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateZoneLifecycleRequestBuilder {
        private final String zoneId;

        private DeactivateZoneLifecycleRequestBuilder(String zoneId) {
            this.zoneId = zoneId;
        }

        /**
         * Build call for deactivateZoneLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateZoneLifecycleCall(zoneId, _callback);
        }


        /**
         * Execute deactivateZoneLifecycle request
         * @return NetworkZone
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZone execute() throws ApiException {
            ApiResponse<NetworkZone> localVarResp = deactivateZoneLifecycleWithHttpInfo(zoneId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateZoneLifecycle request with HTTP info returned
         * @return ApiResponse&lt;NetworkZone&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZone> executeWithHttpInfo() throws ApiException {
            return deactivateZoneLifecycleWithHttpInfo(zoneId);
        }

        /**
         * Execute deactivateZoneLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZone> _callback) throws ApiException {
            return deactivateZoneLifecycleAsync(zoneId, _callback);
        }
    }

    /**
     * Deactivate Network Zone
     * Deactivates a network zone.
     * @param zoneId  (required)
     * @return DeactivateZoneLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateZoneLifecycleRequestBuilder deactivateZoneLifecycle(String zoneId) throws IllegalArgumentException {
        if (zoneId == null) throw new IllegalArgumentException("\"zoneId\" is required but got null");
            

        return new DeactivateZoneLifecycleRequestBuilder(zoneId);
    }
    private okhttp3.Call getByIdCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zones/{zoneId}"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getById(Async)");
        }

        return getByIdCall(zoneId, _callback);

    }


    private ApiResponse<NetworkZone> getByIdWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String zoneId, final ApiCallback<NetworkZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String zoneId;

        private GetByIdRequestBuilder(String zoneId) {
            this.zoneId = zoneId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(zoneId, _callback);
        }


        /**
         * Execute getById request
         * @return NetworkZone
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZone execute() throws ApiException {
            ApiResponse<NetworkZone> localVarResp = getByIdWithHttpInfo(zoneId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;NetworkZone&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZone> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(zoneId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZone> _callback) throws ApiException {
            return getByIdAsync(zoneId, _callback);
        }
    }

    /**
     * Get Network Zone
     * Fetches a network zone from your Okta organization by &#x60;id&#x60;.
     * @param zoneId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String zoneId) throws IllegalArgumentException {
        if (zoneId == null) throw new IllegalArgumentException("\"zoneId\" is required but got null");
            

        return new GetByIdRequestBuilder(zoneId);
    }
    private okhttp3.Call listZonesCall(String after, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZonesValidateBeforeCall(String after, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listZonesCall(after, limit, filter, _callback);

    }


    private ApiResponse<List<NetworkZone>> listZonesWithHttpInfo(String after, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listZonesValidateBeforeCall(after, limit, filter, null);
        Type localVarReturnType = new TypeToken<List<NetworkZone>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listZonesAsync(String after, Integer limit, String filter, final ApiCallback<List<NetworkZone>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZonesValidateBeforeCall(after, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkZone>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListZonesRequestBuilder {
        private String after;
        private Integer limit;
        private String filter;

        private ListZonesRequestBuilder() {
        }

        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of network zones (optional)
         * @return ListZonesRequestBuilder
         */
        public ListZonesRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of results for a page (optional, default to -1)
         * @return ListZonesRequestBuilder
         */
        public ListZonesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Filters zones by usage or id expression (optional)
         * @return ListZonesRequestBuilder
         */
        public ListZonesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listZones
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listZonesCall(after, limit, filter, _callback);
        }


        /**
         * Execute listZones request
         * @return List&lt;NetworkZone&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<NetworkZone> execute() throws ApiException {
            ApiResponse<List<NetworkZone>> localVarResp = listZonesWithHttpInfo(after, limit, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listZones request with HTTP info returned
         * @return ApiResponse&lt;List&lt;NetworkZone&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<NetworkZone>> executeWithHttpInfo() throws ApiException {
            return listZonesWithHttpInfo(after, limit, filter);
        }

        /**
         * Execute listZones request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<NetworkZone>> _callback) throws ApiException {
            return listZonesAsync(after, limit, filter, _callback);
        }
    }

    /**
     * List Network Zones
     * Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
     * @return ListZonesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListZonesRequestBuilder listZones() throws IllegalArgumentException {
        return new ListZonesRequestBuilder();
    }
    private okhttp3.Call removeZoneCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zones/{zoneId}"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeZoneValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling removeZone(Async)");
        }

        return removeZoneCall(zoneId, _callback);

    }


    private ApiResponse<Void> removeZoneWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = removeZoneValidateBeforeCall(zoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeZoneAsync(String zoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeZoneValidateBeforeCall(zoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveZoneRequestBuilder {
        private final String zoneId;

        private RemoveZoneRequestBuilder(String zoneId) {
            this.zoneId = zoneId;
        }

        /**
         * Build call for removeZone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeZoneCall(zoneId, _callback);
        }


        /**
         * Execute removeZone request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeZoneWithHttpInfo(zoneId);
        }

        /**
         * Execute removeZone request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeZoneWithHttpInfo(zoneId);
        }

        /**
         * Execute removeZone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeZoneAsync(zoneId, _callback);
        }
    }

    /**
     * Delete Network Zone
     * Removes network zone.
     * @param zoneId  (required)
     * @return RemoveZoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveZoneRequestBuilder removeZone(String zoneId) throws IllegalArgumentException {
        if (zoneId == null) throw new IllegalArgumentException("\"zoneId\" is required but got null");
            

        return new RemoveZoneRequestBuilder(zoneId);
    }
    private okhttp3.Call updateZoneCall(String zoneId, NetworkZone networkZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkZone;

        // create path and map variables
        String localVarPath = "/api/v1/zones/{zoneId}"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateZoneValidateBeforeCall(String zoneId, NetworkZone networkZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling updateZone(Async)");
        }

        // verify the required parameter 'networkZone' is set
        if (networkZone == null) {
            throw new ApiException("Missing the required parameter 'networkZone' when calling updateZone(Async)");
        }

        return updateZoneCall(zoneId, networkZone, _callback);

    }


    private ApiResponse<NetworkZone> updateZoneWithHttpInfo(String zoneId, NetworkZone networkZone) throws ApiException {
        okhttp3.Call localVarCall = updateZoneValidateBeforeCall(zoneId, networkZone, null);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateZoneAsync(String zoneId, NetworkZone networkZone, final ApiCallback<NetworkZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateZoneValidateBeforeCall(zoneId, networkZone, _callback);
        Type localVarReturnType = new TypeToken<NetworkZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateZoneRequestBuilder {
        private final String zoneId;
        private Map<String, Object> links;
        private List<String> asns;
        private OffsetDateTime created;
        private List<NetworkZoneAddress> gateways;
        private String id;
        private OffsetDateTime lastUpdated;
        private List<NetworkZoneLocation> locations;
        private String name;
        private List<NetworkZoneAddress> proxies;
        private String proxyType;
        private NetworkZoneStatus status;
        private Boolean system;
        private NetworkZoneType type;
        private NetworkZoneUsage usage;

        private UpdateZoneRequestBuilder(String zoneId) {
            this.zoneId = zoneId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set asns
         * @param asns  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder asns(List<String> asns) {
            this.asns = asns;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set gateways
         * @param gateways  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder gateways(List<NetworkZoneAddress> gateways) {
            this.gateways = gateways;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set locations
         * @param locations  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder locations(List<NetworkZoneLocation> locations) {
            this.locations = locations;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set proxies
         * @param proxies  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder proxies(List<NetworkZoneAddress> proxies) {
            this.proxies = proxies;
            return this;
        }
        
        /**
         * Set proxyType
         * @param proxyType  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder proxyType(String proxyType) {
            this.proxyType = proxyType;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder status(NetworkZoneStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder type(NetworkZoneType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdateZoneRequestBuilder
         */
        public UpdateZoneRequestBuilder usage(NetworkZoneUsage usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Build call for updateZone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            return updateZoneCall(zoneId, networkZone, _callback);
        }

        private NetworkZone buildBodyParams() {
            NetworkZone networkZone = new NetworkZone();
            networkZone.links(this.links);
            networkZone.asns(this.asns);
            networkZone.created(this.created);
            networkZone.gateways(this.gateways);
            networkZone.id(this.id);
            networkZone.lastUpdated(this.lastUpdated);
            networkZone.locations(this.locations);
            networkZone.name(this.name);
            networkZone.proxies(this.proxies);
            networkZone.proxyType(this.proxyType);
            networkZone.status(this.status);
            networkZone.system(this.system);
            networkZone.type(this.type);
            networkZone.usage(this.usage);
            return networkZone;
        }

        /**
         * Execute updateZone request
         * @return NetworkZone
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NetworkZone execute() throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            ApiResponse<NetworkZone> localVarResp = updateZoneWithHttpInfo(zoneId, networkZone);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateZone request with HTTP info returned
         * @return ApiResponse&lt;NetworkZone&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NetworkZone> executeWithHttpInfo() throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            return updateZoneWithHttpInfo(zoneId, networkZone);
        }

        /**
         * Execute updateZone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NetworkZone> _callback) throws ApiException {
            NetworkZone networkZone = buildBodyParams();
            return updateZoneAsync(zoneId, networkZone, _callback);
        }
    }

    /**
     * Update Network Zone
     * Updates a network zone in your organization.
     * @param zoneId  (required)
     * @param networkZone  (required)
     * @return UpdateZoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateZoneRequestBuilder updateZone(String zoneId) throws IllegalArgumentException {
        if (zoneId == null) throw new IllegalArgumentException("\"zoneId\" is required but got null");
            

        return new UpdateZoneRequestBuilder(zoneId);
    }
}
