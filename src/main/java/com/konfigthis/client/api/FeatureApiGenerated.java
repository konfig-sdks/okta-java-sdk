/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Feature;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FeatureApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeatureApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FeatureApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLifecycleSuccessCall(String featureId, String lifecycle, String mode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/features/{featureId}/{lifecycle}"
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()))
            .replace("{" + "lifecycle" + "}", localVarApiClient.escapeString(lifecycle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLifecycleSuccessValidateBeforeCall(String featureId, String lifecycle, String mode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling createLifecycleSuccess(Async)");
        }

        // verify the required parameter 'lifecycle' is set
        if (lifecycle == null) {
            throw new ApiException("Missing the required parameter 'lifecycle' when calling createLifecycleSuccess(Async)");
        }

        return createLifecycleSuccessCall(featureId, lifecycle, mode, _callback);

    }


    private ApiResponse<Feature> createLifecycleSuccessWithHttpInfo(String featureId, String lifecycle, String mode) throws ApiException {
        okhttp3.Call localVarCall = createLifecycleSuccessValidateBeforeCall(featureId, lifecycle, mode, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLifecycleSuccessAsync(String featureId, String lifecycle, String mode, final ApiCallback<Feature> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLifecycleSuccessValidateBeforeCall(featureId, lifecycle, mode, _callback);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLifecycleSuccessRequestBuilder {
        private final String featureId;
        private final String lifecycle;
        private String mode;

        private CreateLifecycleSuccessRequestBuilder(String featureId, String lifecycle) {
            this.featureId = featureId;
            this.lifecycle = lifecycle;
        }

        /**
         * Set mode
         * @param mode  (optional)
         * @return CreateLifecycleSuccessRequestBuilder
         */
        public CreateLifecycleSuccessRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Build call for createLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createLifecycleSuccessCall(featureId, lifecycle, mode, _callback);
        }


        /**
         * Execute createLifecycleSuccess request
         * @return Feature
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Feature execute() throws ApiException {
            ApiResponse<Feature> localVarResp = createLifecycleSuccessWithHttpInfo(featureId, lifecycle, mode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;Feature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Feature> executeWithHttpInfo() throws ApiException {
            return createLifecycleSuccessWithHttpInfo(featureId, lifecycle, mode);
        }

        /**
         * Execute createLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Feature> _callback) throws ApiException {
            return createLifecycleSuccessAsync(featureId, lifecycle, mode, _callback);
        }
    }

    /**
     * 
     * Success
     * @param featureId  (required)
     * @param lifecycle  (required)
     * @return CreateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateLifecycleSuccessRequestBuilder createLifecycleSuccess(String featureId, String lifecycle) throws IllegalArgumentException {
        if (featureId == null) throw new IllegalArgumentException("\"featureId\" is required but got null");
            

        if (lifecycle == null) throw new IllegalArgumentException("\"lifecycle\" is required but got null");
            

        return new CreateLifecycleSuccessRequestBuilder(featureId, lifecycle);
    }
    private okhttp3.Call getSuccessCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuccessValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSuccessCall(_callback);

    }


    private ApiResponse<List<Feature>> getSuccessWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSuccessValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuccessAsync(final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuccessValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuccessRequestBuilder {

        private GetSuccessRequestBuilder() {
        }

        /**
         * Build call for getSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSuccessCall(_callback);
        }


        /**
         * Execute getSuccess request
         * @return List&lt;Feature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Feature> execute() throws ApiException {
            ApiResponse<List<Feature>> localVarResp = getSuccessWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuccess request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Feature>> executeWithHttpInfo() throws ApiException {
            return getSuccessWithHttpInfo();
        }

        /**
         * Execute getSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Feature>> _callback) throws ApiException {
            return getSuccessAsync(_callback);
        }
    }

    /**
     * 
     * Success
     * @return GetSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSuccessRequestBuilder getSuccess() throws IllegalArgumentException {
        return new GetSuccessRequestBuilder();
    }
    private okhttp3.Call getSuccessByIdCall(String featureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/features/{featureId}"
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuccessByIdValidateBeforeCall(String featureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getSuccessById(Async)");
        }

        return getSuccessByIdCall(featureId, _callback);

    }


    private ApiResponse<Feature> getSuccessByIdWithHttpInfo(String featureId) throws ApiException {
        okhttp3.Call localVarCall = getSuccessByIdValidateBeforeCall(featureId, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuccessByIdAsync(String featureId, final ApiCallback<Feature> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuccessByIdValidateBeforeCall(featureId, _callback);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuccessByIdRequestBuilder {
        private final String featureId;

        private GetSuccessByIdRequestBuilder(String featureId) {
            this.featureId = featureId;
        }

        /**
         * Build call for getSuccessById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSuccessByIdCall(featureId, _callback);
        }


        /**
         * Execute getSuccessById request
         * @return Feature
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Feature execute() throws ApiException {
            ApiResponse<Feature> localVarResp = getSuccessByIdWithHttpInfo(featureId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuccessById request with HTTP info returned
         * @return ApiResponse&lt;Feature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Feature> executeWithHttpInfo() throws ApiException {
            return getSuccessByIdWithHttpInfo(featureId);
        }

        /**
         * Execute getSuccessById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Feature> _callback) throws ApiException {
            return getSuccessByIdAsync(featureId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param featureId  (required)
     * @return GetSuccessByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSuccessByIdRequestBuilder getSuccessById(String featureId) throws IllegalArgumentException {
        if (featureId == null) throw new IllegalArgumentException("\"featureId\" is required but got null");
            

        return new GetSuccessByIdRequestBuilder(featureId);
    }
    private okhttp3.Call listDependenciesCall(String featureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/features/{featureId}/dependencies"
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDependenciesValidateBeforeCall(String featureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling listDependencies(Async)");
        }

        return listDependenciesCall(featureId, _callback);

    }


    private ApiResponse<List<Feature>> listDependenciesWithHttpInfo(String featureId) throws ApiException {
        okhttp3.Call localVarCall = listDependenciesValidateBeforeCall(featureId, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDependenciesAsync(String featureId, final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDependenciesValidateBeforeCall(featureId, _callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDependenciesRequestBuilder {
        private final String featureId;

        private ListDependenciesRequestBuilder(String featureId) {
            this.featureId = featureId;
        }

        /**
         * Build call for listDependencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDependenciesCall(featureId, _callback);
        }


        /**
         * Execute listDependencies request
         * @return List&lt;Feature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Feature> execute() throws ApiException {
            ApiResponse<List<Feature>> localVarResp = listDependenciesWithHttpInfo(featureId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDependencies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Feature>> executeWithHttpInfo() throws ApiException {
            return listDependenciesWithHttpInfo(featureId);
        }

        /**
         * Execute listDependencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Feature>> _callback) throws ApiException {
            return listDependenciesAsync(featureId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param featureId  (required)
     * @return ListDependenciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListDependenciesRequestBuilder listDependencies(String featureId) throws IllegalArgumentException {
        if (featureId == null) throw new IllegalArgumentException("\"featureId\" is required but got null");
            

        return new ListDependenciesRequestBuilder(featureId);
    }
    private okhttp3.Call listDependentsCall(String featureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/features/{featureId}/dependents"
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDependentsValidateBeforeCall(String featureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling listDependents(Async)");
        }

        return listDependentsCall(featureId, _callback);

    }


    private ApiResponse<List<Feature>> listDependentsWithHttpInfo(String featureId) throws ApiException {
        okhttp3.Call localVarCall = listDependentsValidateBeforeCall(featureId, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDependentsAsync(String featureId, final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDependentsValidateBeforeCall(featureId, _callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDependentsRequestBuilder {
        private final String featureId;

        private ListDependentsRequestBuilder(String featureId) {
            this.featureId = featureId;
        }

        /**
         * Build call for listDependents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDependentsCall(featureId, _callback);
        }


        /**
         * Execute listDependents request
         * @return List&lt;Feature&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Feature> execute() throws ApiException {
            ApiResponse<List<Feature>> localVarResp = listDependentsWithHttpInfo(featureId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDependents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Feature>> executeWithHttpInfo() throws ApiException {
            return listDependentsWithHttpInfo(featureId);
        }

        /**
         * Execute listDependents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Feature>> _callback) throws ApiException {
            return listDependentsAsync(featureId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param featureId  (required)
     * @return ListDependentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListDependentsRequestBuilder listDependents(String featureId) throws IllegalArgumentException {
        if (featureId == null) throw new IllegalArgumentException("\"featureId\" is required but got null");
            

        return new ListDependentsRequestBuilder(featureId);
    }
}
