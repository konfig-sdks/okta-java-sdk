/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.Policy;
import com.konfigthis.client.model.PolicyRule;
import com.konfigthis.client.model.PolicyRuleActions;
import com.konfigthis.client.model.PolicyRuleConditions;
import com.konfigthis.client.model.PolicyType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PolicyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleCall(String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/lifecycle/activate"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleValidateBeforeCall(String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling activateLifecycle(Async)");
        }

        return activateLifecycleCall(policyId, _callback);

    }


    private ApiResponse<Void> activateLifecycleWithHttpInfo(String policyId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activateLifecycleAsync(String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleRequestBuilder {
        private final String policyId;

        private ActivateLifecycleRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Build call for activateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleCall(policyId, _callback);
        }


        /**
         * Execute activateLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activateLifecycleWithHttpInfo(policyId);
        }

        /**
         * Execute activateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activateLifecycleWithHttpInfo(policyId);
        }

        /**
         * Execute activateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activateLifecycleAsync(policyId, _callback);
        }
    }

    /**
     * 
     * Activates a policy.
     * @param policyId  (required)
     * @return ActivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleRequestBuilder activateLifecycle(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new ActivateLifecycleRequestBuilder(policyId);
    }
    private okhttp3.Call activateRuleLifecycleCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateRuleLifecycleValidateBeforeCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling activateRuleLifecycle(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling activateRuleLifecycle(Async)");
        }

        return activateRuleLifecycleCall(policyId, ruleId, _callback);

    }


    private ApiResponse<Void> activateRuleLifecycleWithHttpInfo(String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = activateRuleLifecycleValidateBeforeCall(policyId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activateRuleLifecycleAsync(String policyId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateRuleLifecycleValidateBeforeCall(policyId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivateRuleLifecycleRequestBuilder {
        private final String policyId;
        private final String ruleId;

        private ActivateRuleLifecycleRequestBuilder(String policyId, String ruleId) {
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for activateRuleLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateRuleLifecycleCall(policyId, ruleId, _callback);
        }


        /**
         * Execute activateRuleLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activateRuleLifecycleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute activateRuleLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activateRuleLifecycleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute activateRuleLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activateRuleLifecycleAsync(policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Activates a policy rule.
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return ActivateRuleLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateRuleLifecycleRequestBuilder activateRuleLifecycle(String policyId, String ruleId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new ActivateRuleLifecycleRequestBuilder(policyId, ruleId);
    }
    private okhttp3.Call createNewPolicyCall(Policy policy, Boolean activate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/api/v1/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPolicyValidateBeforeCall(Policy policy, Boolean activate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling createNewPolicy(Async)");
        }

        return createNewPolicyCall(policy, activate, _callback);

    }


    private ApiResponse<Policy> createNewPolicyWithHttpInfo(Policy policy, Boolean activate) throws ApiException {
        okhttp3.Call localVarCall = createNewPolicyValidateBeforeCall(policy, activate, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPolicyAsync(Policy policy, Boolean activate, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPolicyValidateBeforeCall(policy, activate, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPolicyRequestBuilder {
        private String description;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private PolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private PolicyType type;
        private Boolean activate;

        private CreateNewPolicyRequestBuilder() {
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set embedded
         * @param embedded  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder conditions(PolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder type(PolicyType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set activate
         * @param activate  (optional, default to true)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder activate(Boolean activate) {
            this.activate = activate;
            return this;
        }
        
        /**
         * Build call for createNewPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Policy policy = buildBodyParams();
            return createNewPolicyCall(policy, activate, _callback);
        }

        private Policy buildBodyParams() {
            Policy policy = new Policy();
            policy.description(this.description);
            policy.embedded(this.embedded);
            policy.links(this.links);
            policy.conditions(this.conditions);
            policy.created(this.created);
            policy.id(this.id);
            policy.lastUpdated(this.lastUpdated);
            policy.name(this.name);
            policy.priority(this.priority);
            if (this.status != null)
            policy.status(Policy.StatusEnum.fromValue(this.status));
            policy.system(this.system);
            policy.type(this.type);
            return policy;
        }

        /**
         * Execute createNewPolicy request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            Policy policy = buildBodyParams();
            ApiResponse<Policy> localVarResp = createNewPolicyWithHttpInfo(policy, activate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPolicy request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            Policy policy = buildBodyParams();
            return createNewPolicyWithHttpInfo(policy, activate);
        }

        /**
         * Execute createNewPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            Policy policy = buildBodyParams();
            return createNewPolicyAsync(policy, activate, _callback);
        }
    }

    /**
     * 
     * Creates a policy.
     * @param policy  (required)
     * @return CreateNewPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPolicyRequestBuilder createNewPolicy() throws IllegalArgumentException {
        return new CreateNewPolicyRequestBuilder();
    }
    private okhttp3.Call createRuleCall(String policyId, PolicyRule policyRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyRule;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRuleValidateBeforeCall(String policyId, PolicyRule policyRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling createRule(Async)");
        }

        // verify the required parameter 'policyRule' is set
        if (policyRule == null) {
            throw new ApiException("Missing the required parameter 'policyRule' when calling createRule(Async)");
        }

        return createRuleCall(policyId, policyRule, _callback);

    }


    private ApiResponse<PolicyRule> createRuleWithHttpInfo(String policyId, PolicyRule policyRule) throws ApiException {
        okhttp3.Call localVarCall = createRuleValidateBeforeCall(policyId, policyRule, null);
        Type localVarReturnType = new TypeToken<PolicyRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRuleAsync(String policyId, PolicyRule policyRule, final ApiCallback<PolicyRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRuleValidateBeforeCall(policyId, policyRule, _callback);
        Type localVarReturnType = new TypeToken<PolicyRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRuleRequestBuilder {
        private final String policyId;
        private PolicyRuleActions actions;
        private PolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private String type;

        private CreateRuleRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Set actions
         * @param actions  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder actions(PolicyRuleActions actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder conditions(PolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional, default to ACTIVE)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional, default to false)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateRuleRequestBuilder
         */
        public CreateRuleRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            return createRuleCall(policyId, policyRule, _callback);
        }

        private PolicyRule buildBodyParams() {
            PolicyRule policyRule = new PolicyRule();
            policyRule.actions(this.actions);
            policyRule.conditions(this.conditions);
            policyRule.created(this.created);
            policyRule.id(this.id);
            policyRule.lastUpdated(this.lastUpdated);
            policyRule.name(this.name);
            policyRule.priority(this.priority);
            if (this.status != null)
            policyRule.status(PolicyRule.StatusEnum.fromValue(this.status));
            policyRule.system(this.system);
            if (this.type != null)
            policyRule.type(PolicyRule.TypeEnum.fromValue(this.type));
            return policyRule;
        }

        /**
         * Execute createRule request
         * @return PolicyRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PolicyRule execute() throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            ApiResponse<PolicyRule> localVarResp = createRuleWithHttpInfo(policyId, policyRule);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRule request with HTTP info returned
         * @return ApiResponse&lt;PolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyRule> executeWithHttpInfo() throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            return createRuleWithHttpInfo(policyId, policyRule);
        }

        /**
         * Execute createRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyRule> _callback) throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            return createRuleAsync(policyId, policyRule, _callback);
        }
    }

    /**
     * 
     * Creates a policy rule.
     * @param policyId  (required)
     * @param policyRule  (required)
     * @return CreateRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateRuleRequestBuilder createRule(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new CreateRuleRequestBuilder(policyId);
    }
    private okhttp3.Call deactivateLifecycleCall(String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/lifecycle/deactivate"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleValidateBeforeCall(String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deactivateLifecycle(Async)");
        }

        return deactivateLifecycleCall(policyId, _callback);

    }


    private ApiResponse<Void> deactivateLifecycleWithHttpInfo(String policyId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateLifecycleAsync(String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleRequestBuilder {
        private final String policyId;

        private DeactivateLifecycleRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Build call for deactivateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleCall(policyId, _callback);
        }


        /**
         * Execute deactivateLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateLifecycleWithHttpInfo(policyId);
        }

        /**
         * Execute deactivateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleWithHttpInfo(policyId);
        }

        /**
         * Execute deactivateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateLifecycleAsync(policyId, _callback);
        }
    }

    /**
     * 
     * Deactivates a policy.
     * @param policyId  (required)
     * @return DeactivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleRequestBuilder deactivateLifecycle(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new DeactivateLifecycleRequestBuilder(policyId);
    }
    private okhttp3.Call deactivateRuleLifecycleCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateRuleLifecycleValidateBeforeCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deactivateRuleLifecycle(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deactivateRuleLifecycle(Async)");
        }

        return deactivateRuleLifecycleCall(policyId, ruleId, _callback);

    }


    private ApiResponse<Void> deactivateRuleLifecycleWithHttpInfo(String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = deactivateRuleLifecycleValidateBeforeCall(policyId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateRuleLifecycleAsync(String policyId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateRuleLifecycleValidateBeforeCall(policyId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateRuleLifecycleRequestBuilder {
        private final String policyId;
        private final String ruleId;

        private DeactivateRuleLifecycleRequestBuilder(String policyId, String ruleId) {
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for deactivateRuleLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateRuleLifecycleCall(policyId, ruleId, _callback);
        }


        /**
         * Execute deactivateRuleLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateRuleLifecycleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute deactivateRuleLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateRuleLifecycleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute deactivateRuleLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateRuleLifecycleAsync(policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Deactivates a policy rule.
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return DeactivateRuleLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateRuleLifecycleRequestBuilder deactivateRuleLifecycle(String policyId, String ruleId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new DeactivateRuleLifecycleRequestBuilder(policyId, ruleId);
    }
    private okhttp3.Call enumerateRulesCall(String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateRulesValidateBeforeCall(String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling enumerateRules(Async)");
        }

        return enumerateRulesCall(policyId, _callback);

    }


    private ApiResponse<List<PolicyRule>> enumerateRulesWithHttpInfo(String policyId) throws ApiException {
        okhttp3.Call localVarCall = enumerateRulesValidateBeforeCall(policyId, null);
        Type localVarReturnType = new TypeToken<List<PolicyRule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateRulesAsync(String policyId, final ApiCallback<List<PolicyRule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateRulesValidateBeforeCall(policyId, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyRule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateRulesRequestBuilder {
        private final String policyId;

        private EnumerateRulesRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Build call for enumerateRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateRulesCall(policyId, _callback);
        }


        /**
         * Execute enumerateRules request
         * @return List&lt;PolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<PolicyRule> execute() throws ApiException {
            ApiResponse<List<PolicyRule>> localVarResp = enumerateRulesWithHttpInfo(policyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateRules request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PolicyRule&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PolicyRule>> executeWithHttpInfo() throws ApiException {
            return enumerateRulesWithHttpInfo(policyId);
        }

        /**
         * Execute enumerateRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PolicyRule>> _callback) throws ApiException {
            return enumerateRulesAsync(policyId, _callback);
        }
    }

    /**
     * 
     * Enumerates all policy rules.
     * @param policyId  (required)
     * @return EnumerateRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateRulesRequestBuilder enumerateRules(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new EnumerateRulesRequestBuilder(policyId);
    }
    private okhttp3.Call getAllWithTypeCall(String type, String status, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllWithTypeValidateBeforeCall(String type, String status, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getAllWithType(Async)");
        }

        return getAllWithTypeCall(type, status, expand, _callback);

    }


    private ApiResponse<List<Policy>> getAllWithTypeWithHttpInfo(String type, String status, String expand) throws ApiException {
        okhttp3.Call localVarCall = getAllWithTypeValidateBeforeCall(type, status, expand, null);
        Type localVarReturnType = new TypeToken<List<Policy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllWithTypeAsync(String type, String status, String expand, final ApiCallback<List<Policy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllWithTypeValidateBeforeCall(type, status, expand, _callback);
        Type localVarReturnType = new TypeToken<List<Policy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllWithTypeRequestBuilder {
        private final String type;
        private String status;
        private String expand;

        private GetAllWithTypeRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set status
         * @param status  (optional)
         * @return GetAllWithTypeRequestBuilder
         */
        public GetAllWithTypeRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional, default to )
         * @return GetAllWithTypeRequestBuilder
         */
        public GetAllWithTypeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getAllWithType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllWithTypeCall(type, status, expand, _callback);
        }


        /**
         * Execute getAllWithType request
         * @return List&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Policy> execute() throws ApiException {
            ApiResponse<List<Policy>> localVarResp = getAllWithTypeWithHttpInfo(type, status, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllWithType request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Policy&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Policy>> executeWithHttpInfo() throws ApiException {
            return getAllWithTypeWithHttpInfo(type, status, expand);
        }

        /**
         * Execute getAllWithType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Policy>> _callback) throws ApiException {
            return getAllWithTypeAsync(type, status, expand, _callback);
        }
    }

    /**
     * 
     * Gets all policies with the specified type.
     * @param type  (required)
     * @return GetAllWithTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAllWithTypeRequestBuilder getAllWithType(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetAllWithTypeRequestBuilder(type);
    }
    private okhttp3.Call getPolicyCall(String policyId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String policyId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getPolicy(Async)");
        }

        return getPolicyCall(policyId, expand, _callback);

    }


    private ApiResponse<Policy> getPolicyWithHttpInfo(String policyId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(policyId, expand, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyAsync(String policyId, String expand, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(policyId, expand, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyRequestBuilder {
        private final String policyId;
        private String expand;

        private GetPolicyRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Set expand
         * @param expand  (optional, default to )
         * @return GetPolicyRequestBuilder
         */
        public GetPolicyRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyCall(policyId, expand, _callback);
        }


        /**
         * Execute getPolicy request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            ApiResponse<Policy> localVarResp = getPolicyWithHttpInfo(policyId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicy request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            return getPolicyWithHttpInfo(policyId, expand);
        }

        /**
         * Execute getPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            return getPolicyAsync(policyId, expand, _callback);
        }
    }

    /**
     * 
     * Gets a policy.
     * @param policyId  (required)
     * @return GetPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyRequestBuilder getPolicy(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new GetPolicyRequestBuilder(policyId);
    }
    private okhttp3.Call getPolicyRuleCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules/{ruleId}"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyRuleValidateBeforeCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getPolicyRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getPolicyRule(Async)");
        }

        return getPolicyRuleCall(policyId, ruleId, _callback);

    }


    private ApiResponse<PolicyRule> getPolicyRuleWithHttpInfo(String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = getPolicyRuleValidateBeforeCall(policyId, ruleId, null);
        Type localVarReturnType = new TypeToken<PolicyRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyRuleAsync(String policyId, String ruleId, final ApiCallback<PolicyRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyRuleValidateBeforeCall(policyId, ruleId, _callback);
        Type localVarReturnType = new TypeToken<PolicyRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyRuleRequestBuilder {
        private final String policyId;
        private final String ruleId;

        private GetPolicyRuleRequestBuilder(String policyId, String ruleId) {
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for getPolicyRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyRuleCall(policyId, ruleId, _callback);
        }


        /**
         * Execute getPolicyRule request
         * @return PolicyRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PolicyRule execute() throws ApiException {
            ApiResponse<PolicyRule> localVarResp = getPolicyRuleWithHttpInfo(policyId, ruleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyRule request with HTTP info returned
         * @return ApiResponse&lt;PolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyRule> executeWithHttpInfo() throws ApiException {
            return getPolicyRuleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute getPolicyRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyRule> _callback) throws ApiException {
            return getPolicyRuleAsync(policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Gets a policy rule.
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return GetPolicyRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyRuleRequestBuilder getPolicyRule(String policyId, String ruleId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new GetPolicyRuleRequestBuilder(policyId, ruleId);
    }
    private okhttp3.Call removePolicyOperationCall(String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePolicyOperationValidateBeforeCall(String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling removePolicyOperation(Async)");
        }

        return removePolicyOperationCall(policyId, _callback);

    }


    private ApiResponse<Void> removePolicyOperationWithHttpInfo(String policyId) throws ApiException {
        okhttp3.Call localVarCall = removePolicyOperationValidateBeforeCall(policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePolicyOperationAsync(String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePolicyOperationValidateBeforeCall(policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePolicyOperationRequestBuilder {
        private final String policyId;

        private RemovePolicyOperationRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Build call for removePolicyOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePolicyOperationCall(policyId, _callback);
        }


        /**
         * Execute removePolicyOperation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePolicyOperationWithHttpInfo(policyId);
        }

        /**
         * Execute removePolicyOperation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePolicyOperationWithHttpInfo(policyId);
        }

        /**
         * Execute removePolicyOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePolicyOperationAsync(policyId, _callback);
        }
    }

    /**
     * 
     * Removes a policy.
     * @param policyId  (required)
     * @return RemovePolicyOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemovePolicyOperationRequestBuilder removePolicyOperation(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new RemovePolicyOperationRequestBuilder(policyId);
    }
    private okhttp3.Call removeRuleCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules/{ruleId}"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRuleValidateBeforeCall(String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling removeRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling removeRule(Async)");
        }

        return removeRuleCall(policyId, ruleId, _callback);

    }


    private ApiResponse<Void> removeRuleWithHttpInfo(String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = removeRuleValidateBeforeCall(policyId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeRuleAsync(String policyId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRuleValidateBeforeCall(policyId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRuleRequestBuilder {
        private final String policyId;
        private final String ruleId;

        private RemoveRuleRequestBuilder(String policyId, String ruleId) {
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for removeRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeRuleCall(policyId, ruleId, _callback);
        }


        /**
         * Execute removeRule request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeRuleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute removeRule request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeRuleWithHttpInfo(policyId, ruleId);
        }

        /**
         * Execute removeRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeRuleAsync(policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Removes a policy rule.
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return RemoveRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRuleRequestBuilder removeRule(String policyId, String ruleId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new RemoveRuleRequestBuilder(policyId, ruleId);
    }
    private okhttp3.Call updateOperationCall(String policyId, Policy policy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOperationValidateBeforeCall(String policyId, Policy policy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling updateOperation(Async)");
        }

        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling updateOperation(Async)");
        }

        return updateOperationCall(policyId, policy, _callback);

    }


    private ApiResponse<Policy> updateOperationWithHttpInfo(String policyId, Policy policy) throws ApiException {
        okhttp3.Call localVarCall = updateOperationValidateBeforeCall(policyId, policy, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOperationAsync(String policyId, Policy policy, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOperationValidateBeforeCall(policyId, policy, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOperationRequestBuilder {
        private final String policyId;
        private String description;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private PolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private PolicyType type;

        private UpdateOperationRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder conditions(PolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateOperationRequestBuilder
         */
        public UpdateOperationRequestBuilder type(PolicyType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Policy policy = buildBodyParams();
            return updateOperationCall(policyId, policy, _callback);
        }

        private Policy buildBodyParams() {
            Policy policy = new Policy();
            policy.description(this.description);
            policy.embedded(this.embedded);
            policy.links(this.links);
            policy.conditions(this.conditions);
            policy.created(this.created);
            policy.id(this.id);
            policy.lastUpdated(this.lastUpdated);
            policy.name(this.name);
            policy.priority(this.priority);
            if (this.status != null)
            policy.status(Policy.StatusEnum.fromValue(this.status));
            policy.system(this.system);
            policy.type(this.type);
            return policy;
        }

        /**
         * Execute updateOperation request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            Policy policy = buildBodyParams();
            ApiResponse<Policy> localVarResp = updateOperationWithHttpInfo(policyId, policy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOperation request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            Policy policy = buildBodyParams();
            return updateOperationWithHttpInfo(policyId, policy);
        }

        /**
         * Execute updateOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            Policy policy = buildBodyParams();
            return updateOperationAsync(policyId, policy, _callback);
        }
    }

    /**
     * 
     * Updates a policy.
     * @param policyId  (required)
     * @param policy  (required)
     * @return UpdateOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOperationRequestBuilder updateOperation(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new UpdateOperationRequestBuilder(policyId);
    }
    private okhttp3.Call updateRuleCall(String policyId, String ruleId, PolicyRule policyRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyRule;

        // create path and map variables
        String localVarPath = "/api/v1/policies/{policyId}/rules/{ruleId}"
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleValidateBeforeCall(String policyId, String ruleId, PolicyRule policyRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling updateRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }

        // verify the required parameter 'policyRule' is set
        if (policyRule == null) {
            throw new ApiException("Missing the required parameter 'policyRule' when calling updateRule(Async)");
        }

        return updateRuleCall(policyId, ruleId, policyRule, _callback);

    }


    private ApiResponse<PolicyRule> updateRuleWithHttpInfo(String policyId, String ruleId, PolicyRule policyRule) throws ApiException {
        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(policyId, ruleId, policyRule, null);
        Type localVarReturnType = new TypeToken<PolicyRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRuleAsync(String policyId, String ruleId, PolicyRule policyRule, final ApiCallback<PolicyRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(policyId, ruleId, policyRule, _callback);
        Type localVarReturnType = new TypeToken<PolicyRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRuleRequestBuilder {
        private final String policyId;
        private final String ruleId;
        private PolicyRuleActions actions;
        private PolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private String type;

        private UpdateRuleRequestBuilder(String policyId, String ruleId) {
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Set actions
         * @param actions  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder actions(PolicyRuleActions actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder conditions(PolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional, default to ACTIVE)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional, default to false)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            return updateRuleCall(policyId, ruleId, policyRule, _callback);
        }

        private PolicyRule buildBodyParams() {
            PolicyRule policyRule = new PolicyRule();
            policyRule.actions(this.actions);
            policyRule.conditions(this.conditions);
            policyRule.created(this.created);
            policyRule.id(this.id);
            policyRule.lastUpdated(this.lastUpdated);
            policyRule.name(this.name);
            policyRule.priority(this.priority);
            if (this.status != null)
            policyRule.status(PolicyRule.StatusEnum.fromValue(this.status));
            policyRule.system(this.system);
            if (this.type != null)
            policyRule.type(PolicyRule.TypeEnum.fromValue(this.type));
            return policyRule;
        }

        /**
         * Execute updateRule request
         * @return PolicyRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PolicyRule execute() throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            ApiResponse<PolicyRule> localVarResp = updateRuleWithHttpInfo(policyId, ruleId, policyRule);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRule request with HTTP info returned
         * @return ApiResponse&lt;PolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyRule> executeWithHttpInfo() throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            return updateRuleWithHttpInfo(policyId, ruleId, policyRule);
        }

        /**
         * Execute updateRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyRule> _callback) throws ApiException {
            PolicyRule policyRule = buildBodyParams();
            return updateRuleAsync(policyId, ruleId, policyRule, _callback);
        }
    }

    /**
     * 
     * Updates a policy rule.
     * @param policyId  (required)
     * @param ruleId  (required)
     * @param policyRule  (required)
     * @return UpdateRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRuleRequestBuilder updateRule(String policyId, String ruleId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new UpdateRuleRequestBuilder(policyId, ruleId);
    }
}
