/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EventHook;
import com.konfigthis.client.model.EventHookChannel;
import com.konfigthis.client.model.EventSubscriptions;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventHookApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventHookApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventHookApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleSuccessCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks/{eventHookId}/lifecycle/activate"
            .replace("{" + "eventHookId" + "}", localVarApiClient.escapeString(eventHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleSuccessValidateBeforeCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHookId' is set
        if (eventHookId == null) {
            throw new ApiException("Missing the required parameter 'eventHookId' when calling activateLifecycleSuccess(Async)");
        }

        return activateLifecycleSuccessCall(eventHookId, _callback);

    }


    private ApiResponse<EventHook> activateLifecycleSuccessWithHttpInfo(String eventHookId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(eventHookId, null);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateLifecycleSuccessAsync(String eventHookId, final ApiCallback<EventHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(eventHookId, _callback);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleSuccessRequestBuilder {
        private final String eventHookId;

        private ActivateLifecycleSuccessRequestBuilder(String eventHookId) {
            this.eventHookId = eventHookId;
        }

        /**
         * Build call for activateLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleSuccessCall(eventHookId, _callback);
        }


        /**
         * Execute activateLifecycleSuccess request
         * @return EventHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EventHook execute() throws ApiException {
            ApiResponse<EventHook> localVarResp = activateLifecycleSuccessWithHttpInfo(eventHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventHook> executeWithHttpInfo() throws ApiException {
            return activateLifecycleSuccessWithHttpInfo(eventHookId);
        }

        /**
         * Execute activateLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventHook> _callback) throws ApiException {
            return activateLifecycleSuccessAsync(eventHookId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHookId  (required)
     * @return ActivateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleSuccessRequestBuilder activateLifecycleSuccess(String eventHookId) throws IllegalArgumentException {
        if (eventHookId == null) throw new IllegalArgumentException("\"eventHookId\" is required but got null");
            

        return new ActivateLifecycleSuccessRequestBuilder(eventHookId);
    }
    private okhttp3.Call createSuccessCall(EventHook eventHook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventHook;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSuccessValidateBeforeCall(EventHook eventHook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHook' is set
        if (eventHook == null) {
            throw new ApiException("Missing the required parameter 'eventHook' when calling createSuccess(Async)");
        }

        return createSuccessCall(eventHook, _callback);

    }


    private ApiResponse<EventHook> createSuccessWithHttpInfo(EventHook eventHook) throws ApiException {
        okhttp3.Call localVarCall = createSuccessValidateBeforeCall(eventHook, null);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSuccessAsync(EventHook eventHook, final ApiCallback<EventHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSuccessValidateBeforeCall(eventHook, _callback);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSuccessRequestBuilder {
        private Map<String, Object> links;
        private EventHookChannel channel;
        private OffsetDateTime created;
        private String createdBy;
        private EventSubscriptions events;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private String status;
        private String verificationStatus;

        private CreateSuccessRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set channel
         * @param channel  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder channel(EventHookChannel channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set events
         * @param events  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder events(EventSubscriptions events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set verificationStatus
         * @param verificationStatus  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder verificationStatus(String verificationStatus) {
            this.verificationStatus = verificationStatus;
            return this;
        }
        
        /**
         * Build call for createSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventHook eventHook = buildBodyParams();
            return createSuccessCall(eventHook, _callback);
        }

        private EventHook buildBodyParams() {
            EventHook eventHook = new EventHook();
            eventHook.links(this.links);
            eventHook.channel(this.channel);
            eventHook.created(this.created);
            eventHook.createdBy(this.createdBy);
            eventHook.events(this.events);
            eventHook.id(this.id);
            eventHook.lastUpdated(this.lastUpdated);
            eventHook.name(this.name);
            if (this.status != null)
            eventHook.status(EventHook.StatusEnum.fromValue(this.status));
            if (this.verificationStatus != null)
            eventHook.verificationStatus(EventHook.VerificationStatusEnum.fromValue(this.verificationStatus));
            return eventHook;
        }

        /**
         * Execute createSuccess request
         * @return EventHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EventHook execute() throws ApiException {
            EventHook eventHook = buildBodyParams();
            ApiResponse<EventHook> localVarResp = createSuccessWithHttpInfo(eventHook);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSuccess request with HTTP info returned
         * @return ApiResponse&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventHook> executeWithHttpInfo() throws ApiException {
            EventHook eventHook = buildBodyParams();
            return createSuccessWithHttpInfo(eventHook);
        }

        /**
         * Execute createSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventHook> _callback) throws ApiException {
            EventHook eventHook = buildBodyParams();
            return createSuccessAsync(eventHook, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHook  (required)
     * @return CreateSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateSuccessRequestBuilder createSuccess() throws IllegalArgumentException {
        return new CreateSuccessRequestBuilder();
    }
    private okhttp3.Call deactivateLifecycleEventCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks/{eventHookId}/lifecycle/deactivate"
            .replace("{" + "eventHookId" + "}", localVarApiClient.escapeString(eventHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleEventValidateBeforeCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHookId' is set
        if (eventHookId == null) {
            throw new ApiException("Missing the required parameter 'eventHookId' when calling deactivateLifecycleEvent(Async)");
        }

        return deactivateLifecycleEventCall(eventHookId, _callback);

    }


    private ApiResponse<EventHook> deactivateLifecycleEventWithHttpInfo(String eventHookId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleEventValidateBeforeCall(eventHookId, null);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateLifecycleEventAsync(String eventHookId, final ApiCallback<EventHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleEventValidateBeforeCall(eventHookId, _callback);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleEventRequestBuilder {
        private final String eventHookId;

        private DeactivateLifecycleEventRequestBuilder(String eventHookId) {
            this.eventHookId = eventHookId;
        }

        /**
         * Build call for deactivateLifecycleEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleEventCall(eventHookId, _callback);
        }


        /**
         * Execute deactivateLifecycleEvent request
         * @return EventHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EventHook execute() throws ApiException {
            ApiResponse<EventHook> localVarResp = deactivateLifecycleEventWithHttpInfo(eventHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateLifecycleEvent request with HTTP info returned
         * @return ApiResponse&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventHook> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleEventWithHttpInfo(eventHookId);
        }

        /**
         * Execute deactivateLifecycleEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventHook> _callback) throws ApiException {
            return deactivateLifecycleEventAsync(eventHookId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHookId  (required)
     * @return DeactivateLifecycleEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleEventRequestBuilder deactivateLifecycleEvent(String eventHookId) throws IllegalArgumentException {
        if (eventHookId == null) throw new IllegalArgumentException("\"eventHookId\" is required but got null");
            

        return new DeactivateLifecycleEventRequestBuilder(eventHookId);
    }
    private okhttp3.Call getSuccessEventCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks/{eventHookId}"
            .replace("{" + "eventHookId" + "}", localVarApiClient.escapeString(eventHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuccessEventValidateBeforeCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHookId' is set
        if (eventHookId == null) {
            throw new ApiException("Missing the required parameter 'eventHookId' when calling getSuccessEvent(Async)");
        }

        return getSuccessEventCall(eventHookId, _callback);

    }


    private ApiResponse<EventHook> getSuccessEventWithHttpInfo(String eventHookId) throws ApiException {
        okhttp3.Call localVarCall = getSuccessEventValidateBeforeCall(eventHookId, null);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuccessEventAsync(String eventHookId, final ApiCallback<EventHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuccessEventValidateBeforeCall(eventHookId, _callback);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuccessEventRequestBuilder {
        private final String eventHookId;

        private GetSuccessEventRequestBuilder(String eventHookId) {
            this.eventHookId = eventHookId;
        }

        /**
         * Build call for getSuccessEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSuccessEventCall(eventHookId, _callback);
        }


        /**
         * Execute getSuccessEvent request
         * @return EventHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EventHook execute() throws ApiException {
            ApiResponse<EventHook> localVarResp = getSuccessEventWithHttpInfo(eventHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuccessEvent request with HTTP info returned
         * @return ApiResponse&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventHook> executeWithHttpInfo() throws ApiException {
            return getSuccessEventWithHttpInfo(eventHookId);
        }

        /**
         * Execute getSuccessEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventHook> _callback) throws ApiException {
            return getSuccessEventAsync(eventHookId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHookId  (required)
     * @return GetSuccessEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSuccessEventRequestBuilder getSuccessEvent(String eventHookId) throws IllegalArgumentException {
        if (eventHookId == null) throw new IllegalArgumentException("\"eventHookId\" is required but got null");
            

        return new GetSuccessEventRequestBuilder(eventHookId);
    }
    private okhttp3.Call listSuccessEventsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSuccessEventsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSuccessEventsCall(_callback);

    }


    private ApiResponse<List<EventHook>> listSuccessEventsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSuccessEventsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<EventHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSuccessEventsAsync(final ApiCallback<List<EventHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSuccessEventsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<EventHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSuccessEventsRequestBuilder {

        private ListSuccessEventsRequestBuilder() {
        }

        /**
         * Build call for listSuccessEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSuccessEventsCall(_callback);
        }


        /**
         * Execute listSuccessEvents request
         * @return List&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<EventHook> execute() throws ApiException {
            ApiResponse<List<EventHook>> localVarResp = listSuccessEventsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSuccessEvents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EventHook&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EventHook>> executeWithHttpInfo() throws ApiException {
            return listSuccessEventsWithHttpInfo();
        }

        /**
         * Execute listSuccessEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EventHook>> _callback) throws ApiException {
            return listSuccessEventsAsync(_callback);
        }
    }

    /**
     * 
     * Success
     * @return ListSuccessEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListSuccessEventsRequestBuilder listSuccessEvents() throws IllegalArgumentException {
        return new ListSuccessEventsRequestBuilder();
    }
    private okhttp3.Call removeSuccessEventCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks/{eventHookId}"
            .replace("{" + "eventHookId" + "}", localVarApiClient.escapeString(eventHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSuccessEventValidateBeforeCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHookId' is set
        if (eventHookId == null) {
            throw new ApiException("Missing the required parameter 'eventHookId' when calling removeSuccessEvent(Async)");
        }

        return removeSuccessEventCall(eventHookId, _callback);

    }


    private ApiResponse<Void> removeSuccessEventWithHttpInfo(String eventHookId) throws ApiException {
        okhttp3.Call localVarCall = removeSuccessEventValidateBeforeCall(eventHookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSuccessEventAsync(String eventHookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSuccessEventValidateBeforeCall(eventHookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSuccessEventRequestBuilder {
        private final String eventHookId;

        private RemoveSuccessEventRequestBuilder(String eventHookId) {
            this.eventHookId = eventHookId;
        }

        /**
         * Build call for removeSuccessEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSuccessEventCall(eventHookId, _callback);
        }


        /**
         * Execute removeSuccessEvent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSuccessEventWithHttpInfo(eventHookId);
        }

        /**
         * Execute removeSuccessEvent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSuccessEventWithHttpInfo(eventHookId);
        }

        /**
         * Execute removeSuccessEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSuccessEventAsync(eventHookId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHookId  (required)
     * @return RemoveSuccessEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSuccessEventRequestBuilder removeSuccessEvent(String eventHookId) throws IllegalArgumentException {
        if (eventHookId == null) throw new IllegalArgumentException("\"eventHookId\" is required but got null");
            

        return new RemoveSuccessEventRequestBuilder(eventHookId);
    }
    private okhttp3.Call updateSuccessEventCall(String eventHookId, EventHook eventHook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventHook;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks/{eventHookId}"
            .replace("{" + "eventHookId" + "}", localVarApiClient.escapeString(eventHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSuccessEventValidateBeforeCall(String eventHookId, EventHook eventHook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHookId' is set
        if (eventHookId == null) {
            throw new ApiException("Missing the required parameter 'eventHookId' when calling updateSuccessEvent(Async)");
        }

        // verify the required parameter 'eventHook' is set
        if (eventHook == null) {
            throw new ApiException("Missing the required parameter 'eventHook' when calling updateSuccessEvent(Async)");
        }

        return updateSuccessEventCall(eventHookId, eventHook, _callback);

    }


    private ApiResponse<EventHook> updateSuccessEventWithHttpInfo(String eventHookId, EventHook eventHook) throws ApiException {
        okhttp3.Call localVarCall = updateSuccessEventValidateBeforeCall(eventHookId, eventHook, null);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSuccessEventAsync(String eventHookId, EventHook eventHook, final ApiCallback<EventHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSuccessEventValidateBeforeCall(eventHookId, eventHook, _callback);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSuccessEventRequestBuilder {
        private final String eventHookId;
        private Map<String, Object> links;
        private EventHookChannel channel;
        private OffsetDateTime created;
        private String createdBy;
        private EventSubscriptions events;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private String status;
        private String verificationStatus;

        private UpdateSuccessEventRequestBuilder(String eventHookId) {
            this.eventHookId = eventHookId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set channel
         * @param channel  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder channel(EventHookChannel channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set events
         * @param events  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder events(EventSubscriptions events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set verificationStatus
         * @param verificationStatus  (optional)
         * @return UpdateSuccessEventRequestBuilder
         */
        public UpdateSuccessEventRequestBuilder verificationStatus(String verificationStatus) {
            this.verificationStatus = verificationStatus;
            return this;
        }
        
        /**
         * Build call for updateSuccessEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventHook eventHook = buildBodyParams();
            return updateSuccessEventCall(eventHookId, eventHook, _callback);
        }

        private EventHook buildBodyParams() {
            EventHook eventHook = new EventHook();
            eventHook.links(this.links);
            eventHook.channel(this.channel);
            eventHook.created(this.created);
            eventHook.createdBy(this.createdBy);
            eventHook.events(this.events);
            eventHook.id(this.id);
            eventHook.lastUpdated(this.lastUpdated);
            eventHook.name(this.name);
            if (this.status != null)
            eventHook.status(EventHook.StatusEnum.fromValue(this.status));
            if (this.verificationStatus != null)
            eventHook.verificationStatus(EventHook.VerificationStatusEnum.fromValue(this.verificationStatus));
            return eventHook;
        }

        /**
         * Execute updateSuccessEvent request
         * @return EventHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EventHook execute() throws ApiException {
            EventHook eventHook = buildBodyParams();
            ApiResponse<EventHook> localVarResp = updateSuccessEventWithHttpInfo(eventHookId, eventHook);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSuccessEvent request with HTTP info returned
         * @return ApiResponse&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventHook> executeWithHttpInfo() throws ApiException {
            EventHook eventHook = buildBodyParams();
            return updateSuccessEventWithHttpInfo(eventHookId, eventHook);
        }

        /**
         * Execute updateSuccessEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventHook> _callback) throws ApiException {
            EventHook eventHook = buildBodyParams();
            return updateSuccessEventAsync(eventHookId, eventHook, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHookId  (required)
     * @param eventHook  (required)
     * @return UpdateSuccessEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSuccessEventRequestBuilder updateSuccessEvent(String eventHookId) throws IllegalArgumentException {
        if (eventHookId == null) throw new IllegalArgumentException("\"eventHookId\" is required but got null");
            

        return new UpdateSuccessEventRequestBuilder(eventHookId);
    }
    private okhttp3.Call verifyLifecycleSuccessCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventHooks/{eventHookId}/lifecycle/verify"
            .replace("{" + "eventHookId" + "}", localVarApiClient.escapeString(eventHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyLifecycleSuccessValidateBeforeCall(String eventHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventHookId' is set
        if (eventHookId == null) {
            throw new ApiException("Missing the required parameter 'eventHookId' when calling verifyLifecycleSuccess(Async)");
        }

        return verifyLifecycleSuccessCall(eventHookId, _callback);

    }


    private ApiResponse<EventHook> verifyLifecycleSuccessWithHttpInfo(String eventHookId) throws ApiException {
        okhttp3.Call localVarCall = verifyLifecycleSuccessValidateBeforeCall(eventHookId, null);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyLifecycleSuccessAsync(String eventHookId, final ApiCallback<EventHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyLifecycleSuccessValidateBeforeCall(eventHookId, _callback);
        Type localVarReturnType = new TypeToken<EventHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyLifecycleSuccessRequestBuilder {
        private final String eventHookId;

        private VerifyLifecycleSuccessRequestBuilder(String eventHookId) {
            this.eventHookId = eventHookId;
        }

        /**
         * Build call for verifyLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyLifecycleSuccessCall(eventHookId, _callback);
        }


        /**
         * Execute verifyLifecycleSuccess request
         * @return EventHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EventHook execute() throws ApiException {
            ApiResponse<EventHook> localVarResp = verifyLifecycleSuccessWithHttpInfo(eventHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;EventHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventHook> executeWithHttpInfo() throws ApiException {
            return verifyLifecycleSuccessWithHttpInfo(eventHookId);
        }

        /**
         * Execute verifyLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventHook> _callback) throws ApiException {
            return verifyLifecycleSuccessAsync(eventHookId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param eventHookId  (required)
     * @return VerifyLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyLifecycleSuccessRequestBuilder verifyLifecycleSuccess(String eventHookId) throws IllegalArgumentException {
        if (eventHookId == null) throw new IllegalArgumentException("\"eventHookId\" is required but got null");
            

        return new VerifyLifecycleSuccessRequestBuilder(eventHookId);
    }
}
