/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Subscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call customRoleNotificationUnsubscribeCall(String roleTypeOrRoleId, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/unsubscribe"
            .replace("{" + "roleTypeOrRoleId" + "}", localVarApiClient.escapeString(roleTypeOrRoleId.toString()))
            .replace("{" + "notificationType" + "}", localVarApiClient.escapeString(notificationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customRoleNotificationUnsubscribeValidateBeforeCall(String roleTypeOrRoleId, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleTypeOrRoleId' is set
        if (roleTypeOrRoleId == null) {
            throw new ApiException("Missing the required parameter 'roleTypeOrRoleId' when calling customRoleNotificationUnsubscribe(Async)");
        }

        // verify the required parameter 'notificationType' is set
        if (notificationType == null) {
            throw new ApiException("Missing the required parameter 'notificationType' when calling customRoleNotificationUnsubscribe(Async)");
        }

        return customRoleNotificationUnsubscribeCall(roleTypeOrRoleId, notificationType, _callback);

    }


    private ApiResponse<Void> customRoleNotificationUnsubscribeWithHttpInfo(String roleTypeOrRoleId, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = customRoleNotificationUnsubscribeValidateBeforeCall(roleTypeOrRoleId, notificationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call customRoleNotificationUnsubscribeAsync(String roleTypeOrRoleId, String notificationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = customRoleNotificationUnsubscribeValidateBeforeCall(roleTypeOrRoleId, notificationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CustomRoleNotificationUnsubscribeRequestBuilder {
        private final String roleTypeOrRoleId;
        private final String notificationType;

        private CustomRoleNotificationUnsubscribeRequestBuilder(String roleTypeOrRoleId, String notificationType) {
            this.roleTypeOrRoleId = roleTypeOrRoleId;
            this.notificationType = notificationType;
        }

        /**
         * Build call for customRoleNotificationUnsubscribe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return customRoleNotificationUnsubscribeCall(roleTypeOrRoleId, notificationType, _callback);
        }


        /**
         * Execute customRoleNotificationUnsubscribe request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            customRoleNotificationUnsubscribeWithHttpInfo(roleTypeOrRoleId, notificationType);
        }

        /**
         * Execute customRoleNotificationUnsubscribe request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return customRoleNotificationUnsubscribeWithHttpInfo(roleTypeOrRoleId, notificationType);
        }

        /**
         * Execute customRoleNotificationUnsubscribe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return customRoleNotificationUnsubscribeAsync(roleTypeOrRoleId, notificationType, _callback);
        }
    }

    /**
     * Unsubscribe a Custom Role from a specific notification type
     * When roleType Unsubscribes a Role from a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Unsubscribes a Custom Role from a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.
     * @param roleTypeOrRoleId  (required)
     * @param notificationType  (required)
     * @return CustomRoleNotificationUnsubscribeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CustomRoleNotificationUnsubscribeRequestBuilder customRoleNotificationUnsubscribe(String roleTypeOrRoleId, String notificationType) throws IllegalArgumentException {
        if (roleTypeOrRoleId == null) throw new IllegalArgumentException("\"roleTypeOrRoleId\" is required but got null");
            

        if (notificationType == null) throw new IllegalArgumentException("\"notificationType\" is required but got null");
            

        return new CustomRoleNotificationUnsubscribeRequestBuilder(roleTypeOrRoleId, notificationType);
    }
    private okhttp3.Call getRoleSubscriptionsByNotificationTypeCall(String roleTypeOrRoleId, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}"
            .replace("{" + "roleTypeOrRoleId" + "}", localVarApiClient.escapeString(roleTypeOrRoleId.toString()))
            .replace("{" + "notificationType" + "}", localVarApiClient.escapeString(notificationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleSubscriptionsByNotificationTypeValidateBeforeCall(String roleTypeOrRoleId, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleTypeOrRoleId' is set
        if (roleTypeOrRoleId == null) {
            throw new ApiException("Missing the required parameter 'roleTypeOrRoleId' when calling getRoleSubscriptionsByNotificationType(Async)");
        }

        // verify the required parameter 'notificationType' is set
        if (notificationType == null) {
            throw new ApiException("Missing the required parameter 'notificationType' when calling getRoleSubscriptionsByNotificationType(Async)");
        }

        return getRoleSubscriptionsByNotificationTypeCall(roleTypeOrRoleId, notificationType, _callback);

    }


    private ApiResponse<Subscription> getRoleSubscriptionsByNotificationTypeWithHttpInfo(String roleTypeOrRoleId, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = getRoleSubscriptionsByNotificationTypeValidateBeforeCall(roleTypeOrRoleId, notificationType, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleSubscriptionsByNotificationTypeAsync(String roleTypeOrRoleId, String notificationType, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleSubscriptionsByNotificationTypeValidateBeforeCall(roleTypeOrRoleId, notificationType, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleSubscriptionsByNotificationTypeRequestBuilder {
        private final String roleTypeOrRoleId;
        private final String notificationType;

        private GetRoleSubscriptionsByNotificationTypeRequestBuilder(String roleTypeOrRoleId, String notificationType) {
            this.roleTypeOrRoleId = roleTypeOrRoleId;
            this.notificationType = notificationType;
        }

        /**
         * Build call for getRoleSubscriptionsByNotificationType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleSubscriptionsByNotificationTypeCall(roleTypeOrRoleId, notificationType, _callback);
        }


        /**
         * Execute getRoleSubscriptionsByNotificationType request
         * @return Subscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Subscription execute() throws ApiException {
            ApiResponse<Subscription> localVarResp = getRoleSubscriptionsByNotificationTypeWithHttpInfo(roleTypeOrRoleId, notificationType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleSubscriptionsByNotificationType request with HTTP info returned
         * @return ApiResponse&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Subscription> executeWithHttpInfo() throws ApiException {
            return getRoleSubscriptionsByNotificationTypeWithHttpInfo(roleTypeOrRoleId, notificationType);
        }

        /**
         * Execute getRoleSubscriptionsByNotificationType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Subscription> _callback) throws ApiException {
            return getRoleSubscriptionsByNotificationTypeAsync(roleTypeOrRoleId, notificationType, _callback);
        }
    }

    /**
     * Get subscriptions of a Custom Role with a specific notification type
     * When roleType Get subscriptions of a Role with a specific notification type. Else when roleId Get subscription of a Custom Role with a specific notification type.
     * @param roleTypeOrRoleId  (required)
     * @param notificationType  (required)
     * @return GetRoleSubscriptionsByNotificationTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleSubscriptionsByNotificationTypeRequestBuilder getRoleSubscriptionsByNotificationType(String roleTypeOrRoleId, String notificationType) throws IllegalArgumentException {
        if (roleTypeOrRoleId == null) throw new IllegalArgumentException("\"roleTypeOrRoleId\" is required but got null");
            

        if (notificationType == null) throw new IllegalArgumentException("\"notificationType\" is required but got null");
            

        return new GetRoleSubscriptionsByNotificationTypeRequestBuilder(roleTypeOrRoleId, notificationType);
    }
    private okhttp3.Call listRoleSubscriptionsCall(String roleTypeOrRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/roles/{roleTypeOrRoleId}/subscriptions"
            .replace("{" + "roleTypeOrRoleId" + "}", localVarApiClient.escapeString(roleTypeOrRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoleSubscriptionsValidateBeforeCall(String roleTypeOrRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleTypeOrRoleId' is set
        if (roleTypeOrRoleId == null) {
            throw new ApiException("Missing the required parameter 'roleTypeOrRoleId' when calling listRoleSubscriptions(Async)");
        }

        return listRoleSubscriptionsCall(roleTypeOrRoleId, _callback);

    }


    private ApiResponse<List<Subscription>> listRoleSubscriptionsWithHttpInfo(String roleTypeOrRoleId) throws ApiException {
        okhttp3.Call localVarCall = listRoleSubscriptionsValidateBeforeCall(roleTypeOrRoleId, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRoleSubscriptionsAsync(String roleTypeOrRoleId, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoleSubscriptionsValidateBeforeCall(roleTypeOrRoleId, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRoleSubscriptionsRequestBuilder {
        private final String roleTypeOrRoleId;

        private ListRoleSubscriptionsRequestBuilder(String roleTypeOrRoleId) {
            this.roleTypeOrRoleId = roleTypeOrRoleId;
        }

        /**
         * Build call for listRoleSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRoleSubscriptionsCall(roleTypeOrRoleId, _callback);
        }


        /**
         * Execute listRoleSubscriptions request
         * @return List&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public List<Subscription> execute() throws ApiException {
            ApiResponse<List<Subscription>> localVarResp = listRoleSubscriptionsWithHttpInfo(roleTypeOrRoleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRoleSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Subscription>> executeWithHttpInfo() throws ApiException {
            return listRoleSubscriptionsWithHttpInfo(roleTypeOrRoleId);
        }

        /**
         * Execute listRoleSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Subscription>> _callback) throws ApiException {
            return listRoleSubscriptionsAsync(roleTypeOrRoleId, _callback);
        }
    }

    /**
     * List all subscriptions of a Custom Role
     * When roleType List all subscriptions of a Role. Else when roleId List subscriptions of a Custom Role
     * @param roleTypeOrRoleId  (required)
     * @return ListRoleSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListRoleSubscriptionsRequestBuilder listRoleSubscriptions(String roleTypeOrRoleId) throws IllegalArgumentException {
        if (roleTypeOrRoleId == null) throw new IllegalArgumentException("\"roleTypeOrRoleId\" is required but got null");
            

        return new ListRoleSubscriptionsRequestBuilder(roleTypeOrRoleId);
    }
    private okhttp3.Call roleNotificationSubscribeCall(String roleTypeOrRoleId, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/subscribe"
            .replace("{" + "roleTypeOrRoleId" + "}", localVarApiClient.escapeString(roleTypeOrRoleId.toString()))
            .replace("{" + "notificationType" + "}", localVarApiClient.escapeString(notificationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleNotificationSubscribeValidateBeforeCall(String roleTypeOrRoleId, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleTypeOrRoleId' is set
        if (roleTypeOrRoleId == null) {
            throw new ApiException("Missing the required parameter 'roleTypeOrRoleId' when calling roleNotificationSubscribe(Async)");
        }

        // verify the required parameter 'notificationType' is set
        if (notificationType == null) {
            throw new ApiException("Missing the required parameter 'notificationType' when calling roleNotificationSubscribe(Async)");
        }

        return roleNotificationSubscribeCall(roleTypeOrRoleId, notificationType, _callback);

    }


    private ApiResponse<Void> roleNotificationSubscribeWithHttpInfo(String roleTypeOrRoleId, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = roleNotificationSubscribeValidateBeforeCall(roleTypeOrRoleId, notificationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call roleNotificationSubscribeAsync(String roleTypeOrRoleId, String notificationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleNotificationSubscribeValidateBeforeCall(roleTypeOrRoleId, notificationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RoleNotificationSubscribeRequestBuilder {
        private final String roleTypeOrRoleId;
        private final String notificationType;

        private RoleNotificationSubscribeRequestBuilder(String roleTypeOrRoleId, String notificationType) {
            this.roleTypeOrRoleId = roleTypeOrRoleId;
            this.notificationType = notificationType;
        }

        /**
         * Build call for roleNotificationSubscribe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return roleNotificationSubscribeCall(roleTypeOrRoleId, notificationType, _callback);
        }


        /**
         * Execute roleNotificationSubscribe request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            roleNotificationSubscribeWithHttpInfo(roleTypeOrRoleId, notificationType);
        }

        /**
         * Execute roleNotificationSubscribe request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return roleNotificationSubscribeWithHttpInfo(roleTypeOrRoleId, notificationType);
        }

        /**
         * Execute roleNotificationSubscribe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return roleNotificationSubscribeAsync(roleTypeOrRoleId, notificationType, _callback);
        }
    }

    /**
     * Subscribe a Custom Role to a specific notification type
     * When roleType Subscribes a Role to a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Subscribes a Custom Role to a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.
     * @param roleTypeOrRoleId  (required)
     * @param notificationType  (required)
     * @return RoleNotificationSubscribeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RoleNotificationSubscribeRequestBuilder roleNotificationSubscribe(String roleTypeOrRoleId, String notificationType) throws IllegalArgumentException {
        if (roleTypeOrRoleId == null) throw new IllegalArgumentException("\"roleTypeOrRoleId\" is required but got null");
            

        if (notificationType == null) throw new IllegalArgumentException("\"notificationType\" is required but got null");
            

        return new RoleNotificationSubscribeRequestBuilder(roleTypeOrRoleId, notificationType);
    }
    private okhttp3.Call unsubscribeUserSubscriptionByNotificationTypeCall(String userId, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/subscriptions/{notificationType}/unsubscribe"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "notificationType" + "}", localVarApiClient.escapeString(notificationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeUserSubscriptionByNotificationTypeValidateBeforeCall(String userId, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unsubscribeUserSubscriptionByNotificationType(Async)");
        }

        // verify the required parameter 'notificationType' is set
        if (notificationType == null) {
            throw new ApiException("Missing the required parameter 'notificationType' when calling unsubscribeUserSubscriptionByNotificationType(Async)");
        }

        return unsubscribeUserSubscriptionByNotificationTypeCall(userId, notificationType, _callback);

    }


    private ApiResponse<Void> unsubscribeUserSubscriptionByNotificationTypeWithHttpInfo(String userId, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeUserSubscriptionByNotificationTypeValidateBeforeCall(userId, notificationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unsubscribeUserSubscriptionByNotificationTypeAsync(String userId, String notificationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeUserSubscriptionByNotificationTypeValidateBeforeCall(userId, notificationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnsubscribeUserSubscriptionByNotificationTypeRequestBuilder {
        private final String userId;
        private final String notificationType;

        private UnsubscribeUserSubscriptionByNotificationTypeRequestBuilder(String userId, String notificationType) {
            this.userId = userId;
            this.notificationType = notificationType;
        }

        /**
         * Build call for unsubscribeUserSubscriptionByNotificationType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unsubscribeUserSubscriptionByNotificationTypeCall(userId, notificationType, _callback);
        }


        /**
         * Execute unsubscribeUserSubscriptionByNotificationType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unsubscribeUserSubscriptionByNotificationTypeWithHttpInfo(userId, notificationType);
        }

        /**
         * Execute unsubscribeUserSubscriptionByNotificationType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unsubscribeUserSubscriptionByNotificationTypeWithHttpInfo(userId, notificationType);
        }

        /**
         * Execute unsubscribeUserSubscriptionByNotificationType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unsubscribeUserSubscriptionByNotificationTypeAsync(userId, notificationType, _callback);
        }
    }

    /**
     * Unsubscribe from a specific notification type
     * Unsubscribes a User from a specific notification type. Only the current User can unsubscribe from a specific notification type. An AccessDeniedException message is sent if requests are made from other users.
     * @param userId  (required)
     * @param notificationType  (required)
     * @return UnsubscribeUserSubscriptionByNotificationTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UnsubscribeUserSubscriptionByNotificationTypeRequestBuilder unsubscribeUserSubscriptionByNotificationType(String userId, String notificationType) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (notificationType == null) throw new IllegalArgumentException("\"notificationType\" is required but got null");
            

        return new UnsubscribeUserSubscriptionByNotificationTypeRequestBuilder(userId, notificationType);
    }
    private okhttp3.Call userNotificationSubscribeCall(String userId, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/subscriptions/{notificationType}/subscribe"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "notificationType" + "}", localVarApiClient.escapeString(notificationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userNotificationSubscribeValidateBeforeCall(String userId, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userNotificationSubscribe(Async)");
        }

        // verify the required parameter 'notificationType' is set
        if (notificationType == null) {
            throw new ApiException("Missing the required parameter 'notificationType' when calling userNotificationSubscribe(Async)");
        }

        return userNotificationSubscribeCall(userId, notificationType, _callback);

    }


    private ApiResponse<Void> userNotificationSubscribeWithHttpInfo(String userId, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = userNotificationSubscribeValidateBeforeCall(userId, notificationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call userNotificationSubscribeAsync(String userId, String notificationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userNotificationSubscribeValidateBeforeCall(userId, notificationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UserNotificationSubscribeRequestBuilder {
        private final String userId;
        private final String notificationType;

        private UserNotificationSubscribeRequestBuilder(String userId, String notificationType) {
            this.userId = userId;
            this.notificationType = notificationType;
        }

        /**
         * Build call for userNotificationSubscribe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return userNotificationSubscribeCall(userId, notificationType, _callback);
        }


        /**
         * Execute userNotificationSubscribe request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            userNotificationSubscribeWithHttpInfo(userId, notificationType);
        }

        /**
         * Execute userNotificationSubscribe request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return userNotificationSubscribeWithHttpInfo(userId, notificationType);
        }

        /**
         * Execute userNotificationSubscribe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return userNotificationSubscribeAsync(userId, notificationType, _callback);
        }
    }

    /**
     * Subscribe to a specific notification type
     * Subscribes a User to a specific notification type. Only the current User can subscribe to a specific notification type. An AccessDeniedException message is sent if requests are made from other users.
     * @param userId  (required)
     * @param notificationType  (required)
     * @return UserNotificationSubscribeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserNotificationSubscribeRequestBuilder userNotificationSubscribe(String userId, String notificationType) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (notificationType == null) throw new IllegalArgumentException("\"notificationType\" is required but got null");
            

        return new UserNotificationSubscribeRequestBuilder(userId, notificationType);
    }
}
