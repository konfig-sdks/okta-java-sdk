/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.ThreatInsightConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ThreatInsightApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ThreatInsightApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ThreatInsightApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrentConfigurationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/threats/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentConfigurationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentConfigurationCall(_callback);

    }


    private ApiResponse<ThreatInsightConfiguration> getCurrentConfigurationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentConfigurationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ThreatInsightConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentConfigurationAsync(final ApiCallback<ThreatInsightConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentConfigurationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ThreatInsightConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentConfigurationRequestBuilder {

        private GetCurrentConfigurationRequestBuilder() {
        }

        /**
         * Build call for getCurrentConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentConfigurationCall(_callback);
        }


        /**
         * Execute getCurrentConfiguration request
         * @return ThreatInsightConfiguration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ThreatInsightConfiguration execute() throws ApiException {
            ApiResponse<ThreatInsightConfiguration> localVarResp = getCurrentConfigurationWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentConfiguration request with HTTP info returned
         * @return ApiResponse&lt;ThreatInsightConfiguration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ThreatInsightConfiguration> executeWithHttpInfo() throws ApiException {
            return getCurrentConfigurationWithHttpInfo();
        }

        /**
         * Execute getCurrentConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ThreatInsightConfiguration> _callback) throws ApiException {
            return getCurrentConfigurationAsync(_callback);
        }
    }

    /**
     * 
     * Gets current ThreatInsight configuration
     * @return GetCurrentConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentConfigurationRequestBuilder getCurrentConfiguration() throws IllegalArgumentException {
        return new GetCurrentConfigurationRequestBuilder();
    }
    private okhttp3.Call updateConfigurationCall(ThreatInsightConfiguration threatInsightConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = threatInsightConfiguration;

        // create path and map variables
        String localVarPath = "/api/v1/threats/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationValidateBeforeCall(ThreatInsightConfiguration threatInsightConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threatInsightConfiguration' is set
        if (threatInsightConfiguration == null) {
            throw new ApiException("Missing the required parameter 'threatInsightConfiguration' when calling updateConfiguration(Async)");
        }

        return updateConfigurationCall(threatInsightConfiguration, _callback);

    }


    private ApiResponse<ThreatInsightConfiguration> updateConfigurationWithHttpInfo(ThreatInsightConfiguration threatInsightConfiguration) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(threatInsightConfiguration, null);
        Type localVarReturnType = new TypeToken<ThreatInsightConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConfigurationAsync(ThreatInsightConfiguration threatInsightConfiguration, final ApiCallback<ThreatInsightConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(threatInsightConfiguration, _callback);
        Type localVarReturnType = new TypeToken<ThreatInsightConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateConfigurationRequestBuilder {
        private Map<String, Object> links;
        private String action;
        private OffsetDateTime created;
        private List<String> excludeZones;
        private OffsetDateTime lastUpdated;

        private UpdateConfigurationRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set action
         * @param action  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set excludeZones
         * @param excludeZones  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder excludeZones(List<String> excludeZones) {
            this.excludeZones = excludeZones;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Build call for updateConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ThreatInsightConfiguration threatInsightConfiguration = buildBodyParams();
            return updateConfigurationCall(threatInsightConfiguration, _callback);
        }

        private ThreatInsightConfiguration buildBodyParams() {
            ThreatInsightConfiguration threatInsightConfiguration = new ThreatInsightConfiguration();
            threatInsightConfiguration.links(this.links);
            threatInsightConfiguration.action(this.action);
            threatInsightConfiguration.created(this.created);
            threatInsightConfiguration.excludeZones(this.excludeZones);
            threatInsightConfiguration.lastUpdated(this.lastUpdated);
            return threatInsightConfiguration;
        }

        /**
         * Execute updateConfiguration request
         * @return ThreatInsightConfiguration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ThreatInsightConfiguration execute() throws ApiException {
            ThreatInsightConfiguration threatInsightConfiguration = buildBodyParams();
            ApiResponse<ThreatInsightConfiguration> localVarResp = updateConfigurationWithHttpInfo(threatInsightConfiguration);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateConfiguration request with HTTP info returned
         * @return ApiResponse&lt;ThreatInsightConfiguration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ThreatInsightConfiguration> executeWithHttpInfo() throws ApiException {
            ThreatInsightConfiguration threatInsightConfiguration = buildBodyParams();
            return updateConfigurationWithHttpInfo(threatInsightConfiguration);
        }

        /**
         * Execute updateConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ThreatInsightConfiguration> _callback) throws ApiException {
            ThreatInsightConfiguration threatInsightConfiguration = buildBodyParams();
            return updateConfigurationAsync(threatInsightConfiguration, _callback);
        }
    }

    /**
     * 
     * Updates ThreatInsight configuration
     * @param threatInsightConfiguration  (required)
     * @return UpdateConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigurationRequestBuilder updateConfiguration() throws IllegalArgumentException {
        return new UpdateConfigurationRequestBuilder();
    }
}
