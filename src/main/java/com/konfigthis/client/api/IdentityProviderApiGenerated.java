/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Csr;
import com.konfigthis.client.model.CsrMetadata;
import com.konfigthis.client.model.CsrMetadataSubject;
import com.konfigthis.client.model.CsrMetadataSubjectAltNames;
import com.konfigthis.client.model.IdentityProvider;
import com.konfigthis.client.model.IdentityProviderApplicationUser;
import com.konfigthis.client.model.IdentityProviderPolicy;
import com.konfigthis.client.model.JsonWebKey;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Protocol;
import com.konfigthis.client.model.SocialAuthToken;
import com.konfigthis.client.model.UserIdentityProviderLinkRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IdentityProviderApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentityProviderApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityProviderApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateIdpLifecycleCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/lifecycle/activate"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateIdpLifecycleValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling activateIdpLifecycle(Async)");
        }

        return activateIdpLifecycleCall(idpId, _callback);

    }


    private ApiResponse<IdentityProvider> activateIdpLifecycleWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = activateIdpLifecycleValidateBeforeCall(idpId, null);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateIdpLifecycleAsync(String idpId, final ApiCallback<IdentityProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateIdpLifecycleValidateBeforeCall(idpId, _callback);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateIdpLifecycleRequestBuilder {
        private final String idpId;

        private ActivateIdpLifecycleRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for activateIdpLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateIdpLifecycleCall(idpId, _callback);
        }


        /**
         * Execute activateIdpLifecycle request
         * @return IdentityProvider
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProvider execute() throws ApiException {
            ApiResponse<IdentityProvider> localVarResp = activateIdpLifecycleWithHttpInfo(idpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateIdpLifecycle request with HTTP info returned
         * @return ApiResponse&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProvider> executeWithHttpInfo() throws ApiException {
            return activateIdpLifecycleWithHttpInfo(idpId);
        }

        /**
         * Execute activateIdpLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProvider> _callback) throws ApiException {
            return activateIdpLifecycleAsync(idpId, _callback);
        }
    }

    /**
     * Activate Identity Provider
     * Activates an inactive IdP.
     * @param idpId  (required)
     * @return ActivateIdpLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateIdpLifecycleRequestBuilder activateIdpLifecycle(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new ActivateIdpLifecycleRequestBuilder(idpId);
    }
    private okhttp3.Call addNewIdpCall(IdentityProvider identityProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProvider;

        // create path and map variables
        String localVarPath = "/api/v1/idps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewIdpValidateBeforeCall(IdentityProvider identityProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityProvider' is set
        if (identityProvider == null) {
            throw new ApiException("Missing the required parameter 'identityProvider' when calling addNewIdp(Async)");
        }

        return addNewIdpCall(identityProvider, _callback);

    }


    private ApiResponse<IdentityProvider> addNewIdpWithHttpInfo(IdentityProvider identityProvider) throws ApiException {
        okhttp3.Call localVarCall = addNewIdpValidateBeforeCall(identityProvider, null);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewIdpAsync(IdentityProvider identityProvider, final ApiCallback<IdentityProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewIdpValidateBeforeCall(identityProvider, _callback);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewIdpRequestBuilder {
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String id;
        private String issuerMode;
        private OffsetDateTime lastUpdated;
        private String name;
        private IdentityProviderPolicy policy;
        private Protocol protocol;
        private String status;
        private String type;

        private AddNewIdpRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuerMode
         * @param issuerMode  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder issuerMode(String issuerMode) {
            this.issuerMode = issuerMode;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set policy
         * @param policy  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder policy(IdentityProviderPolicy policy) {
            this.policy = policy;
            return this;
        }
        
        /**
         * Set protocol
         * @param protocol  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder protocol(Protocol protocol) {
            this.protocol = protocol;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AddNewIdpRequestBuilder
         */
        public AddNewIdpRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for addNewIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            return addNewIdpCall(identityProvider, _callback);
        }

        private IdentityProvider buildBodyParams() {
            IdentityProvider identityProvider = new IdentityProvider();
            identityProvider.links(this.links);
            identityProvider.created(this.created);
            identityProvider.id(this.id);
            if (this.issuerMode != null)
            identityProvider.issuerMode(IdentityProvider.IssuerModeEnum.fromValue(this.issuerMode));
            identityProvider.lastUpdated(this.lastUpdated);
            identityProvider.name(this.name);
            identityProvider.policy(this.policy);
            identityProvider.protocol(this.protocol);
            if (this.status != null)
            identityProvider.status(IdentityProvider.StatusEnum.fromValue(this.status));
            if (this.type != null)
            identityProvider.type(IdentityProvider.TypeEnum.fromValue(this.type));
            return identityProvider;
        }

        /**
         * Execute addNewIdp request
         * @return IdentityProvider
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProvider execute() throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            ApiResponse<IdentityProvider> localVarResp = addNewIdpWithHttpInfo(identityProvider);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewIdp request with HTTP info returned
         * @return ApiResponse&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProvider> executeWithHttpInfo() throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            return addNewIdpWithHttpInfo(identityProvider);
        }

        /**
         * Execute addNewIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProvider> _callback) throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            return addNewIdpAsync(identityProvider, _callback);
        }
    }

    /**
     * Add Identity Provider
     * Adds a new IdP to your organization.
     * @param identityProvider  (required)
     * @return AddNewIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddNewIdpRequestBuilder addNewIdp() throws IllegalArgumentException {
        return new AddNewIdpRequestBuilder();
    }
    private okhttp3.Call addX509CertificatePublicKeyCall(JsonWebKey jsonWebKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jsonWebKey;

        // create path and map variables
        String localVarPath = "/api/v1/idps/credentials/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addX509CertificatePublicKeyValidateBeforeCall(JsonWebKey jsonWebKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonWebKey' is set
        if (jsonWebKey == null) {
            throw new ApiException("Missing the required parameter 'jsonWebKey' when calling addX509CertificatePublicKey(Async)");
        }

        return addX509CertificatePublicKeyCall(jsonWebKey, _callback);

    }


    private ApiResponse<JsonWebKey> addX509CertificatePublicKeyWithHttpInfo(JsonWebKey jsonWebKey) throws ApiException {
        okhttp3.Call localVarCall = addX509CertificatePublicKeyValidateBeforeCall(jsonWebKey, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addX509CertificatePublicKeyAsync(JsonWebKey jsonWebKey, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = addX509CertificatePublicKeyValidateBeforeCall(jsonWebKey, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddX509CertificatePublicKeyRequestBuilder {
        private Map<String, Object> links;
        private String alg;
        private OffsetDateTime created;
        private String e;
        private OffsetDateTime expiresAt;
        private List<String> keyOps;
        private String kid;
        private String kty;
        private OffsetDateTime lastUpdated;
        private String n;
        private String status;
        private String use;
        private List<String> x5c;
        private String x5t;
        private String x5tHashS256;
        private String x5u;

        private AddX509CertificatePublicKeyRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set alg
         * @param alg  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder alg(String alg) {
            this.alg = alg;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set e
         * @param e  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder e(String e) {
            this.e = e;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Set keyOps
         * @param keyOps  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder keyOps(List<String> keyOps) {
            this.keyOps = keyOps;
            return this;
        }
        
        /**
         * Set kid
         * @param kid  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder kid(String kid) {
            this.kid = kid;
            return this;
        }
        
        /**
         * Set kty
         * @param kty  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder kty(String kty) {
            this.kty = kty;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set n
         * @param n  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder n(String n) {
            this.n = n;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set use
         * @param use  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder use(String use) {
            this.use = use;
            return this;
        }
        
        /**
         * Set x5c
         * @param x5c  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder x5c(List<String> x5c) {
            this.x5c = x5c;
            return this;
        }
        
        /**
         * Set x5t
         * @param x5t  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder x5t(String x5t) {
            this.x5t = x5t;
            return this;
        }
        
        /**
         * Set x5tHashS256
         * @param x5tHashS256  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder x5tHashS256(String x5tHashS256) {
            this.x5tHashS256 = x5tHashS256;
            return this;
        }
        
        /**
         * Set x5u
         * @param x5u  (optional)
         * @return AddX509CertificatePublicKeyRequestBuilder
         */
        public AddX509CertificatePublicKeyRequestBuilder x5u(String x5u) {
            this.x5u = x5u;
            return this;
        }
        
        /**
         * Build call for addX509CertificatePublicKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JsonWebKey jsonWebKey = buildBodyParams();
            return addX509CertificatePublicKeyCall(jsonWebKey, _callback);
        }

        private JsonWebKey buildBodyParams() {
            JsonWebKey jsonWebKey = new JsonWebKey();
            jsonWebKey.links(this.links);
            jsonWebKey.alg(this.alg);
            jsonWebKey.created(this.created);
            jsonWebKey.e(this.e);
            jsonWebKey.expiresAt(this.expiresAt);
            jsonWebKey.keyOps(this.keyOps);
            jsonWebKey.kid(this.kid);
            jsonWebKey.kty(this.kty);
            jsonWebKey.lastUpdated(this.lastUpdated);
            jsonWebKey.n(this.n);
            jsonWebKey.status(this.status);
            jsonWebKey.use(this.use);
            jsonWebKey.x5c(this.x5c);
            jsonWebKey.x5t(this.x5t);
            jsonWebKey.x5tHashS256(this.x5tHashS256);
            jsonWebKey.x5u(this.x5u);
            return jsonWebKey;
        }

        /**
         * Execute addX509CertificatePublicKey request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            JsonWebKey jsonWebKey = buildBodyParams();
            ApiResponse<JsonWebKey> localVarResp = addX509CertificatePublicKeyWithHttpInfo(jsonWebKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addX509CertificatePublicKey request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            JsonWebKey jsonWebKey = buildBodyParams();
            return addX509CertificatePublicKeyWithHttpInfo(jsonWebKey);
        }

        /**
         * Execute addX509CertificatePublicKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            JsonWebKey jsonWebKey = buildBodyParams();
            return addX509CertificatePublicKeyAsync(jsonWebKey, _callback);
        }
    }

    /**
     * Add X.509 Certificate Public Key
     * Adds a new X.509 certificate credential to the IdP key store.
     * @param jsonWebKey  (required)
     * @return AddX509CertificatePublicKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddX509CertificatePublicKeyRequestBuilder addX509CertificatePublicKey() throws IllegalArgumentException {
        return new AddX509CertificatePublicKeyRequestBuilder();
    }
    private okhttp3.Call cloneSigningKeyCredentialCall(String idpId, String keyId, String targetIdpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/keys/{keyId}/clone"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetIdpId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetIdpId", targetIdpId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneSigningKeyCredentialValidateBeforeCall(String idpId, String keyId, String targetIdpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling cloneSigningKeyCredential(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling cloneSigningKeyCredential(Async)");
        }

        // verify the required parameter 'targetIdpId' is set
        if (targetIdpId == null) {
            throw new ApiException("Missing the required parameter 'targetIdpId' when calling cloneSigningKeyCredential(Async)");
        }

        return cloneSigningKeyCredentialCall(idpId, keyId, targetIdpId, _callback);

    }


    private ApiResponse<JsonWebKey> cloneSigningKeyCredentialWithHttpInfo(String idpId, String keyId, String targetIdpId) throws ApiException {
        okhttp3.Call localVarCall = cloneSigningKeyCredentialValidateBeforeCall(idpId, keyId, targetIdpId, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cloneSigningKeyCredentialAsync(String idpId, String keyId, String targetIdpId, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneSigningKeyCredentialValidateBeforeCall(idpId, keyId, targetIdpId, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloneSigningKeyCredentialRequestBuilder {
        private final String idpId;
        private final String keyId;
        private final String targetIdpId;

        private CloneSigningKeyCredentialRequestBuilder(String idpId, String keyId, String targetIdpId) {
            this.idpId = idpId;
            this.keyId = keyId;
            this.targetIdpId = targetIdpId;
        }

        /**
         * Build call for cloneSigningKeyCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cloneSigningKeyCredentialCall(idpId, keyId, targetIdpId, _callback);
        }


        /**
         * Execute cloneSigningKeyCredential request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = cloneSigningKeyCredentialWithHttpInfo(idpId, keyId, targetIdpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cloneSigningKeyCredential request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return cloneSigningKeyCredentialWithHttpInfo(idpId, keyId, targetIdpId);
        }

        /**
         * Execute cloneSigningKeyCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return cloneSigningKeyCredentialAsync(idpId, keyId, targetIdpId, _callback);
        }
    }

    /**
     * Clone Signing Key Credential for IdP
     * Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
     * @param idpId  (required)
     * @param keyId  (required)
     * @param targetIdpId  (required)
     * @return CloneSigningKeyCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CloneSigningKeyCredentialRequestBuilder cloneSigningKeyCredential(String idpId, String keyId, String targetIdpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        if (targetIdpId == null) throw new IllegalArgumentException("\"targetIdpId\" is required but got null");
            

        return new CloneSigningKeyCredentialRequestBuilder(idpId, keyId, targetIdpId);
    }
    private okhttp3.Call deactivateIdpCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/lifecycle/deactivate"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateIdpValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling deactivateIdp(Async)");
        }

        return deactivateIdpCall(idpId, _callback);

    }


    private ApiResponse<IdentityProvider> deactivateIdpWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = deactivateIdpValidateBeforeCall(idpId, null);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateIdpAsync(String idpId, final ApiCallback<IdentityProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateIdpValidateBeforeCall(idpId, _callback);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateIdpRequestBuilder {
        private final String idpId;

        private DeactivateIdpRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for deactivateIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateIdpCall(idpId, _callback);
        }


        /**
         * Execute deactivateIdp request
         * @return IdentityProvider
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProvider execute() throws ApiException {
            ApiResponse<IdentityProvider> localVarResp = deactivateIdpWithHttpInfo(idpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateIdp request with HTTP info returned
         * @return ApiResponse&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProvider> executeWithHttpInfo() throws ApiException {
            return deactivateIdpWithHttpInfo(idpId);
        }

        /**
         * Execute deactivateIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProvider> _callback) throws ApiException {
            return deactivateIdpAsync(idpId, _callback);
        }
    }

    /**
     * Deactivate Identity Provider
     * Deactivates an active IdP.
     * @param idpId  (required)
     * @return DeactivateIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateIdpRequestBuilder deactivateIdp(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new DeactivateIdpRequestBuilder(idpId);
    }
    private okhttp3.Call deleteKeyCredentialCall(String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/credentials/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyCredentialValidateBeforeCall(String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteKeyCredential(Async)");
        }

        return deleteKeyCredentialCall(keyId, _callback);

    }


    private ApiResponse<Void> deleteKeyCredentialWithHttpInfo(String keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyCredentialValidateBeforeCall(keyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteKeyCredentialAsync(String keyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyCredentialValidateBeforeCall(keyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteKeyCredentialRequestBuilder {
        private final String keyId;

        private DeleteKeyCredentialRequestBuilder(String keyId) {
            this.keyId = keyId;
        }

        /**
         * Build call for deleteKeyCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteKeyCredentialCall(keyId, _callback);
        }


        /**
         * Execute deleteKeyCredential request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteKeyCredentialWithHttpInfo(keyId);
        }

        /**
         * Execute deleteKeyCredential request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteKeyCredentialWithHttpInfo(keyId);
        }

        /**
         * Execute deleteKeyCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteKeyCredentialAsync(keyId, _callback);
        }
    }

    /**
     * Delete Key
     * Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
     * @param keyId  (required)
     * @return DeleteKeyCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteKeyCredentialRequestBuilder deleteKeyCredential(String keyId) throws IllegalArgumentException {
        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new DeleteKeyCredentialRequestBuilder(keyId);
    }
    private okhttp3.Call enumerateIdpKeysCall(String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/credentials/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateIdpKeysValidateBeforeCall(String after, Integer limit, final ApiCallback _callback) throws ApiException {
        return enumerateIdpKeysCall(after, limit, _callback);

    }


    private ApiResponse<List<JsonWebKey>> enumerateIdpKeysWithHttpInfo(String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = enumerateIdpKeysValidateBeforeCall(after, limit, null);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateIdpKeysAsync(String after, Integer limit, final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateIdpKeysValidateBeforeCall(after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateIdpKeysRequestBuilder {
        private String after;
        private Integer limit;

        private EnumerateIdpKeysRequestBuilder() {
        }

        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of keys (optional)
         * @return EnumerateIdpKeysRequestBuilder
         */
        public EnumerateIdpKeysRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of key results in a page (optional, default to 20)
         * @return EnumerateIdpKeysRequestBuilder
         */
        public EnumerateIdpKeysRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for enumerateIdpKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateIdpKeysCall(after, limit, _callback);
        }


        /**
         * Execute enumerateIdpKeys request
         * @return List&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<JsonWebKey> execute() throws ApiException {
            ApiResponse<List<JsonWebKey>> localVarResp = enumerateIdpKeysWithHttpInfo(after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateIdpKeys request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JsonWebKey&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JsonWebKey>> executeWithHttpInfo() throws ApiException {
            return enumerateIdpKeysWithHttpInfo(after, limit);
        }

        /**
         * Execute enumerateIdpKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {
            return enumerateIdpKeysAsync(after, limit, _callback);
        }
    }

    /**
     * List Keys
     * Enumerates IdP key credentials.
     * @return EnumerateIdpKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateIdpKeysRequestBuilder enumerateIdpKeys() throws IllegalArgumentException {
        return new EnumerateIdpKeysRequestBuilder();
    }
    private okhttp3.Call generateCsrCall(String idpId, CsrMetadata csrMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = csrMetadata;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/csrs"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCsrValidateBeforeCall(String idpId, CsrMetadata csrMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling generateCsr(Async)");
        }

        // verify the required parameter 'csrMetadata' is set
        if (csrMetadata == null) {
            throw new ApiException("Missing the required parameter 'csrMetadata' when calling generateCsr(Async)");
        }

        return generateCsrCall(idpId, csrMetadata, _callback);

    }


    private ApiResponse<Csr> generateCsrWithHttpInfo(String idpId, CsrMetadata csrMetadata) throws ApiException {
        okhttp3.Call localVarCall = generateCsrValidateBeforeCall(idpId, csrMetadata, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateCsrAsync(String idpId, CsrMetadata csrMetadata, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCsrValidateBeforeCall(idpId, csrMetadata, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateCsrRequestBuilder {
        private final String idpId;
        private CsrMetadataSubject subject;
        private CsrMetadataSubjectAltNames subjectAltNames;

        private GenerateCsrRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Set subject
         * @param subject  (optional)
         * @return GenerateCsrRequestBuilder
         */
        public GenerateCsrRequestBuilder subject(CsrMetadataSubject subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set subjectAltNames
         * @param subjectAltNames  (optional)
         * @return GenerateCsrRequestBuilder
         */
        public GenerateCsrRequestBuilder subjectAltNames(CsrMetadataSubjectAltNames subjectAltNames) {
            this.subjectAltNames = subjectAltNames;
            return this;
        }
        
        /**
         * Build call for generateCsr
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            return generateCsrCall(idpId, csrMetadata, _callback);
        }

        private CsrMetadata buildBodyParams() {
            CsrMetadata csrMetadata = new CsrMetadata();
            csrMetadata.subject(this.subject);
            csrMetadata.subjectAltNames(this.subjectAltNames);
            return csrMetadata;
        }

        /**
         * Execute generateCsr request
         * @return Csr
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public Csr execute() throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            ApiResponse<Csr> localVarResp = generateCsrWithHttpInfo(idpId, csrMetadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateCsr request with HTTP info returned
         * @return ApiResponse&lt;Csr&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Csr> executeWithHttpInfo() throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            return generateCsrWithHttpInfo(idpId, csrMetadata);
        }

        /**
         * Execute generateCsr request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Csr> _callback) throws ApiException {
            CsrMetadata csrMetadata = buildBodyParams();
            return generateCsrAsync(idpId, csrMetadata, _callback);
        }
    }

    /**
     * Generate Certificate Signing Request for IdP
     * Generates a new key pair and returns a Certificate Signing Request for it.
     * @param idpId  (required)
     * @param csrMetadata  (required)
     * @return GenerateCsrRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCsrRequestBuilder generateCsr(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new GenerateCsrRequestBuilder(idpId);
    }
    private okhttp3.Call generateNewSigningKeyCredentialCall(String idpId, Integer validityYears, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/keys/generate"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validityYears != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validityYears", validityYears));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateNewSigningKeyCredentialValidateBeforeCall(String idpId, Integer validityYears, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling generateNewSigningKeyCredential(Async)");
        }

        // verify the required parameter 'validityYears' is set
        if (validityYears == null) {
            throw new ApiException("Missing the required parameter 'validityYears' when calling generateNewSigningKeyCredential(Async)");
        }

        return generateNewSigningKeyCredentialCall(idpId, validityYears, _callback);

    }


    private ApiResponse<JsonWebKey> generateNewSigningKeyCredentialWithHttpInfo(String idpId, Integer validityYears) throws ApiException {
        okhttp3.Call localVarCall = generateNewSigningKeyCredentialValidateBeforeCall(idpId, validityYears, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateNewSigningKeyCredentialAsync(String idpId, Integer validityYears, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateNewSigningKeyCredentialValidateBeforeCall(idpId, validityYears, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateNewSigningKeyCredentialRequestBuilder {
        private final String idpId;
        private final Integer validityYears;

        private GenerateNewSigningKeyCredentialRequestBuilder(String idpId, Integer validityYears) {
            this.idpId = idpId;
            this.validityYears = validityYears;
        }

        /**
         * Build call for generateNewSigningKeyCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateNewSigningKeyCredentialCall(idpId, validityYears, _callback);
        }


        /**
         * Execute generateNewSigningKeyCredential request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = generateNewSigningKeyCredentialWithHttpInfo(idpId, validityYears);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateNewSigningKeyCredential request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return generateNewSigningKeyCredentialWithHttpInfo(idpId, validityYears);
        }

        /**
         * Execute generateNewSigningKeyCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return generateNewSigningKeyCredentialAsync(idpId, validityYears, _callback);
        }
    }

    /**
     * Generate New IdP Signing Key Credential
     * Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
     * @param idpId  (required)
     * @param validityYears expiry of the IdP Key Credential (required)
     * @return GenerateNewSigningKeyCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenerateNewSigningKeyCredentialRequestBuilder generateNewSigningKeyCredential(String idpId, Integer validityYears) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (validityYears == null) throw new IllegalArgumentException("\"validityYears\" is required but got null");
        return new GenerateNewSigningKeyCredentialRequestBuilder(idpId, validityYears);
    }
    private okhttp3.Call getByIdpCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdpValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getByIdp(Async)");
        }

        return getByIdpCall(idpId, _callback);

    }


    private ApiResponse<IdentityProvider> getByIdpWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = getByIdpValidateBeforeCall(idpId, null);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdpAsync(String idpId, final ApiCallback<IdentityProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdpValidateBeforeCall(idpId, _callback);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdpRequestBuilder {
        private final String idpId;

        private GetByIdpRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for getByIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdpCall(idpId, _callback);
        }


        /**
         * Execute getByIdp request
         * @return IdentityProvider
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProvider execute() throws ApiException {
            ApiResponse<IdentityProvider> localVarResp = getByIdpWithHttpInfo(idpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIdp request with HTTP info returned
         * @return ApiResponse&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProvider> executeWithHttpInfo() throws ApiException {
            return getByIdpWithHttpInfo(idpId);
        }

        /**
         * Execute getByIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProvider> _callback) throws ApiException {
            return getByIdpAsync(idpId, _callback);
        }
    }

    /**
     * Get Identity Provider
     * Fetches an IdP by &#x60;id&#x60;.
     * @param idpId  (required)
     * @return GetByIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdpRequestBuilder getByIdp(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new GetByIdpRequestBuilder(idpId);
    }
    private okhttp3.Call getCsrByIdpCall(String idpId, String csrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/csrs/{csrId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "csrId" + "}", localVarApiClient.escapeString(csrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCsrByIdpValidateBeforeCall(String idpId, String csrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getCsrByIdp(Async)");
        }

        // verify the required parameter 'csrId' is set
        if (csrId == null) {
            throw new ApiException("Missing the required parameter 'csrId' when calling getCsrByIdp(Async)");
        }

        return getCsrByIdpCall(idpId, csrId, _callback);

    }


    private ApiResponse<Csr> getCsrByIdpWithHttpInfo(String idpId, String csrId) throws ApiException {
        okhttp3.Call localVarCall = getCsrByIdpValidateBeforeCall(idpId, csrId, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCsrByIdpAsync(String idpId, String csrId, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCsrByIdpValidateBeforeCall(idpId, csrId, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCsrByIdpRequestBuilder {
        private final String idpId;
        private final String csrId;

        private GetCsrByIdpRequestBuilder(String idpId, String csrId) {
            this.idpId = idpId;
            this.csrId = csrId;
        }

        /**
         * Build call for getCsrByIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCsrByIdpCall(idpId, csrId, _callback);
        }


        /**
         * Execute getCsrByIdp request
         * @return Csr
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Csr execute() throws ApiException {
            ApiResponse<Csr> localVarResp = getCsrByIdpWithHttpInfo(idpId, csrId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCsrByIdp request with HTTP info returned
         * @return ApiResponse&lt;Csr&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Csr> executeWithHttpInfo() throws ApiException {
            return getCsrByIdpWithHttpInfo(idpId, csrId);
        }

        /**
         * Execute getCsrByIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Csr> _callback) throws ApiException {
            return getCsrByIdpAsync(idpId, csrId, _callback);
        }
    }

    /**
     * 
     * Gets a specific Certificate Signing Request model by id
     * @param idpId  (required)
     * @param csrId  (required)
     * @return GetCsrByIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCsrByIdpRequestBuilder getCsrByIdp(String idpId, String csrId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (csrId == null) throw new IllegalArgumentException("\"csrId\" is required but got null");
            

        return new GetCsrByIdpRequestBuilder(idpId, csrId);
    }
    private okhttp3.Call getKeyCredentialByIdpCall(String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/credentials/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyCredentialByIdpValidateBeforeCall(String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getKeyCredentialByIdp(Async)");
        }

        return getKeyCredentialByIdpCall(keyId, _callback);

    }


    private ApiResponse<JsonWebKey> getKeyCredentialByIdpWithHttpInfo(String keyId) throws ApiException {
        okhttp3.Call localVarCall = getKeyCredentialByIdpValidateBeforeCall(keyId, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKeyCredentialByIdpAsync(String keyId, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyCredentialByIdpValidateBeforeCall(keyId, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKeyCredentialByIdpRequestBuilder {
        private final String keyId;

        private GetKeyCredentialByIdpRequestBuilder(String keyId) {
            this.keyId = keyId;
        }

        /**
         * Build call for getKeyCredentialByIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKeyCredentialByIdpCall(keyId, _callback);
        }


        /**
         * Execute getKeyCredentialByIdp request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = getKeyCredentialByIdpWithHttpInfo(keyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKeyCredentialByIdp request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return getKeyCredentialByIdpWithHttpInfo(keyId);
        }

        /**
         * Execute getKeyCredentialByIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return getKeyCredentialByIdpAsync(keyId, _callback);
        }
    }

    /**
     * Get Key
     * Gets a specific IdP Key Credential by &#x60;kid&#x60;
     * @param keyId  (required)
     * @return GetKeyCredentialByIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetKeyCredentialByIdpRequestBuilder getKeyCredentialByIdp(String keyId) throws IllegalArgumentException {
        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new GetKeyCredentialByIdpRequestBuilder(keyId);
    }
    private okhttp3.Call getLinkedUserByIdCall(String idpId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/users/{userId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkedUserByIdValidateBeforeCall(String idpId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getLinkedUserById(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getLinkedUserById(Async)");
        }

        return getLinkedUserByIdCall(idpId, userId, _callback);

    }


    private ApiResponse<IdentityProviderApplicationUser> getLinkedUserByIdWithHttpInfo(String idpId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getLinkedUserByIdValidateBeforeCall(idpId, userId, null);
        Type localVarReturnType = new TypeToken<IdentityProviderApplicationUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLinkedUserByIdAsync(String idpId, String userId, final ApiCallback<IdentityProviderApplicationUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkedUserByIdValidateBeforeCall(idpId, userId, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderApplicationUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLinkedUserByIdRequestBuilder {
        private final String idpId;
        private final String userId;

        private GetLinkedUserByIdRequestBuilder(String idpId, String userId) {
            this.idpId = idpId;
            this.userId = userId;
        }

        /**
         * Build call for getLinkedUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLinkedUserByIdCall(idpId, userId, _callback);
        }


        /**
         * Execute getLinkedUserById request
         * @return IdentityProviderApplicationUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProviderApplicationUser execute() throws ApiException {
            ApiResponse<IdentityProviderApplicationUser> localVarResp = getLinkedUserByIdWithHttpInfo(idpId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLinkedUserById request with HTTP info returned
         * @return ApiResponse&lt;IdentityProviderApplicationUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProviderApplicationUser> executeWithHttpInfo() throws ApiException {
            return getLinkedUserByIdWithHttpInfo(idpId, userId);
        }

        /**
         * Execute getLinkedUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProviderApplicationUser> _callback) throws ApiException {
            return getLinkedUserByIdAsync(idpId, userId, _callback);
        }
    }

    /**
     * 
     * Fetches a linked IdP user by ID
     * @param idpId  (required)
     * @param userId  (required)
     * @return GetLinkedUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkedUserByIdRequestBuilder getLinkedUserById(String idpId, String userId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetLinkedUserByIdRequestBuilder(idpId, userId);
    }
    private okhttp3.Call getSigningKeyCredentialByIdpCall(String idpId, String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/keys/{keyId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningKeyCredentialByIdpValidateBeforeCall(String idpId, String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getSigningKeyCredentialByIdp(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getSigningKeyCredentialByIdp(Async)");
        }

        return getSigningKeyCredentialByIdpCall(idpId, keyId, _callback);

    }


    private ApiResponse<JsonWebKey> getSigningKeyCredentialByIdpWithHttpInfo(String idpId, String keyId) throws ApiException {
        okhttp3.Call localVarCall = getSigningKeyCredentialByIdpValidateBeforeCall(idpId, keyId, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSigningKeyCredentialByIdpAsync(String idpId, String keyId, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningKeyCredentialByIdpValidateBeforeCall(idpId, keyId, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSigningKeyCredentialByIdpRequestBuilder {
        private final String idpId;
        private final String keyId;

        private GetSigningKeyCredentialByIdpRequestBuilder(String idpId, String keyId) {
            this.idpId = idpId;
            this.keyId = keyId;
        }

        /**
         * Build call for getSigningKeyCredentialByIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSigningKeyCredentialByIdpCall(idpId, keyId, _callback);
        }


        /**
         * Execute getSigningKeyCredentialByIdp request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = getSigningKeyCredentialByIdpWithHttpInfo(idpId, keyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSigningKeyCredentialByIdp request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return getSigningKeyCredentialByIdpWithHttpInfo(idpId, keyId);
        }

        /**
         * Execute getSigningKeyCredentialByIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return getSigningKeyCredentialByIdpAsync(idpId, keyId, _callback);
        }
    }

    /**
     * Get Signing Key Credential for IdP
     * Gets a specific IdP Key Credential by &#x60;kid&#x60;
     * @param idpId  (required)
     * @param keyId  (required)
     * @return GetSigningKeyCredentialByIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSigningKeyCredentialByIdpRequestBuilder getSigningKeyCredentialByIdp(String idpId, String keyId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new GetSigningKeyCredentialByIdpRequestBuilder(idpId, keyId);
    }
    private okhttp3.Call getSocialAuthTokensCall(String idpId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/users/{userId}/credentials/tokens"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSocialAuthTokensValidateBeforeCall(String idpId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getSocialAuthTokens(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSocialAuthTokens(Async)");
        }

        return getSocialAuthTokensCall(idpId, userId, _callback);

    }


    private ApiResponse<List<SocialAuthToken>> getSocialAuthTokensWithHttpInfo(String idpId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getSocialAuthTokensValidateBeforeCall(idpId, userId, null);
        Type localVarReturnType = new TypeToken<List<SocialAuthToken>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSocialAuthTokensAsync(String idpId, String userId, final ApiCallback<List<SocialAuthToken>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSocialAuthTokensValidateBeforeCall(idpId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<SocialAuthToken>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSocialAuthTokensRequestBuilder {
        private final String idpId;
        private final String userId;

        private GetSocialAuthTokensRequestBuilder(String idpId, String userId) {
            this.idpId = idpId;
            this.userId = userId;
        }

        /**
         * Build call for getSocialAuthTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSocialAuthTokensCall(idpId, userId, _callback);
        }


        /**
         * Execute getSocialAuthTokens request
         * @return List&lt;SocialAuthToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<SocialAuthToken> execute() throws ApiException {
            ApiResponse<List<SocialAuthToken>> localVarResp = getSocialAuthTokensWithHttpInfo(idpId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSocialAuthTokens request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SocialAuthToken&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SocialAuthToken>> executeWithHttpInfo() throws ApiException {
            return getSocialAuthTokensWithHttpInfo(idpId, userId);
        }

        /**
         * Execute getSocialAuthTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SocialAuthToken>> _callback) throws ApiException {
            return getSocialAuthTokensAsync(idpId, userId, _callback);
        }
    }

    /**
     * Social Authentication Token Operation
     * Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
     * @param idpId  (required)
     * @param userId  (required)
     * @return GetSocialAuthTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSocialAuthTokensRequestBuilder getSocialAuthTokens(String idpId, String userId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetSocialAuthTokensRequestBuilder(idpId, userId);
    }
    private okhttp3.Call getUserCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/users"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling getUser(Async)");
        }

        return getUserCall(idpId, _callback);

    }


    private ApiResponse<List<IdentityProviderApplicationUser>> getUserWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(idpId, null);
        Type localVarReturnType = new TypeToken<List<IdentityProviderApplicationUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAsync(String idpId, final ApiCallback<List<IdentityProviderApplicationUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(idpId, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProviderApplicationUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserRequestBuilder {
        private final String idpId;

        private GetUserRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for getUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCall(idpId, _callback);
        }


        /**
         * Execute getUser request
         * @return List&lt;IdentityProviderApplicationUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<IdentityProviderApplicationUser> execute() throws ApiException {
            ApiResponse<List<IdentityProviderApplicationUser>> localVarResp = getUserWithHttpInfo(idpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUser request with HTTP info returned
         * @return ApiResponse&lt;List&lt;IdentityProviderApplicationUser&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<IdentityProviderApplicationUser>> executeWithHttpInfo() throws ApiException {
            return getUserWithHttpInfo(idpId);
        }

        /**
         * Execute getUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<IdentityProviderApplicationUser>> _callback) throws ApiException {
            return getUserAsync(idpId, _callback);
        }
    }

    /**
     * Find Users
     * Find all the users linked to an identity provider
     * @param idpId  (required)
     * @return GetUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserRequestBuilder getUser(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new GetUserRequestBuilder(idpId);
    }
    private okhttp3.Call linkUserToIdpWithoutTransactionCall(String idpId, String userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userIdentityProviderLinkRequest;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/users/{userId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkUserToIdpWithoutTransactionValidateBeforeCall(String idpId, String userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling linkUserToIdpWithoutTransaction(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling linkUserToIdpWithoutTransaction(Async)");
        }

        // verify the required parameter 'userIdentityProviderLinkRequest' is set
        if (userIdentityProviderLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'userIdentityProviderLinkRequest' when calling linkUserToIdpWithoutTransaction(Async)");
        }

        return linkUserToIdpWithoutTransactionCall(idpId, userId, userIdentityProviderLinkRequest, _callback);

    }


    private ApiResponse<IdentityProviderApplicationUser> linkUserToIdpWithoutTransactionWithHttpInfo(String idpId, String userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = linkUserToIdpWithoutTransactionValidateBeforeCall(idpId, userId, userIdentityProviderLinkRequest, null);
        Type localVarReturnType = new TypeToken<IdentityProviderApplicationUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call linkUserToIdpWithoutTransactionAsync(String idpId, String userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, final ApiCallback<IdentityProviderApplicationUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkUserToIdpWithoutTransactionValidateBeforeCall(idpId, userId, userIdentityProviderLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderApplicationUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LinkUserToIdpWithoutTransactionRequestBuilder {
        private final String idpId;
        private final String userId;
        private String externalId;

        private LinkUserToIdpWithoutTransactionRequestBuilder(String idpId, String userId) {
            this.idpId = idpId;
            this.userId = userId;
        }

        /**
         * Set externalId
         * @param externalId  (optional)
         * @return LinkUserToIdpWithoutTransactionRequestBuilder
         */
        public LinkUserToIdpWithoutTransactionRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Build call for linkUserToIdpWithoutTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserIdentityProviderLinkRequest userIdentityProviderLinkRequest = buildBodyParams();
            return linkUserToIdpWithoutTransactionCall(idpId, userId, userIdentityProviderLinkRequest, _callback);
        }

        private UserIdentityProviderLinkRequest buildBodyParams() {
            UserIdentityProviderLinkRequest userIdentityProviderLinkRequest = new UserIdentityProviderLinkRequest();
            userIdentityProviderLinkRequest.externalId(this.externalId);
            return userIdentityProviderLinkRequest;
        }

        /**
         * Execute linkUserToIdpWithoutTransaction request
         * @return IdentityProviderApplicationUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProviderApplicationUser execute() throws ApiException {
            UserIdentityProviderLinkRequest userIdentityProviderLinkRequest = buildBodyParams();
            ApiResponse<IdentityProviderApplicationUser> localVarResp = linkUserToIdpWithoutTransactionWithHttpInfo(idpId, userId, userIdentityProviderLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute linkUserToIdpWithoutTransaction request with HTTP info returned
         * @return ApiResponse&lt;IdentityProviderApplicationUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProviderApplicationUser> executeWithHttpInfo() throws ApiException {
            UserIdentityProviderLinkRequest userIdentityProviderLinkRequest = buildBodyParams();
            return linkUserToIdpWithoutTransactionWithHttpInfo(idpId, userId, userIdentityProviderLinkRequest);
        }

        /**
         * Execute linkUserToIdpWithoutTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProviderApplicationUser> _callback) throws ApiException {
            UserIdentityProviderLinkRequest userIdentityProviderLinkRequest = buildBodyParams();
            return linkUserToIdpWithoutTransactionAsync(idpId, userId, userIdentityProviderLinkRequest, _callback);
        }
    }

    /**
     * Link a user to a Social IdP without a transaction
     * Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
     * @param idpId  (required)
     * @param userId  (required)
     * @param userIdentityProviderLinkRequest  (required)
     * @return LinkUserToIdpWithoutTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LinkUserToIdpWithoutTransactionRequestBuilder linkUserToIdpWithoutTransaction(String idpId, String userId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new LinkUserToIdpWithoutTransactionRequestBuilder(idpId, userId);
    }
    private okhttp3.Call listCall(String q, String after, Integer limit, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String q, String after, Integer limit, String type, final ApiCallback _callback) throws ApiException {
        return listCall(q, after, limit, type, _callback);

    }


    private ApiResponse<List<IdentityProvider>> listWithHttpInfo(String q, String after, Integer limit, String type) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(q, after, limit, type, null);
        Type localVarReturnType = new TypeToken<List<IdentityProvider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String q, String after, Integer limit, String type, final ApiCallback<List<IdentityProvider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(q, after, limit, type, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProvider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String q;
        private String after;
        private Integer limit;
        private String type;

        private ListRequestBuilder() {
        }

        /**
         * Set q
         * @param q Searches the name property of IdPs for matching value (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of IdPs (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of IdP results in a page (optional, default to 20)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set type
         * @param type Filters IdPs by type (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(q, after, limit, type, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<IdentityProvider> execute() throws ApiException {
            ApiResponse<List<IdentityProvider>> localVarResp = listWithHttpInfo(q, after, limit, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;IdentityProvider&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<IdentityProvider>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(q, after, limit, type);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<IdentityProvider>> _callback) throws ApiException {
            return listAsync(q, after, limit, type, _callback);
        }
    }

    /**
     * List Identity Providers
     * Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listCsrsForCertificateSigningRequestsCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/csrs"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCsrsForCertificateSigningRequestsValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling listCsrsForCertificateSigningRequests(Async)");
        }

        return listCsrsForCertificateSigningRequestsCall(idpId, _callback);

    }


    private ApiResponse<List<Csr>> listCsrsForCertificateSigningRequestsWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = listCsrsForCertificateSigningRequestsValidateBeforeCall(idpId, null);
        Type localVarReturnType = new TypeToken<List<Csr>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCsrsForCertificateSigningRequestsAsync(String idpId, final ApiCallback<List<Csr>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCsrsForCertificateSigningRequestsValidateBeforeCall(idpId, _callback);
        Type localVarReturnType = new TypeToken<List<Csr>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCsrsForCertificateSigningRequestsRequestBuilder {
        private final String idpId;

        private ListCsrsForCertificateSigningRequestsRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for listCsrsForCertificateSigningRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCsrsForCertificateSigningRequestsCall(idpId, _callback);
        }


        /**
         * Execute listCsrsForCertificateSigningRequests request
         * @return List&lt;Csr&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Csr> execute() throws ApiException {
            ApiResponse<List<Csr>> localVarResp = listCsrsForCertificateSigningRequestsWithHttpInfo(idpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCsrsForCertificateSigningRequests request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Csr&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Csr>> executeWithHttpInfo() throws ApiException {
            return listCsrsForCertificateSigningRequestsWithHttpInfo(idpId);
        }

        /**
         * Execute listCsrsForCertificateSigningRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Csr>> _callback) throws ApiException {
            return listCsrsForCertificateSigningRequestsAsync(idpId, _callback);
        }
    }

    /**
     * List Certificate Signing Requests for IdP
     * Enumerates Certificate Signing Requests for an IdP
     * @param idpId  (required)
     * @return ListCsrsForCertificateSigningRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCsrsForCertificateSigningRequestsRequestBuilder listCsrsForCertificateSigningRequests(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new ListCsrsForCertificateSigningRequestsRequestBuilder(idpId);
    }
    private okhttp3.Call listSigningKeyCredentialsCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/keys"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSigningKeyCredentialsValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling listSigningKeyCredentials(Async)");
        }

        return listSigningKeyCredentialsCall(idpId, _callback);

    }


    private ApiResponse<List<JsonWebKey>> listSigningKeyCredentialsWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = listSigningKeyCredentialsValidateBeforeCall(idpId, null);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSigningKeyCredentialsAsync(String idpId, final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSigningKeyCredentialsValidateBeforeCall(idpId, _callback);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSigningKeyCredentialsRequestBuilder {
        private final String idpId;

        private ListSigningKeyCredentialsRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for listSigningKeyCredentials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSigningKeyCredentialsCall(idpId, _callback);
        }


        /**
         * Execute listSigningKeyCredentials request
         * @return List&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<JsonWebKey> execute() throws ApiException {
            ApiResponse<List<JsonWebKey>> localVarResp = listSigningKeyCredentialsWithHttpInfo(idpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSigningKeyCredentials request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JsonWebKey&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JsonWebKey>> executeWithHttpInfo() throws ApiException {
            return listSigningKeyCredentialsWithHttpInfo(idpId);
        }

        /**
         * Execute listSigningKeyCredentials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {
            return listSigningKeyCredentialsAsync(idpId, _callback);
        }
    }

    /**
     * List Signing Key Credentials for IdP
     * Enumerates signing key credentials for an IdP
     * @param idpId  (required)
     * @return ListSigningKeyCredentialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListSigningKeyCredentialsRequestBuilder listSigningKeyCredentials(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new ListSigningKeyCredentialsRequestBuilder(idpId);
    }
    private okhttp3.Call removeIdpCall(String idpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIdpValidateBeforeCall(String idpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling removeIdp(Async)");
        }

        return removeIdpCall(idpId, _callback);

    }


    private ApiResponse<Void> removeIdpWithHttpInfo(String idpId) throws ApiException {
        okhttp3.Call localVarCall = removeIdpValidateBeforeCall(idpId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeIdpAsync(String idpId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIdpValidateBeforeCall(idpId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveIdpRequestBuilder {
        private final String idpId;

        private RemoveIdpRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Build call for removeIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeIdpCall(idpId, _callback);
        }


        /**
         * Execute removeIdp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeIdpWithHttpInfo(idpId);
        }

        /**
         * Execute removeIdp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeIdpWithHttpInfo(idpId);
        }

        /**
         * Execute removeIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeIdpAsync(idpId, _callback);
        }
    }

    /**
     * Delete Identity Provider
     * Removes an IdP from your organization.
     * @param idpId  (required)
     * @return RemoveIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveIdpRequestBuilder removeIdp(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new RemoveIdpRequestBuilder(idpId);
    }
    private okhttp3.Call revokeCsrForIdentityProviderCall(String idpId, String csrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/csrs/{csrId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "csrId" + "}", localVarApiClient.escapeString(csrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCsrForIdentityProviderValidateBeforeCall(String idpId, String csrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling revokeCsrForIdentityProvider(Async)");
        }

        // verify the required parameter 'csrId' is set
        if (csrId == null) {
            throw new ApiException("Missing the required parameter 'csrId' when calling revokeCsrForIdentityProvider(Async)");
        }

        return revokeCsrForIdentityProviderCall(idpId, csrId, _callback);

    }


    private ApiResponse<Void> revokeCsrForIdentityProviderWithHttpInfo(String idpId, String csrId) throws ApiException {
        okhttp3.Call localVarCall = revokeCsrForIdentityProviderValidateBeforeCall(idpId, csrId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeCsrForIdentityProviderAsync(String idpId, String csrId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCsrForIdentityProviderValidateBeforeCall(idpId, csrId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeCsrForIdentityProviderRequestBuilder {
        private final String idpId;
        private final String csrId;

        private RevokeCsrForIdentityProviderRequestBuilder(String idpId, String csrId) {
            this.idpId = idpId;
            this.csrId = csrId;
        }

        /**
         * Build call for revokeCsrForIdentityProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeCsrForIdentityProviderCall(idpId, csrId, _callback);
        }


        /**
         * Execute revokeCsrForIdentityProvider request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeCsrForIdentityProviderWithHttpInfo(idpId, csrId);
        }

        /**
         * Execute revokeCsrForIdentityProvider request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeCsrForIdentityProviderWithHttpInfo(idpId, csrId);
        }

        /**
         * Execute revokeCsrForIdentityProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeCsrForIdentityProviderAsync(idpId, csrId, _callback);
        }
    }

    /**
     * 
     * Revoke a Certificate Signing Request and delete the key pair from the IdP
     * @param idpId  (required)
     * @param csrId  (required)
     * @return RevokeCsrForIdentityProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeCsrForIdentityProviderRequestBuilder revokeCsrForIdentityProvider(String idpId, String csrId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (csrId == null) throw new IllegalArgumentException("\"csrId\" is required but got null");
            

        return new RevokeCsrForIdentityProviderRequestBuilder(idpId, csrId);
    }
    private okhttp3.Call unlinkUserCall(String idpId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/users/{userId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkUserValidateBeforeCall(String idpId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling unlinkUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unlinkUser(Async)");
        }

        return unlinkUserCall(idpId, userId, _callback);

    }


    private ApiResponse<Void> unlinkUserWithHttpInfo(String idpId, String userId) throws ApiException {
        okhttp3.Call localVarCall = unlinkUserValidateBeforeCall(idpId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unlinkUserAsync(String idpId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkUserValidateBeforeCall(idpId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnlinkUserRequestBuilder {
        private final String idpId;
        private final String userId;

        private UnlinkUserRequestBuilder(String idpId, String userId) {
            this.idpId = idpId;
            this.userId = userId;
        }

        /**
         * Build call for unlinkUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unlinkUserCall(idpId, userId, _callback);
        }


        /**
         * Execute unlinkUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unlinkUserWithHttpInfo(idpId, userId);
        }

        /**
         * Execute unlinkUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unlinkUserWithHttpInfo(idpId, userId);
        }

        /**
         * Execute unlinkUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unlinkUserAsync(idpId, userId, _callback);
        }
    }

    /**
     * Unlink User from IdP
     * Removes the link between the Okta user and the IdP user.
     * @param idpId  (required)
     * @param userId  (required)
     * @return UnlinkUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public UnlinkUserRequestBuilder unlinkUser(String idpId, String userId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UnlinkUserRequestBuilder(idpId, userId);
    }
    private okhttp3.Call updateConfigurationCall(String idpId, IdentityProvider identityProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProvider;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationValidateBeforeCall(String idpId, IdentityProvider identityProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling updateConfiguration(Async)");
        }

        // verify the required parameter 'identityProvider' is set
        if (identityProvider == null) {
            throw new ApiException("Missing the required parameter 'identityProvider' when calling updateConfiguration(Async)");
        }

        return updateConfigurationCall(idpId, identityProvider, _callback);

    }


    private ApiResponse<IdentityProvider> updateConfigurationWithHttpInfo(String idpId, IdentityProvider identityProvider) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(idpId, identityProvider, null);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConfigurationAsync(String idpId, IdentityProvider identityProvider, final ApiCallback<IdentityProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(idpId, identityProvider, _callback);
        Type localVarReturnType = new TypeToken<IdentityProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateConfigurationRequestBuilder {
        private final String idpId;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String id;
        private String issuerMode;
        private OffsetDateTime lastUpdated;
        private String name;
        private IdentityProviderPolicy policy;
        private Protocol protocol;
        private String status;
        private String type;

        private UpdateConfigurationRequestBuilder(String idpId) {
            this.idpId = idpId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuerMode
         * @param issuerMode  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder issuerMode(String issuerMode) {
            this.issuerMode = issuerMode;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set policy
         * @param policy  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder policy(IdentityProviderPolicy policy) {
            this.policy = policy;
            return this;
        }
        
        /**
         * Set protocol
         * @param protocol  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder protocol(Protocol protocol) {
            this.protocol = protocol;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            return updateConfigurationCall(idpId, identityProvider, _callback);
        }

        private IdentityProvider buildBodyParams() {
            IdentityProvider identityProvider = new IdentityProvider();
            identityProvider.links(this.links);
            identityProvider.created(this.created);
            identityProvider.id(this.id);
            if (this.issuerMode != null)
            identityProvider.issuerMode(IdentityProvider.IssuerModeEnum.fromValue(this.issuerMode));
            identityProvider.lastUpdated(this.lastUpdated);
            identityProvider.name(this.name);
            identityProvider.policy(this.policy);
            identityProvider.protocol(this.protocol);
            if (this.status != null)
            identityProvider.status(IdentityProvider.StatusEnum.fromValue(this.status));
            if (this.type != null)
            identityProvider.type(IdentityProvider.TypeEnum.fromValue(this.type));
            return identityProvider;
        }

        /**
         * Execute updateConfiguration request
         * @return IdentityProvider
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IdentityProvider execute() throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            ApiResponse<IdentityProvider> localVarResp = updateConfigurationWithHttpInfo(idpId, identityProvider);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateConfiguration request with HTTP info returned
         * @return ApiResponse&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentityProvider> executeWithHttpInfo() throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            return updateConfigurationWithHttpInfo(idpId, identityProvider);
        }

        /**
         * Execute updateConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentityProvider> _callback) throws ApiException {
            IdentityProvider identityProvider = buildBodyParams();
            return updateConfigurationAsync(idpId, identityProvider, _callback);
        }
    }

    /**
     * Update Identity Provider
     * Updates the configuration for an IdP.
     * @param idpId  (required)
     * @param identityProvider  (required)
     * @return UpdateConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigurationRequestBuilder updateConfiguration(String idpId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        return new UpdateConfigurationRequestBuilder(idpId);
    }
    private okhttp3.Call updateCsrLifecyclePublishCall(String idpId, String csrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish"
            .replace("{" + "idpId" + "}", localVarApiClient.escapeString(idpId.toString()))
            .replace("{" + "csrId" + "}", localVarApiClient.escapeString(csrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCsrLifecyclePublishValidateBeforeCall(String idpId, String csrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpId' is set
        if (idpId == null) {
            throw new ApiException("Missing the required parameter 'idpId' when calling updateCsrLifecyclePublish(Async)");
        }

        // verify the required parameter 'csrId' is set
        if (csrId == null) {
            throw new ApiException("Missing the required parameter 'csrId' when calling updateCsrLifecyclePublish(Async)");
        }

        return updateCsrLifecyclePublishCall(idpId, csrId, _callback);

    }


    private ApiResponse<JsonWebKey> updateCsrLifecyclePublishWithHttpInfo(String idpId, String csrId) throws ApiException {
        okhttp3.Call localVarCall = updateCsrLifecyclePublishValidateBeforeCall(idpId, csrId, null);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCsrLifecyclePublishAsync(String idpId, String csrId, final ApiCallback<JsonWebKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCsrLifecyclePublishValidateBeforeCall(idpId, csrId, _callback);
        Type localVarReturnType = new TypeToken<JsonWebKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCsrLifecyclePublishRequestBuilder {
        private final String idpId;
        private final String csrId;

        private UpdateCsrLifecyclePublishRequestBuilder(String idpId, String csrId) {
            this.idpId = idpId;
            this.csrId = csrId;
        }

        /**
         * Build call for updateCsrLifecyclePublish
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateCsrLifecyclePublishCall(idpId, csrId, _callback);
        }


        /**
         * Execute updateCsrLifecyclePublish request
         * @return JsonWebKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public JsonWebKey execute() throws ApiException {
            ApiResponse<JsonWebKey> localVarResp = updateCsrLifecyclePublishWithHttpInfo(idpId, csrId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCsrLifecyclePublish request with HTTP info returned
         * @return ApiResponse&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonWebKey> executeWithHttpInfo() throws ApiException {
            return updateCsrLifecyclePublishWithHttpInfo(idpId, csrId);
        }

        /**
         * Execute updateCsrLifecyclePublish request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonWebKey> _callback) throws ApiException {
            return updateCsrLifecyclePublishAsync(idpId, csrId, _callback);
        }
    }

    /**
     * 
     * Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
     * @param idpId  (required)
     * @param csrId  (required)
     * @return UpdateCsrLifecyclePublishRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCsrLifecyclePublishRequestBuilder updateCsrLifecyclePublish(String idpId, String csrId) throws IllegalArgumentException {
        if (idpId == null) throw new IllegalArgumentException("\"idpId\" is required but got null");
            

        if (csrId == null) throw new IllegalArgumentException("\"csrId\" is required but got null");
            

        return new UpdateCsrLifecyclePublishRequestBuilder(idpId, csrId);
    }
}
