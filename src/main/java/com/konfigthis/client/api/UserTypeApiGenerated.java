/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.UserType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserTypeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserTypeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserTypeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewUserTypeCall(UserType userType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userType;

        // create path and map variables
        String localVarPath = "/api/v1/meta/types/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewUserTypeValidateBeforeCall(UserType userType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userType' is set
        if (userType == null) {
            throw new ApiException("Missing the required parameter 'userType' when calling createNewUserType(Async)");
        }

        return createNewUserTypeCall(userType, _callback);

    }


    private ApiResponse<UserType> createNewUserTypeWithHttpInfo(UserType userType) throws ApiException {
        okhttp3.Call localVarCall = createNewUserTypeValidateBeforeCall(userType, null);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewUserTypeAsync(UserType userType, final ApiCallback<UserType> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewUserTypeValidateBeforeCall(userType, _callback);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewUserTypeRequestBuilder {
        private String description;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String createdBy;
        private Boolean _default;
        private String displayName;
        private String id;
        private OffsetDateTime lastUpdated;
        private String lastUpdatedBy;
        private String name;

        private CreateNewUserTypeRequestBuilder() {
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set lastUpdatedBy
         * @param lastUpdatedBy  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder lastUpdatedBy(String lastUpdatedBy) {
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewUserTypeRequestBuilder
         */
        public CreateNewUserTypeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createNewUserType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserType userType = buildBodyParams();
            return createNewUserTypeCall(userType, _callback);
        }

        private UserType buildBodyParams() {
            UserType userType = new UserType();
            userType.description(this.description);
            userType.links(this.links);
            userType.created(this.created);
            userType.createdBy(this.createdBy);
            userType._default(this._default);
            userType.displayName(this.displayName);
            userType.id(this.id);
            userType.lastUpdated(this.lastUpdated);
            userType.lastUpdatedBy(this.lastUpdatedBy);
            userType.name(this.name);
            return userType;
        }

        /**
         * Execute createNewUserType request
         * @return UserType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserType execute() throws ApiException {
            UserType userType = buildBodyParams();
            ApiResponse<UserType> localVarResp = createNewUserTypeWithHttpInfo(userType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewUserType request with HTTP info returned
         * @return ApiResponse&lt;UserType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserType> executeWithHttpInfo() throws ApiException {
            UserType userType = buildBodyParams();
            return createNewUserTypeWithHttpInfo(userType);
        }

        /**
         * Execute createNewUserType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserType> _callback) throws ApiException {
            UserType userType = buildBodyParams();
            return createNewUserTypeAsync(userType, _callback);
        }
    }

    /**
     * 
     * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
     * @param userType  (required)
     * @return CreateNewUserTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewUserTypeRequestBuilder createNewUserType() throws IllegalArgumentException {
        return new CreateNewUserTypeRequestBuilder();
    }
    private okhttp3.Call deletePermanentlyCall(String typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/types/user/{typeId}"
            .replace("{" + "typeId" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermanentlyValidateBeforeCall(String typeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling deletePermanently(Async)");
        }

        return deletePermanentlyCall(typeId, _callback);

    }


    private ApiResponse<Void> deletePermanentlyWithHttpInfo(String typeId) throws ApiException {
        okhttp3.Call localVarCall = deletePermanentlyValidateBeforeCall(typeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePermanentlyAsync(String typeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermanentlyValidateBeforeCall(typeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePermanentlyRequestBuilder {
        private final String typeId;

        private DeletePermanentlyRequestBuilder(String typeId) {
            this.typeId = typeId;
        }

        /**
         * Build call for deletePermanently
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePermanentlyCall(typeId, _callback);
        }


        /**
         * Execute deletePermanently request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePermanentlyWithHttpInfo(typeId);
        }

        /**
         * Execute deletePermanently request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePermanentlyWithHttpInfo(typeId);
        }

        /**
         * Execute deletePermanently request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePermanentlyAsync(typeId, _callback);
        }
    }

    /**
     * 
     * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
     * @param typeId  (required)
     * @return DeletePermanentlyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeletePermanentlyRequestBuilder deletePermanently(String typeId) throws IllegalArgumentException {
        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
            

        return new DeletePermanentlyRequestBuilder(typeId);
    }
    private okhttp3.Call getAllUserTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/types/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllUserTypesCall(_callback);

    }


    private ApiResponse<List<UserType>> getAllUserTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllUserTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserTypesAsync(final ApiCallback<List<UserType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserTypesRequestBuilder {

        private GetAllUserTypesRequestBuilder() {
        }

        /**
         * Build call for getAllUserTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserTypesCall(_callback);
        }


        /**
         * Execute getAllUserTypes request
         * @return List&lt;UserType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UserType> execute() throws ApiException {
            ApiResponse<List<UserType>> localVarResp = getAllUserTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserTypes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UserType&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UserType>> executeWithHttpInfo() throws ApiException {
            return getAllUserTypesWithHttpInfo();
        }

        /**
         * Execute getAllUserTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UserType>> _callback) throws ApiException {
            return getAllUserTypesAsync(_callback);
        }
    }

    /**
     * 
     * Fetches all User Types in your org
     * @return GetAllUserTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserTypesRequestBuilder getAllUserTypes() throws IllegalArgumentException {
        return new GetAllUserTypesRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/types/user/{typeId}"
            .replace("{" + "typeId" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String typeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling getById(Async)");
        }

        return getByIdCall(typeId, _callback);

    }


    private ApiResponse<UserType> getByIdWithHttpInfo(String typeId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(typeId, null);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String typeId, final ApiCallback<UserType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(typeId, _callback);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String typeId;

        private GetByIdRequestBuilder(String typeId) {
            this.typeId = typeId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(typeId, _callback);
        }


        /**
         * Execute getById request
         * @return UserType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserType execute() throws ApiException {
            ApiResponse<UserType> localVarResp = getByIdWithHttpInfo(typeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;UserType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserType> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(typeId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserType> _callback) throws ApiException {
            return getByIdAsync(typeId, _callback);
        }
    }

    /**
     * 
     * Fetches a User Type by ID. The special identifier &#x60;default&#x60; may be used to fetch the default User Type.
     * @param typeId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String typeId) throws IllegalArgumentException {
        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
            

        return new GetByIdRequestBuilder(typeId);
    }
    private okhttp3.Call replaceExistingTypeCall(String typeId, UserType userType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userType;

        // create path and map variables
        String localVarPath = "/api/v1/meta/types/user/{typeId}"
            .replace("{" + "typeId" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceExistingTypeValidateBeforeCall(String typeId, UserType userType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling replaceExistingType(Async)");
        }

        // verify the required parameter 'userType' is set
        if (userType == null) {
            throw new ApiException("Missing the required parameter 'userType' when calling replaceExistingType(Async)");
        }

        return replaceExistingTypeCall(typeId, userType, _callback);

    }


    private ApiResponse<UserType> replaceExistingTypeWithHttpInfo(String typeId, UserType userType) throws ApiException {
        okhttp3.Call localVarCall = replaceExistingTypeValidateBeforeCall(typeId, userType, null);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceExistingTypeAsync(String typeId, UserType userType, final ApiCallback<UserType> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceExistingTypeValidateBeforeCall(typeId, userType, _callback);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceExistingTypeRequestBuilder {
        private final String typeId;
        private String description;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String createdBy;
        private Boolean _default;
        private String displayName;
        private String id;
        private OffsetDateTime lastUpdated;
        private String lastUpdatedBy;
        private String name;

        private ReplaceExistingTypeRequestBuilder(String typeId) {
            this.typeId = typeId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set lastUpdatedBy
         * @param lastUpdatedBy  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder lastUpdatedBy(String lastUpdatedBy) {
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ReplaceExistingTypeRequestBuilder
         */
        public ReplaceExistingTypeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for replaceExistingType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserType userType = buildBodyParams();
            return replaceExistingTypeCall(typeId, userType, _callback);
        }

        private UserType buildBodyParams() {
            UserType userType = new UserType();
            userType.description(this.description);
            userType.links(this.links);
            userType.created(this.created);
            userType.createdBy(this.createdBy);
            userType._default(this._default);
            userType.displayName(this.displayName);
            userType.id(this.id);
            userType.lastUpdated(this.lastUpdated);
            userType.lastUpdatedBy(this.lastUpdatedBy);
            userType.name(this.name);
            return userType;
        }

        /**
         * Execute replaceExistingType request
         * @return UserType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserType execute() throws ApiException {
            UserType userType = buildBodyParams();
            ApiResponse<UserType> localVarResp = replaceExistingTypeWithHttpInfo(typeId, userType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceExistingType request with HTTP info returned
         * @return ApiResponse&lt;UserType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserType> executeWithHttpInfo() throws ApiException {
            UserType userType = buildBodyParams();
            return replaceExistingTypeWithHttpInfo(typeId, userType);
        }

        /**
         * Execute replaceExistingType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserType> _callback) throws ApiException {
            UserType userType = buildBodyParams();
            return replaceExistingTypeAsync(typeId, userType, _callback);
        }
    }

    /**
     * 
     * Replace an existing User Type
     * @param typeId  (required)
     * @param userType  (required)
     * @return ReplaceExistingTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceExistingTypeRequestBuilder replaceExistingType(String typeId) throws IllegalArgumentException {
        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
            

        return new ReplaceExistingTypeRequestBuilder(typeId);
    }
    private okhttp3.Call updateExistingTypeCall(String typeId, UserType userType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userType;

        // create path and map variables
        String localVarPath = "/api/v1/meta/types/user/{typeId}"
            .replace("{" + "typeId" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingTypeValidateBeforeCall(String typeId, UserType userType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling updateExistingType(Async)");
        }

        // verify the required parameter 'userType' is set
        if (userType == null) {
            throw new ApiException("Missing the required parameter 'userType' when calling updateExistingType(Async)");
        }

        return updateExistingTypeCall(typeId, userType, _callback);

    }


    private ApiResponse<UserType> updateExistingTypeWithHttpInfo(String typeId, UserType userType) throws ApiException {
        okhttp3.Call localVarCall = updateExistingTypeValidateBeforeCall(typeId, userType, null);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingTypeAsync(String typeId, UserType userType, final ApiCallback<UserType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingTypeValidateBeforeCall(typeId, userType, _callback);
        Type localVarReturnType = new TypeToken<UserType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingTypeRequestBuilder {
        private final String typeId;
        private String description;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String createdBy;
        private Boolean _default;
        private String displayName;
        private String id;
        private OffsetDateTime lastUpdated;
        private String lastUpdatedBy;
        private String name;

        private UpdateExistingTypeRequestBuilder(String typeId) {
            this.typeId = typeId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set lastUpdatedBy
         * @param lastUpdatedBy  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder lastUpdatedBy(String lastUpdatedBy) {
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateExistingTypeRequestBuilder
         */
        public UpdateExistingTypeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateExistingType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserType userType = buildBodyParams();
            return updateExistingTypeCall(typeId, userType, _callback);
        }

        private UserType buildBodyParams() {
            UserType userType = new UserType();
            userType.description(this.description);
            userType.links(this.links);
            userType.created(this.created);
            userType.createdBy(this.createdBy);
            userType._default(this._default);
            userType.displayName(this.displayName);
            userType.id(this.id);
            userType.lastUpdated(this.lastUpdated);
            userType.lastUpdatedBy(this.lastUpdatedBy);
            userType.name(this.name);
            return userType;
        }

        /**
         * Execute updateExistingType request
         * @return UserType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserType execute() throws ApiException {
            UserType userType = buildBodyParams();
            ApiResponse<UserType> localVarResp = updateExistingTypeWithHttpInfo(typeId, userType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingType request with HTTP info returned
         * @return ApiResponse&lt;UserType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserType> executeWithHttpInfo() throws ApiException {
            UserType userType = buildBodyParams();
            return updateExistingTypeWithHttpInfo(typeId, userType);
        }

        /**
         * Execute updateExistingType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserType> _callback) throws ApiException {
            UserType userType = buildBodyParams();
            return updateExistingTypeAsync(typeId, userType, _callback);
        }
    }

    /**
     * 
     * Updates an existing User Type
     * @param typeId  (required)
     * @param userType  (required)
     * @return UpdateExistingTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingTypeRequestBuilder updateExistingType(String typeId) throws IllegalArgumentException {
        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
            

        return new UpdateExistingTypeRequestBuilder(typeId);
    }
}
