/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActivateFactorRequest;
import com.konfigthis.client.model.FactorProvider;
import com.konfigthis.client.model.FactorStatus;
import com.konfigthis.client.model.FactorType;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SecurityQuestion;
import com.konfigthis.client.model.UserFactor;
import com.konfigthis.client.model.VerifyFactorRequest;
import com.konfigthis.client.model.VerifyUserFactorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserFactorApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserFactorApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserFactorApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateFactorLifecycleCall(String userId, String factorId, ActivateFactorRequest activateFactorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activateFactorRequest;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "factorId" + "}", localVarApiClient.escapeString(factorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateFactorLifecycleValidateBeforeCall(String userId, String factorId, ActivateFactorRequest activateFactorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling activateFactorLifecycle(Async)");
        }

        // verify the required parameter 'factorId' is set
        if (factorId == null) {
            throw new ApiException("Missing the required parameter 'factorId' when calling activateFactorLifecycle(Async)");
        }

        return activateFactorLifecycleCall(userId, factorId, activateFactorRequest, _callback);

    }


    private ApiResponse<UserFactor> activateFactorLifecycleWithHttpInfo(String userId, String factorId, ActivateFactorRequest activateFactorRequest) throws ApiException {
        okhttp3.Call localVarCall = activateFactorLifecycleValidateBeforeCall(userId, factorId, activateFactorRequest, null);
        Type localVarReturnType = new TypeToken<UserFactor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateFactorLifecycleAsync(String userId, String factorId, ActivateFactorRequest activateFactorRequest, final ApiCallback<UserFactor> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateFactorLifecycleValidateBeforeCall(userId, factorId, activateFactorRequest, _callback);
        Type localVarReturnType = new TypeToken<UserFactor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateFactorLifecycleRequestBuilder {
        private final String userId;
        private final String factorId;
        private String attestation;
        private String clientData;
        private String passCode;
        private String registrationData;
        private String stateToken;

        private ActivateFactorLifecycleRequestBuilder(String userId, String factorId) {
            this.userId = userId;
            this.factorId = factorId;
        }

        /**
         * Set attestation
         * @param attestation  (optional)
         * @return ActivateFactorLifecycleRequestBuilder
         */
        public ActivateFactorLifecycleRequestBuilder attestation(String attestation) {
            this.attestation = attestation;
            return this;
        }
        
        /**
         * Set clientData
         * @param clientData  (optional)
         * @return ActivateFactorLifecycleRequestBuilder
         */
        public ActivateFactorLifecycleRequestBuilder clientData(String clientData) {
            this.clientData = clientData;
            return this;
        }
        
        /**
         * Set passCode
         * @param passCode  (optional)
         * @return ActivateFactorLifecycleRequestBuilder
         */
        public ActivateFactorLifecycleRequestBuilder passCode(String passCode) {
            this.passCode = passCode;
            return this;
        }
        
        /**
         * Set registrationData
         * @param registrationData  (optional)
         * @return ActivateFactorLifecycleRequestBuilder
         */
        public ActivateFactorLifecycleRequestBuilder registrationData(String registrationData) {
            this.registrationData = registrationData;
            return this;
        }
        
        /**
         * Set stateToken
         * @param stateToken  (optional)
         * @return ActivateFactorLifecycleRequestBuilder
         */
        public ActivateFactorLifecycleRequestBuilder stateToken(String stateToken) {
            this.stateToken = stateToken;
            return this;
        }
        
        /**
         * Build call for activateFactorLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActivateFactorRequest activateFactorRequest = buildBodyParams();
            return activateFactorLifecycleCall(userId, factorId, activateFactorRequest, _callback);
        }

        private ActivateFactorRequest buildBodyParams() {
            ActivateFactorRequest activateFactorRequest = new ActivateFactorRequest();
            activateFactorRequest.attestation(this.attestation);
            activateFactorRequest.clientData(this.clientData);
            activateFactorRequest.passCode(this.passCode);
            activateFactorRequest.registrationData(this.registrationData);
            activateFactorRequest.stateToken(this.stateToken);
            return activateFactorRequest;
        }

        /**
         * Execute activateFactorLifecycle request
         * @return UserFactor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserFactor execute() throws ApiException {
            ActivateFactorRequest activateFactorRequest = buildBodyParams();
            ApiResponse<UserFactor> localVarResp = activateFactorLifecycleWithHttpInfo(userId, factorId, activateFactorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateFactorLifecycle request with HTTP info returned
         * @return ApiResponse&lt;UserFactor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFactor> executeWithHttpInfo() throws ApiException {
            ActivateFactorRequest activateFactorRequest = buildBodyParams();
            return activateFactorLifecycleWithHttpInfo(userId, factorId, activateFactorRequest);
        }

        /**
         * Execute activateFactorLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFactor> _callback) throws ApiException {
            ActivateFactorRequest activateFactorRequest = buildBodyParams();
            return activateFactorLifecycleAsync(userId, factorId, activateFactorRequest, _callback);
        }
    }

    /**
     * Activate Factor
     * The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
     * @param userId  (required)
     * @param factorId  (required)
     * @return ActivateFactorLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateFactorLifecycleRequestBuilder activateFactorLifecycle(String userId, String factorId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (factorId == null) throw new IllegalArgumentException("\"factorId\" is required but got null");
            

        return new ActivateFactorLifecycleRequestBuilder(userId, factorId);
    }
    private okhttp3.Call enrollSupportedFactorCall(String userId, UserFactor userFactor, Boolean updatePhone, String templateId, Integer tokenLifetimeSeconds, Boolean activate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userFactor;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatePhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatePhone", updatePhone));
        }

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (tokenLifetimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenLifetimeSeconds", tokenLifetimeSeconds));
        }

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollSupportedFactorValidateBeforeCall(String userId, UserFactor userFactor, Boolean updatePhone, String templateId, Integer tokenLifetimeSeconds, Boolean activate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enrollSupportedFactor(Async)");
        }

        // verify the required parameter 'userFactor' is set
        if (userFactor == null) {
            throw new ApiException("Missing the required parameter 'userFactor' when calling enrollSupportedFactor(Async)");
        }

        return enrollSupportedFactorCall(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate, _callback);

    }


    private ApiResponse<UserFactor> enrollSupportedFactorWithHttpInfo(String userId, UserFactor userFactor, Boolean updatePhone, String templateId, Integer tokenLifetimeSeconds, Boolean activate) throws ApiException {
        okhttp3.Call localVarCall = enrollSupportedFactorValidateBeforeCall(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate, null);
        Type localVarReturnType = new TypeToken<UserFactor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enrollSupportedFactorAsync(String userId, UserFactor userFactor, Boolean updatePhone, String templateId, Integer tokenLifetimeSeconds, Boolean activate, final ApiCallback<UserFactor> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollSupportedFactorValidateBeforeCall(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate, _callback);
        Type localVarReturnType = new TypeToken<UserFactor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnrollSupportedFactorRequestBuilder {
        private final String userId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private FactorType factorType;
        private String id;
        private OffsetDateTime lastUpdated;
        private FactorProvider provider;
        private FactorStatus status;
        private VerifyFactorRequest verify;
        private Boolean updatePhone;
        private String templateId;
        private Integer tokenLifetimeSeconds;
        private Boolean activate;

        private EnrollSupportedFactorRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set factorType
         * @param factorType  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder factorType(FactorType factorType) {
            this.factorType = factorType;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder provider(FactorProvider provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder status(FactorStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set verify
         * @param verify  (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder verify(VerifyFactorRequest verify) {
            this.verify = verify;
            return this;
        }
        
        /**
         * Set updatePhone
         * @param updatePhone  (optional, default to false)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder updatePhone(Boolean updatePhone) {
            this.updatePhone = updatePhone;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId id of SMS template (only for SMS factor) (optional)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set tokenLifetimeSeconds
         * @param tokenLifetimeSeconds  (optional, default to 300)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder tokenLifetimeSeconds(Integer tokenLifetimeSeconds) {
            this.tokenLifetimeSeconds = tokenLifetimeSeconds;
            return this;
        }
        
        /**
         * Set activate
         * @param activate  (optional, default to false)
         * @return EnrollSupportedFactorRequestBuilder
         */
        public EnrollSupportedFactorRequestBuilder activate(Boolean activate) {
            this.activate = activate;
            return this;
        }
        
        /**
         * Build call for enrollSupportedFactor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserFactor userFactor = buildBodyParams();
            return enrollSupportedFactorCall(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate, _callback);
        }

        private UserFactor buildBodyParams() {
            UserFactor userFactor = new UserFactor();
            userFactor.embedded(this.embedded);
            userFactor.links(this.links);
            userFactor.created(this.created);
            userFactor.factorType(this.factorType);
            userFactor.id(this.id);
            userFactor.lastUpdated(this.lastUpdated);
            userFactor.provider(this.provider);
            userFactor.status(this.status);
            userFactor.verify(this.verify);
            return userFactor;
        }

        /**
         * Execute enrollSupportedFactor request
         * @return UserFactor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserFactor execute() throws ApiException {
            UserFactor userFactor = buildBodyParams();
            ApiResponse<UserFactor> localVarResp = enrollSupportedFactorWithHttpInfo(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enrollSupportedFactor request with HTTP info returned
         * @return ApiResponse&lt;UserFactor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFactor> executeWithHttpInfo() throws ApiException {
            UserFactor userFactor = buildBodyParams();
            return enrollSupportedFactorWithHttpInfo(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate);
        }

        /**
         * Execute enrollSupportedFactor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFactor> _callback) throws ApiException {
            UserFactor userFactor = buildBodyParams();
            return enrollSupportedFactorAsync(userId, userFactor, updatePhone, templateId, tokenLifetimeSeconds, activate, _callback);
        }
    }

    /**
     * Enroll Factor
     * Enrolls a user with a supported factor.
     * @param userId  (required)
     * @param userFactor Factor (required)
     * @return EnrollSupportedFactorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnrollSupportedFactorRequestBuilder enrollSupportedFactor(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new EnrollSupportedFactorRequestBuilder(userId);
    }
    private okhttp3.Call enumerateEnrolledCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateEnrolledValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enumerateEnrolled(Async)");
        }

        return enumerateEnrolledCall(userId, _callback);

    }


    private ApiResponse<List<UserFactor>> enumerateEnrolledWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = enumerateEnrolledValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<UserFactor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateEnrolledAsync(String userId, final ApiCallback<List<UserFactor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateEnrolledValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<UserFactor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateEnrolledRequestBuilder {
        private final String userId;

        private EnumerateEnrolledRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for enumerateEnrolled
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateEnrolledCall(userId, _callback);
        }


        /**
         * Execute enumerateEnrolled request
         * @return List&lt;UserFactor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UserFactor> execute() throws ApiException {
            ApiResponse<List<UserFactor>> localVarResp = enumerateEnrolledWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateEnrolled request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UserFactor&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UserFactor>> executeWithHttpInfo() throws ApiException {
            return enumerateEnrolledWithHttpInfo(userId);
        }

        /**
         * Execute enumerateEnrolled request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UserFactor>> _callback) throws ApiException {
            return enumerateEnrolledAsync(userId, _callback);
        }
    }

    /**
     * 
     * Enumerates all the enrolled factors for the specified user
     * @param userId  (required)
     * @return EnumerateEnrolledRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateEnrolledRequestBuilder enumerateEnrolled(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new EnumerateEnrolledRequestBuilder(userId);
    }
    private okhttp3.Call enumerateSecurityQuestionsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/questions"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateSecurityQuestionsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enumerateSecurityQuestions(Async)");
        }

        return enumerateSecurityQuestionsCall(userId, _callback);

    }


    private ApiResponse<List<SecurityQuestion>> enumerateSecurityQuestionsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = enumerateSecurityQuestionsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<SecurityQuestion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateSecurityQuestionsAsync(String userId, final ApiCallback<List<SecurityQuestion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateSecurityQuestionsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<SecurityQuestion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateSecurityQuestionsRequestBuilder {
        private final String userId;

        private EnumerateSecurityQuestionsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for enumerateSecurityQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateSecurityQuestionsCall(userId, _callback);
        }


        /**
         * Execute enumerateSecurityQuestions request
         * @return List&lt;SecurityQuestion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<SecurityQuestion> execute() throws ApiException {
            ApiResponse<List<SecurityQuestion>> localVarResp = enumerateSecurityQuestionsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateSecurityQuestions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SecurityQuestion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SecurityQuestion>> executeWithHttpInfo() throws ApiException {
            return enumerateSecurityQuestionsWithHttpInfo(userId);
        }

        /**
         * Execute enumerateSecurityQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SecurityQuestion>> _callback) throws ApiException {
            return enumerateSecurityQuestionsAsync(userId, _callback);
        }
    }

    /**
     * 
     * Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
     * @param userId  (required)
     * @return EnumerateSecurityQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateSecurityQuestionsRequestBuilder enumerateSecurityQuestions(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new EnumerateSecurityQuestionsRequestBuilder(userId);
    }
    private okhttp3.Call enumerateSupportedFactorsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/catalog"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateSupportedFactorsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enumerateSupportedFactors(Async)");
        }

        return enumerateSupportedFactorsCall(userId, _callback);

    }


    private ApiResponse<List<UserFactor>> enumerateSupportedFactorsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = enumerateSupportedFactorsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<UserFactor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateSupportedFactorsAsync(String userId, final ApiCallback<List<UserFactor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateSupportedFactorsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<UserFactor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateSupportedFactorsRequestBuilder {
        private final String userId;

        private EnumerateSupportedFactorsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for enumerateSupportedFactors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateSupportedFactorsCall(userId, _callback);
        }


        /**
         * Execute enumerateSupportedFactors request
         * @return List&lt;UserFactor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UserFactor> execute() throws ApiException {
            ApiResponse<List<UserFactor>> localVarResp = enumerateSupportedFactorsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateSupportedFactors request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UserFactor&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UserFactor>> executeWithHttpInfo() throws ApiException {
            return enumerateSupportedFactorsWithHttpInfo(userId);
        }

        /**
         * Execute enumerateSupportedFactors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UserFactor>> _callback) throws ApiException {
            return enumerateSupportedFactorsAsync(userId, _callback);
        }
    }

    /**
     * 
     * Enumerates all the supported factors that can be enrolled for the specified user
     * @param userId  (required)
     * @return EnumerateSupportedFactorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateSupportedFactorsRequestBuilder enumerateSupportedFactors(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new EnumerateSupportedFactorsRequestBuilder(userId);
    }
    private okhttp3.Call getFactorCall(String userId, String factorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/{factorId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "factorId" + "}", localVarApiClient.escapeString(factorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFactorValidateBeforeCall(String userId, String factorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFactor(Async)");
        }

        // verify the required parameter 'factorId' is set
        if (factorId == null) {
            throw new ApiException("Missing the required parameter 'factorId' when calling getFactor(Async)");
        }

        return getFactorCall(userId, factorId, _callback);

    }


    private ApiResponse<UserFactor> getFactorWithHttpInfo(String userId, String factorId) throws ApiException {
        okhttp3.Call localVarCall = getFactorValidateBeforeCall(userId, factorId, null);
        Type localVarReturnType = new TypeToken<UserFactor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFactorAsync(String userId, String factorId, final ApiCallback<UserFactor> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFactorValidateBeforeCall(userId, factorId, _callback);
        Type localVarReturnType = new TypeToken<UserFactor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFactorRequestBuilder {
        private final String userId;
        private final String factorId;

        private GetFactorRequestBuilder(String userId, String factorId) {
            this.userId = userId;
            this.factorId = factorId;
        }

        /**
         * Build call for getFactor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFactorCall(userId, factorId, _callback);
        }


        /**
         * Execute getFactor request
         * @return UserFactor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserFactor execute() throws ApiException {
            ApiResponse<UserFactor> localVarResp = getFactorWithHttpInfo(userId, factorId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFactor request with HTTP info returned
         * @return ApiResponse&lt;UserFactor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFactor> executeWithHttpInfo() throws ApiException {
            return getFactorWithHttpInfo(userId, factorId);
        }

        /**
         * Execute getFactor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFactor> _callback) throws ApiException {
            return getFactorAsync(userId, factorId, _callback);
        }
    }

    /**
     * 
     * Fetches a factor for the specified user
     * @param userId  (required)
     * @param factorId  (required)
     * @return GetFactorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFactorRequestBuilder getFactor(String userId, String factorId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (factorId == null) throw new IllegalArgumentException("\"factorId\" is required but got null");
            

        return new GetFactorRequestBuilder(userId, factorId);
    }
    private okhttp3.Call pollFactorTransactionStatusCall(String userId, String factorId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "factorId" + "}", localVarApiClient.escapeString(factorId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pollFactorTransactionStatusValidateBeforeCall(String userId, String factorId, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling pollFactorTransactionStatus(Async)");
        }

        // verify the required parameter 'factorId' is set
        if (factorId == null) {
            throw new ApiException("Missing the required parameter 'factorId' when calling pollFactorTransactionStatus(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling pollFactorTransactionStatus(Async)");
        }

        return pollFactorTransactionStatusCall(userId, factorId, transactionId, _callback);

    }


    private ApiResponse<VerifyUserFactorResponse> pollFactorTransactionStatusWithHttpInfo(String userId, String factorId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = pollFactorTransactionStatusValidateBeforeCall(userId, factorId, transactionId, null);
        Type localVarReturnType = new TypeToken<VerifyUserFactorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pollFactorTransactionStatusAsync(String userId, String factorId, String transactionId, final ApiCallback<VerifyUserFactorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pollFactorTransactionStatusValidateBeforeCall(userId, factorId, transactionId, _callback);
        Type localVarReturnType = new TypeToken<VerifyUserFactorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PollFactorTransactionStatusRequestBuilder {
        private final String userId;
        private final String factorId;
        private final String transactionId;

        private PollFactorTransactionStatusRequestBuilder(String userId, String factorId, String transactionId) {
            this.userId = userId;
            this.factorId = factorId;
            this.transactionId = transactionId;
        }

        /**
         * Build call for pollFactorTransactionStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pollFactorTransactionStatusCall(userId, factorId, transactionId, _callback);
        }


        /**
         * Execute pollFactorTransactionStatus request
         * @return VerifyUserFactorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public VerifyUserFactorResponse execute() throws ApiException {
            ApiResponse<VerifyUserFactorResponse> localVarResp = pollFactorTransactionStatusWithHttpInfo(userId, factorId, transactionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pollFactorTransactionStatus request with HTTP info returned
         * @return ApiResponse&lt;VerifyUserFactorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifyUserFactorResponse> executeWithHttpInfo() throws ApiException {
            return pollFactorTransactionStatusWithHttpInfo(userId, factorId, transactionId);
        }

        /**
         * Execute pollFactorTransactionStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifyUserFactorResponse> _callback) throws ApiException {
            return pollFactorTransactionStatusAsync(userId, factorId, transactionId, _callback);
        }
    }

    /**
     * 
     * Polls factors verification transaction for status.
     * @param userId  (required)
     * @param factorId  (required)
     * @param transactionId  (required)
     * @return PollFactorTransactionStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PollFactorTransactionStatusRequestBuilder pollFactorTransactionStatus(String userId, String factorId, String transactionId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (factorId == null) throw new IllegalArgumentException("\"factorId\" is required but got null");
            

        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new PollFactorTransactionStatusRequestBuilder(userId, factorId, transactionId);
    }
    private okhttp3.Call unenrollFactorCall(String userId, String factorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/{factorId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "factorId" + "}", localVarApiClient.escapeString(factorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unenrollFactorValidateBeforeCall(String userId, String factorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unenrollFactor(Async)");
        }

        // verify the required parameter 'factorId' is set
        if (factorId == null) {
            throw new ApiException("Missing the required parameter 'factorId' when calling unenrollFactor(Async)");
        }

        return unenrollFactorCall(userId, factorId, _callback);

    }


    private ApiResponse<Void> unenrollFactorWithHttpInfo(String userId, String factorId) throws ApiException {
        okhttp3.Call localVarCall = unenrollFactorValidateBeforeCall(userId, factorId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unenrollFactorAsync(String userId, String factorId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unenrollFactorValidateBeforeCall(userId, factorId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnenrollFactorRequestBuilder {
        private final String userId;
        private final String factorId;

        private UnenrollFactorRequestBuilder(String userId, String factorId) {
            this.userId = userId;
            this.factorId = factorId;
        }

        /**
         * Build call for unenrollFactor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unenrollFactorCall(userId, factorId, _callback);
        }


        /**
         * Execute unenrollFactor request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unenrollFactorWithHttpInfo(userId, factorId);
        }

        /**
         * Execute unenrollFactor request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unenrollFactorWithHttpInfo(userId, factorId);
        }

        /**
         * Execute unenrollFactor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unenrollFactorAsync(userId, factorId, _callback);
        }
    }

    /**
     * 
     * Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
     * @param userId  (required)
     * @param factorId  (required)
     * @return UnenrollFactorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public UnenrollFactorRequestBuilder unenrollFactor(String userId, String factorId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (factorId == null) throw new IllegalArgumentException("\"factorId\" is required but got null");
            

        return new UnenrollFactorRequestBuilder(userId, factorId);
    }
    private okhttp3.Call verifyOtpCall(String userId, String factorId, String templateId, Integer tokenLifetimeSeconds, String xForwardedFor, String userAgent, String acceptLanguage, VerifyFactorRequest verifyFactorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyFactorRequest;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/factors/{factorId}/verify"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "factorId" + "}", localVarApiClient.escapeString(factorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (tokenLifetimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenLifetimeSeconds", tokenLifetimeSeconds));
        }

        if (xForwardedFor != null) {
            localVarHeaderParams.put("X-Forwarded-For", localVarApiClient.parameterToString(xForwardedFor));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyOtpValidateBeforeCall(String userId, String factorId, String templateId, Integer tokenLifetimeSeconds, String xForwardedFor, String userAgent, String acceptLanguage, VerifyFactorRequest verifyFactorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyOtp(Async)");
        }

        // verify the required parameter 'factorId' is set
        if (factorId == null) {
            throw new ApiException("Missing the required parameter 'factorId' when calling verifyOtp(Async)");
        }

        return verifyOtpCall(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest, _callback);

    }


    private ApiResponse<VerifyUserFactorResponse> verifyOtpWithHttpInfo(String userId, String factorId, String templateId, Integer tokenLifetimeSeconds, String xForwardedFor, String userAgent, String acceptLanguage, VerifyFactorRequest verifyFactorRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyOtpValidateBeforeCall(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest, null);
        Type localVarReturnType = new TypeToken<VerifyUserFactorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyOtpAsync(String userId, String factorId, String templateId, Integer tokenLifetimeSeconds, String xForwardedFor, String userAgent, String acceptLanguage, VerifyFactorRequest verifyFactorRequest, final ApiCallback<VerifyUserFactorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyOtpValidateBeforeCall(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifyUserFactorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyOtpRequestBuilder {
        private final String userId;
        private final String factorId;
        private String activationToken;
        private String answer;
        private String attestation;
        private String clientData;
        private String nextPassCode;
        private String passCode;
        private String registrationData;
        private String stateToken;
        private String templateId;
        private Integer tokenLifetimeSeconds;
        private String xForwardedFor;
        private String userAgent;
        private String acceptLanguage;

        private VerifyOtpRequestBuilder(String userId, String factorId) {
            this.userId = userId;
            this.factorId = factorId;
        }

        /**
         * Set activationToken
         * @param activationToken  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder activationToken(String activationToken) {
            this.activationToken = activationToken;
            return this;
        }
        
        /**
         * Set answer
         * @param answer  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder answer(String answer) {
            this.answer = answer;
            return this;
        }
        
        /**
         * Set attestation
         * @param attestation  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder attestation(String attestation) {
            this.attestation = attestation;
            return this;
        }
        
        /**
         * Set clientData
         * @param clientData  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder clientData(String clientData) {
            this.clientData = clientData;
            return this;
        }
        
        /**
         * Set nextPassCode
         * @param nextPassCode  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder nextPassCode(String nextPassCode) {
            this.nextPassCode = nextPassCode;
            return this;
        }
        
        /**
         * Set passCode
         * @param passCode  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder passCode(String passCode) {
            this.passCode = passCode;
            return this;
        }
        
        /**
         * Set registrationData
         * @param registrationData  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder registrationData(String registrationData) {
            this.registrationData = registrationData;
            return this;
        }
        
        /**
         * Set stateToken
         * @param stateToken  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder stateToken(String stateToken) {
            this.stateToken = stateToken;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set tokenLifetimeSeconds
         * @param tokenLifetimeSeconds  (optional, default to 300)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder tokenLifetimeSeconds(Integer tokenLifetimeSeconds) {
            this.tokenLifetimeSeconds = tokenLifetimeSeconds;
            return this;
        }
        
        /**
         * Set xForwardedFor
         * @param xForwardedFor  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder xForwardedFor(String xForwardedFor) {
            this.xForwardedFor = xForwardedFor;
            return this;
        }
        
        /**
         * Set userAgent
         * @param userAgent  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder userAgent(String userAgent) {
            this.userAgent = userAgent;
            return this;
        }
        
        /**
         * Set acceptLanguage
         * @param acceptLanguage  (optional)
         * @return VerifyOtpRequestBuilder
         */
        public VerifyOtpRequestBuilder acceptLanguage(String acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }
        
        /**
         * Build call for verifyOtp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerifyFactorRequest verifyFactorRequest = buildBodyParams();
            return verifyOtpCall(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest, _callback);
        }

        private VerifyFactorRequest buildBodyParams() {
            VerifyFactorRequest verifyFactorRequest = new VerifyFactorRequest();
            verifyFactorRequest.activationToken(this.activationToken);
            verifyFactorRequest.answer(this.answer);
            verifyFactorRequest.attestation(this.attestation);
            verifyFactorRequest.clientData(this.clientData);
            verifyFactorRequest.nextPassCode(this.nextPassCode);
            verifyFactorRequest.passCode(this.passCode);
            verifyFactorRequest.registrationData(this.registrationData);
            verifyFactorRequest.stateToken(this.stateToken);
            return verifyFactorRequest;
        }

        /**
         * Execute verifyOtp request
         * @return VerifyUserFactorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public VerifyUserFactorResponse execute() throws ApiException {
            VerifyFactorRequest verifyFactorRequest = buildBodyParams();
            ApiResponse<VerifyUserFactorResponse> localVarResp = verifyOtpWithHttpInfo(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyOtp request with HTTP info returned
         * @return ApiResponse&lt;VerifyUserFactorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifyUserFactorResponse> executeWithHttpInfo() throws ApiException {
            VerifyFactorRequest verifyFactorRequest = buildBodyParams();
            return verifyOtpWithHttpInfo(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest);
        }

        /**
         * Execute verifyOtp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifyUserFactorResponse> _callback) throws ApiException {
            VerifyFactorRequest verifyFactorRequest = buildBodyParams();
            return verifyOtpAsync(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, verifyFactorRequest, _callback);
        }
    }

    /**
     * Verify MFA Factor
     * Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
     * @param userId  (required)
     * @param factorId  (required)
     * @return VerifyOtpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyOtpRequestBuilder verifyOtp(String userId, String factorId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (factorId == null) throw new IllegalArgumentException("\"factorId\" is required but got null");
            

        return new VerifyOtpRequestBuilder(userId, factorId);
    }
}
