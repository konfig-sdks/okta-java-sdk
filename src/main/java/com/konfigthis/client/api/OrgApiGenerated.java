/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicationUpdateLogoRequest;
import java.io.File;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrgContactTypeObj;
import com.konfigthis.client.model.OrgContactUser;
import com.konfigthis.client.model.OrgOktaCommunicationSetting;
import com.konfigthis.client.model.OrgOktaSupportSettingsObj;
import com.konfigthis.client.model.OrgPreferences;
import com.konfigthis.client.model.OrgSetting;
import com.konfigthis.client.model.UserIdString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrgApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrgApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrgApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call extendOktaSupportCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaSupport/extend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extendOktaSupportValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return extendOktaSupportCall(_callback);

    }


    private ApiResponse<OrgOktaSupportSettingsObj> extendOktaSupportWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extendOktaSupportValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extendOktaSupportAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = extendOktaSupportValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtendOktaSupportRequestBuilder {

        private ExtendOktaSupportRequestBuilder() {
        }

        /**
         * Build call for extendOktaSupport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return extendOktaSupportCall(_callback);
        }


        /**
         * Execute extendOktaSupport request
         * @return OrgOktaSupportSettingsObj
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaSupportSettingsObj execute() throws ApiException {
            ApiResponse<OrgOktaSupportSettingsObj> localVarResp = extendOktaSupportWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extendOktaSupport request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaSupportSettingsObj&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaSupportSettingsObj> executeWithHttpInfo() throws ApiException {
            return extendOktaSupportWithHttpInfo();
        }

        /**
         * Execute extendOktaSupport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {
            return extendOktaSupportAsync(_callback);
        }
    }

    /**
     * Extend Okta Support
     * Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
     * @return ExtendOktaSupportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExtendOktaSupportRequestBuilder extendOktaSupport() throws IllegalArgumentException {
        return new ExtendOktaSupportRequestBuilder();
    }
    private okhttp3.Call extendOktaSupport_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaSupport/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extendOktaSupport_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return extendOktaSupport_0Call(_callback);

    }


    private ApiResponse<OrgOktaSupportSettingsObj> extendOktaSupport_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extendOktaSupport_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extendOktaSupport_0Async(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = extendOktaSupport_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtendOktaSupport0RequestBuilder {

        private ExtendOktaSupport0RequestBuilder() {
        }

        /**
         * Build call for extendOktaSupport_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return extendOktaSupport_0Call(_callback);
        }


        /**
         * Execute extendOktaSupport_0 request
         * @return OrgOktaSupportSettingsObj
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaSupportSettingsObj execute() throws ApiException {
            ApiResponse<OrgOktaSupportSettingsObj> localVarResp = extendOktaSupport_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extendOktaSupport_0 request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaSupportSettingsObj&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaSupportSettingsObj> executeWithHttpInfo() throws ApiException {
            return extendOktaSupport_0WithHttpInfo();
        }

        /**
         * Execute extendOktaSupport_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {
            return extendOktaSupport_0Async(_callback);
        }
    }

    /**
     * Extend Okta Support
     * Revokes Okta Support access to your organization.
     * @return ExtendOktaSupport0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExtendOktaSupport0RequestBuilder extendOktaSupport_0() throws IllegalArgumentException {
        return new ExtendOktaSupport0RequestBuilder();
    }
    private okhttp3.Call getContactUserCall(String contactType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/contacts/{contactType}"
            .replace("{" + "contactType" + "}", localVarApiClient.escapeString(contactType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactUserValidateBeforeCall(String contactType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactType' is set
        if (contactType == null) {
            throw new ApiException("Missing the required parameter 'contactType' when calling getContactUser(Async)");
        }

        return getContactUserCall(contactType, _callback);

    }


    private ApiResponse<OrgContactUser> getContactUserWithHttpInfo(String contactType) throws ApiException {
        okhttp3.Call localVarCall = getContactUserValidateBeforeCall(contactType, null);
        Type localVarReturnType = new TypeToken<OrgContactUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContactUserAsync(String contactType, final ApiCallback<OrgContactUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactUserValidateBeforeCall(contactType, _callback);
        Type localVarReturnType = new TypeToken<OrgContactUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContactUserRequestBuilder {
        private final String contactType;

        private GetContactUserRequestBuilder(String contactType) {
            this.contactType = contactType;
        }

        /**
         * Build call for getContactUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContactUserCall(contactType, _callback);
        }


        /**
         * Execute getContactUser request
         * @return OrgContactUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgContactUser execute() throws ApiException {
            ApiResponse<OrgContactUser> localVarResp = getContactUserWithHttpInfo(contactType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContactUser request with HTTP info returned
         * @return ApiResponse&lt;OrgContactUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgContactUser> executeWithHttpInfo() throws ApiException {
            return getContactUserWithHttpInfo(contactType);
        }

        /**
         * Execute getContactUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgContactUser> _callback) throws ApiException {
            return getContactUserAsync(contactType, _callback);
        }
    }

    /**
     * Get org contact user
     * Retrieves the URL of the User associated with the specified Contact Type.
     * @param contactType  (required)
     * @return GetContactUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetContactUserRequestBuilder getContactUser(String contactType) throws IllegalArgumentException {
        if (contactType == null) throw new IllegalArgumentException("\"contactType\" is required but got null");
            

        return new GetContactUserRequestBuilder(contactType);
    }
    private okhttp3.Call getOktaCommunicationSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaCommunication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOktaCommunicationSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOktaCommunicationSettingsCall(_callback);

    }


    private ApiResponse<OrgOktaCommunicationSetting> getOktaCommunicationSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOktaCommunicationSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaCommunicationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOktaCommunicationSettingsAsync(final ApiCallback<OrgOktaCommunicationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOktaCommunicationSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaCommunicationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOktaCommunicationSettingsRequestBuilder {

        private GetOktaCommunicationSettingsRequestBuilder() {
        }

        /**
         * Build call for getOktaCommunicationSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOktaCommunicationSettingsCall(_callback);
        }


        /**
         * Execute getOktaCommunicationSettings request
         * @return OrgOktaCommunicationSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaCommunicationSetting execute() throws ApiException {
            ApiResponse<OrgOktaCommunicationSetting> localVarResp = getOktaCommunicationSettingsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOktaCommunicationSettings request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaCommunicationSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaCommunicationSetting> executeWithHttpInfo() throws ApiException {
            return getOktaCommunicationSettingsWithHttpInfo();
        }

        /**
         * Execute getOktaCommunicationSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaCommunicationSetting> _callback) throws ApiException {
            return getOktaCommunicationSettingsAsync(_callback);
        }
    }

    /**
     * Get Okta Communication Settings
     * Gets Okta Communication Settings of your organization.
     * @return GetOktaCommunicationSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetOktaCommunicationSettingsRequestBuilder getOktaCommunicationSettings() throws IllegalArgumentException {
        return new GetOktaCommunicationSettingsRequestBuilder();
    }
    private okhttp3.Call getOktaSupportSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaSupport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOktaSupportSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOktaSupportSettingsCall(_callback);

    }


    private ApiResponse<OrgOktaSupportSettingsObj> getOktaSupportSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOktaSupportSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOktaSupportSettingsAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOktaSupportSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOktaSupportSettingsRequestBuilder {

        private GetOktaSupportSettingsRequestBuilder() {
        }

        /**
         * Build call for getOktaSupportSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOktaSupportSettingsCall(_callback);
        }


        /**
         * Execute getOktaSupportSettings request
         * @return OrgOktaSupportSettingsObj
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaSupportSettingsObj execute() throws ApiException {
            ApiResponse<OrgOktaSupportSettingsObj> localVarResp = getOktaSupportSettingsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOktaSupportSettings request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaSupportSettingsObj&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaSupportSettingsObj> executeWithHttpInfo() throws ApiException {
            return getOktaSupportSettingsWithHttpInfo();
        }

        /**
         * Execute getOktaSupportSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {
            return getOktaSupportSettingsAsync(_callback);
        }
    }

    /**
     * Get Okta Support settings
     * Gets Okta Support Settings of your organization.
     * @return GetOktaSupportSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetOktaSupportSettingsRequestBuilder getOktaSupportSettings() throws IllegalArgumentException {
        return new GetOktaSupportSettingsRequestBuilder();
    }
    private okhttp3.Call getOrgPreferencesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgPreferencesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrgPreferencesCall(_callback);

    }


    private ApiResponse<OrgPreferences> getOrgPreferencesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrgPreferencesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgPreferences>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrgPreferencesAsync(final ApiCallback<OrgPreferences> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgPreferencesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgPreferences>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrgPreferencesRequestBuilder {

        private GetOrgPreferencesRequestBuilder() {
        }

        /**
         * Build call for getOrgPreferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgPreferencesCall(_callback);
        }


        /**
         * Execute getOrgPreferences request
         * @return OrgPreferences
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgPreferences execute() throws ApiException {
            ApiResponse<OrgPreferences> localVarResp = getOrgPreferencesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrgPreferences request with HTTP info returned
         * @return ApiResponse&lt;OrgPreferences&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgPreferences> executeWithHttpInfo() throws ApiException {
            return getOrgPreferencesWithHttpInfo();
        }

        /**
         * Execute getOrgPreferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgPreferences> _callback) throws ApiException {
            return getOrgPreferencesAsync(_callback);
        }
    }

    /**
     * Get org preferences
     * Gets preferences of your organization.
     * @return GetOrgPreferencesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgPreferencesRequestBuilder getOrgPreferences() throws IllegalArgumentException {
        return new GetOrgPreferencesRequestBuilder();
    }
    private okhttp3.Call getSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSettingsCall(_callback);

    }


    private ApiResponse<OrgSetting> getSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(final ApiCallback<OrgSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {

        private GetSettingsRequestBuilder() {
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(_callback);
        }


        /**
         * Execute getSettings request
         * @return OrgSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgSetting execute() throws ApiException {
            ApiResponse<OrgSetting> localVarResp = getSettingsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;OrgSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgSetting> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo();
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgSetting> _callback) throws ApiException {
            return getSettingsAsync(_callback);
        }
    }

    /**
     * Get org settings
     * Get settings of your organization.
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings() throws IllegalArgumentException {
        return new GetSettingsRequestBuilder();
    }
    private okhttp3.Call grantOktaSupportAccessCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaSupport/grant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantOktaSupportAccessValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return grantOktaSupportAccessCall(_callback);

    }


    private ApiResponse<OrgOktaSupportSettingsObj> grantOktaSupportAccessWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = grantOktaSupportAccessValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call grantOktaSupportAccessAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantOktaSupportAccessValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaSupportSettingsObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GrantOktaSupportAccessRequestBuilder {

        private GrantOktaSupportAccessRequestBuilder() {
        }

        /**
         * Build call for grantOktaSupportAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return grantOktaSupportAccessCall(_callback);
        }


        /**
         * Execute grantOktaSupportAccess request
         * @return OrgOktaSupportSettingsObj
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaSupportSettingsObj execute() throws ApiException {
            ApiResponse<OrgOktaSupportSettingsObj> localVarResp = grantOktaSupportAccessWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute grantOktaSupportAccess request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaSupportSettingsObj&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaSupportSettingsObj> executeWithHttpInfo() throws ApiException {
            return grantOktaSupportAccessWithHttpInfo();
        }

        /**
         * Execute grantOktaSupportAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaSupportSettingsObj> _callback) throws ApiException {
            return grantOktaSupportAccessAsync(_callback);
        }
    }

    /**
     * Grant Okta Support
     * Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
     * @return GrantOktaSupportAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GrantOktaSupportAccessRequestBuilder grantOktaSupportAccess() throws IllegalArgumentException {
        return new GrantOktaSupportAccessRequestBuilder();
    }
    private okhttp3.Call hideEndUserFooterCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/preferences/hideEndUserFooter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideEndUserFooterValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return hideEndUserFooterCall(_callback);

    }


    private ApiResponse<OrgPreferences> hideEndUserFooterWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = hideEndUserFooterValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgPreferences>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call hideEndUserFooterAsync(final ApiCallback<OrgPreferences> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideEndUserFooterValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgPreferences>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class HideEndUserFooterRequestBuilder {

        private HideEndUserFooterRequestBuilder() {
        }

        /**
         * Build call for hideEndUserFooter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return hideEndUserFooterCall(_callback);
        }


        /**
         * Execute hideEndUserFooter request
         * @return OrgPreferences
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgPreferences execute() throws ApiException {
            ApiResponse<OrgPreferences> localVarResp = hideEndUserFooterWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute hideEndUserFooter request with HTTP info returned
         * @return ApiResponse&lt;OrgPreferences&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgPreferences> executeWithHttpInfo() throws ApiException {
            return hideEndUserFooterWithHttpInfo();
        }

        /**
         * Execute hideEndUserFooter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgPreferences> _callback) throws ApiException {
            return hideEndUserFooterAsync(_callback);
        }
    }

    /**
     * Show Okta UI Footer
     * Hide the Okta UI footer for all end users of your organization.
     * @return HideEndUserFooterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HideEndUserFooterRequestBuilder hideEndUserFooter() throws IllegalArgumentException {
        return new HideEndUserFooterRequestBuilder();
    }
    private okhttp3.Call listContactTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContactTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listContactTypesCall(_callback);

    }


    private ApiResponse<List<OrgContactTypeObj>> listContactTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listContactTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OrgContactTypeObj>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listContactTypesAsync(final ApiCallback<List<OrgContactTypeObj>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContactTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OrgContactTypeObj>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListContactTypesRequestBuilder {

        private ListContactTypesRequestBuilder() {
        }

        /**
         * Build call for listContactTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listContactTypesCall(_callback);
        }


        /**
         * Execute listContactTypes request
         * @return List&lt;OrgContactTypeObj&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OrgContactTypeObj> execute() throws ApiException {
            ApiResponse<List<OrgContactTypeObj>> localVarResp = listContactTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listContactTypes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OrgContactTypeObj&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OrgContactTypeObj>> executeWithHttpInfo() throws ApiException {
            return listContactTypesWithHttpInfo();
        }

        /**
         * Execute listContactTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OrgContactTypeObj>> _callback) throws ApiException {
            return listContactTypesAsync(_callback);
        }
    }

    /**
     * Get org contact types
     * Gets Contact Types of your organization.
     * @return ListContactTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListContactTypesRequestBuilder listContactTypes() throws IllegalArgumentException {
        return new ListContactTypesRequestBuilder();
    }
    private okhttp3.Call makeOktaUiFooterVisibleCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/preferences/showEndUserFooter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeOktaUiFooterVisibleValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return makeOktaUiFooterVisibleCall(_callback);

    }


    private ApiResponse<OrgPreferences> makeOktaUiFooterVisibleWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = makeOktaUiFooterVisibleValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgPreferences>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call makeOktaUiFooterVisibleAsync(final ApiCallback<OrgPreferences> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeOktaUiFooterVisibleValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgPreferences>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MakeOktaUiFooterVisibleRequestBuilder {

        private MakeOktaUiFooterVisibleRequestBuilder() {
        }

        /**
         * Build call for makeOktaUiFooterVisible
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return makeOktaUiFooterVisibleCall(_callback);
        }


        /**
         * Execute makeOktaUiFooterVisible request
         * @return OrgPreferences
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgPreferences execute() throws ApiException {
            ApiResponse<OrgPreferences> localVarResp = makeOktaUiFooterVisibleWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute makeOktaUiFooterVisible request with HTTP info returned
         * @return ApiResponse&lt;OrgPreferences&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgPreferences> executeWithHttpInfo() throws ApiException {
            return makeOktaUiFooterVisibleWithHttpInfo();
        }

        /**
         * Execute makeOktaUiFooterVisible request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgPreferences> _callback) throws ApiException {
            return makeOktaUiFooterVisibleAsync(_callback);
        }
    }

    /**
     * Show Okta UI Footer
     * Makes the Okta UI footer visible for all end users of your organization.
     * @return MakeOktaUiFooterVisibleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MakeOktaUiFooterVisibleRequestBuilder makeOktaUiFooterVisible() throws IllegalArgumentException {
        return new MakeOktaUiFooterVisibleRequestBuilder();
    }
    private okhttp3.Call optInOktaCommunicationEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaCommunication/optIn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optInOktaCommunicationEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return optInOktaCommunicationEmailsCall(_callback);

    }


    private ApiResponse<OrgOktaCommunicationSetting> optInOktaCommunicationEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = optInOktaCommunicationEmailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaCommunicationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call optInOktaCommunicationEmailsAsync(final ApiCallback<OrgOktaCommunicationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = optInOktaCommunicationEmailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaCommunicationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OptInOktaCommunicationEmailsRequestBuilder {

        private OptInOktaCommunicationEmailsRequestBuilder() {
        }

        /**
         * Build call for optInOktaCommunicationEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return optInOktaCommunicationEmailsCall(_callback);
        }


        /**
         * Execute optInOktaCommunicationEmails request
         * @return OrgOktaCommunicationSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaCommunicationSetting execute() throws ApiException {
            ApiResponse<OrgOktaCommunicationSetting> localVarResp = optInOktaCommunicationEmailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute optInOktaCommunicationEmails request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaCommunicationSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaCommunicationSetting> executeWithHttpInfo() throws ApiException {
            return optInOktaCommunicationEmailsWithHttpInfo();
        }

        /**
         * Execute optInOktaCommunicationEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaCommunicationSetting> _callback) throws ApiException {
            return optInOktaCommunicationEmailsAsync(_callback);
        }
    }

    /**
     * Opt in all users to Okta Communication emails
     * Opts in all users of this org to Okta Communication emails.
     * @return OptInOktaCommunicationEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OptInOktaCommunicationEmailsRequestBuilder optInOktaCommunicationEmails() throws IllegalArgumentException {
        return new OptInOktaCommunicationEmailsRequestBuilder();
    }
    private okhttp3.Call optOutOktaCommunicationEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/org/privacy/oktaCommunication/optOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optOutOktaCommunicationEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return optOutOktaCommunicationEmailsCall(_callback);

    }


    private ApiResponse<OrgOktaCommunicationSetting> optOutOktaCommunicationEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = optOutOktaCommunicationEmailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgOktaCommunicationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call optOutOktaCommunicationEmailsAsync(final ApiCallback<OrgOktaCommunicationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = optOutOktaCommunicationEmailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgOktaCommunicationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OptOutOktaCommunicationEmailsRequestBuilder {

        private OptOutOktaCommunicationEmailsRequestBuilder() {
        }

        /**
         * Build call for optOutOktaCommunicationEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return optOutOktaCommunicationEmailsCall(_callback);
        }


        /**
         * Execute optOutOktaCommunicationEmails request
         * @return OrgOktaCommunicationSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgOktaCommunicationSetting execute() throws ApiException {
            ApiResponse<OrgOktaCommunicationSetting> localVarResp = optOutOktaCommunicationEmailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute optOutOktaCommunicationEmails request with HTTP info returned
         * @return ApiResponse&lt;OrgOktaCommunicationSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgOktaCommunicationSetting> executeWithHttpInfo() throws ApiException {
            return optOutOktaCommunicationEmailsWithHttpInfo();
        }

        /**
         * Execute optOutOktaCommunicationEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgOktaCommunicationSetting> _callback) throws ApiException {
            return optOutOktaCommunicationEmailsAsync(_callback);
        }
    }

    /**
     * Opt out all users from Okta Communication emails
     * Opts out all users of this org from Okta Communication emails.
     * @return OptOutOktaCommunicationEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OptOutOktaCommunicationEmailsRequestBuilder optOutOktaCommunicationEmails() throws IllegalArgumentException {
        return new OptOutOktaCommunicationEmailsRequestBuilder();
    }
    private okhttp3.Call updateContactUserCall(String contactType, UserIdString userIdString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userIdString;

        // create path and map variables
        String localVarPath = "/api/v1/org/contacts/{contactType}"
            .replace("{" + "contactType" + "}", localVarApiClient.escapeString(contactType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactUserValidateBeforeCall(String contactType, UserIdString userIdString, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactType' is set
        if (contactType == null) {
            throw new ApiException("Missing the required parameter 'contactType' when calling updateContactUser(Async)");
        }

        // verify the required parameter 'userIdString' is set
        if (userIdString == null) {
            throw new ApiException("Missing the required parameter 'userIdString' when calling updateContactUser(Async)");
        }

        return updateContactUserCall(contactType, userIdString, _callback);

    }


    private ApiResponse<OrgContactUser> updateContactUserWithHttpInfo(String contactType, UserIdString userIdString) throws ApiException {
        okhttp3.Call localVarCall = updateContactUserValidateBeforeCall(contactType, userIdString, null);
        Type localVarReturnType = new TypeToken<OrgContactUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContactUserAsync(String contactType, UserIdString userIdString, final ApiCallback<OrgContactUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactUserValidateBeforeCall(contactType, userIdString, _callback);
        Type localVarReturnType = new TypeToken<OrgContactUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContactUserRequestBuilder {
        private final String contactType;
        private String userId;

        private UpdateContactUserRequestBuilder(String contactType) {
            this.contactType = contactType;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return UpdateContactUserRequestBuilder
         */
        public UpdateContactUserRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for updateContactUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserIdString userIdString = buildBodyParams();
            return updateContactUserCall(contactType, userIdString, _callback);
        }

        private UserIdString buildBodyParams() {
            UserIdString userIdString = new UserIdString();
            userIdString.userId(this.userId);
            return userIdString;
        }

        /**
         * Execute updateContactUser request
         * @return OrgContactUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgContactUser execute() throws ApiException {
            UserIdString userIdString = buildBodyParams();
            ApiResponse<OrgContactUser> localVarResp = updateContactUserWithHttpInfo(contactType, userIdString);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContactUser request with HTTP info returned
         * @return ApiResponse&lt;OrgContactUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgContactUser> executeWithHttpInfo() throws ApiException {
            UserIdString userIdString = buildBodyParams();
            return updateContactUserWithHttpInfo(contactType, userIdString);
        }

        /**
         * Execute updateContactUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgContactUser> _callback) throws ApiException {
            UserIdString userIdString = buildBodyParams();
            return updateContactUserAsync(contactType, userIdString, _callback);
        }
    }

    /**
     * Update org contact user
     * Updates the User associated with the specified Contact Type.
     * @param contactType  (required)
     * @param userIdString  (required)
     * @return UpdateContactUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContactUserRequestBuilder updateContactUser(String contactType) throws IllegalArgumentException {
        if (contactType == null) throw new IllegalArgumentException("\"contactType\" is required but got null");
            

        return new UpdateContactUserRequestBuilder(contactType);
    }
    private okhttp3.Call updateOrganizationLogoCall(ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationUpdateLogoRequest;

        // create path and map variables
        String localVarPath = "/api/v1/org/logo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationLogoValidateBeforeCall(ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationUpdateLogoRequest' is set
        if (applicationUpdateLogoRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateLogoRequest' when calling updateOrganizationLogo(Async)");
        }

        return updateOrganizationLogoCall(applicationUpdateLogoRequest, _callback);

    }


    private ApiResponse<Void> updateOrganizationLogoWithHttpInfo(ApplicationUpdateLogoRequest applicationUpdateLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationLogoValidateBeforeCall(applicationUpdateLogoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateOrganizationLogoAsync(ApplicationUpdateLogoRequest applicationUpdateLogoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationLogoValidateBeforeCall(applicationUpdateLogoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateOrganizationLogoRequestBuilder {
        private final File _file;

        private UpdateOrganizationLogoRequestBuilder(File _file) {
            this._file = _file;
        }

        /**
         * Build call for updateOrganizationLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateOrganizationLogoCall(applicationUpdateLogoRequest, _callback);
        }

        private ApplicationUpdateLogoRequest buildBodyParams() {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = new ApplicationUpdateLogoRequest();
            applicationUpdateLogoRequest._file(this._file);
            return applicationUpdateLogoRequest;
        }

        /**
         * Execute updateOrganizationLogo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            updateOrganizationLogoWithHttpInfo(applicationUpdateLogoRequest);
        }

        /**
         * Execute updateOrganizationLogo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateOrganizationLogoWithHttpInfo(applicationUpdateLogoRequest);
        }

        /**
         * Execute updateOrganizationLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicationUpdateLogoRequest applicationUpdateLogoRequest = buildBodyParams();
            return updateOrganizationLogoAsync(applicationUpdateLogoRequest, _callback);
        }
    }

    /**
     * Update org logo
     * Updates the logo for your organization.
     * @param applicationUpdateLogoRequest  (required)
     * @return UpdateOrganizationLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrganizationLogoRequestBuilder updateOrganizationLogo(File _file) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UpdateOrganizationLogoRequestBuilder(_file);
    }
    private okhttp3.Call updateSettingCall(OrgSetting orgSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgSetting;

        // create path and map variables
        String localVarPath = "/api/v1/org";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingValidateBeforeCall(OrgSetting orgSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgSetting' is set
        if (orgSetting == null) {
            throw new ApiException("Missing the required parameter 'orgSetting' when calling updateSetting(Async)");
        }

        return updateSettingCall(orgSetting, _callback);

    }


    private ApiResponse<OrgSetting> updateSettingWithHttpInfo(OrgSetting orgSetting) throws ApiException {
        okhttp3.Call localVarCall = updateSettingValidateBeforeCall(orgSetting, null);
        Type localVarReturnType = new TypeToken<OrgSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingAsync(OrgSetting orgSetting, final ApiCallback<OrgSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingValidateBeforeCall(orgSetting, _callback);
        Type localVarReturnType = new TypeToken<OrgSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingRequestBuilder {
        private Map<String, Object> links;
        private String address1;
        private String address2;
        private String city;
        private String companyName;
        private String country;
        private OffsetDateTime created;
        private String endUserSupportHelpURL;
        private OffsetDateTime expiresAt;
        private String id;
        private OffsetDateTime lastUpdated;
        private String phoneNumber;
        private String postalCode;
        private String state;
        private String status;
        private String subdomain;
        private String supportPhoneNumber;
        private String website;

        private UpdateSettingRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set address1
         * @param address1  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set companyName
         * @param companyName  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder companyName(String companyName) {
            this.companyName = companyName;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set endUserSupportHelpURL
         * @param endUserSupportHelpURL  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder endUserSupportHelpURL(String endUserSupportHelpURL) {
            this.endUserSupportHelpURL = endUserSupportHelpURL;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set subdomain
         * @param subdomain  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder subdomain(String subdomain) {
            this.subdomain = subdomain;
            return this;
        }
        
        /**
         * Set supportPhoneNumber
         * @param supportPhoneNumber  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder supportPhoneNumber(String supportPhoneNumber) {
            this.supportPhoneNumber = supportPhoneNumber;
            return this;
        }
        
        /**
         * Set website
         * @param website  (optional)
         * @return UpdateSettingRequestBuilder
         */
        public UpdateSettingRequestBuilder website(String website) {
            this.website = website;
            return this;
        }
        
        /**
         * Build call for updateSetting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            return updateSettingCall(orgSetting, _callback);
        }

        private OrgSetting buildBodyParams() {
            OrgSetting orgSetting = new OrgSetting();
            orgSetting.links(this.links);
            orgSetting.address1(this.address1);
            orgSetting.address2(this.address2);
            orgSetting.city(this.city);
            orgSetting.companyName(this.companyName);
            orgSetting.country(this.country);
            orgSetting.created(this.created);
            orgSetting.endUserSupportHelpURL(this.endUserSupportHelpURL);
            orgSetting.expiresAt(this.expiresAt);
            orgSetting.id(this.id);
            orgSetting.lastUpdated(this.lastUpdated);
            orgSetting.phoneNumber(this.phoneNumber);
            orgSetting.postalCode(this.postalCode);
            orgSetting.state(this.state);
            orgSetting.status(this.status);
            orgSetting.subdomain(this.subdomain);
            orgSetting.supportPhoneNumber(this.supportPhoneNumber);
            orgSetting.website(this.website);
            return orgSetting;
        }

        /**
         * Execute updateSetting request
         * @return OrgSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgSetting execute() throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            ApiResponse<OrgSetting> localVarResp = updateSettingWithHttpInfo(orgSetting);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSetting request with HTTP info returned
         * @return ApiResponse&lt;OrgSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgSetting> executeWithHttpInfo() throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            return updateSettingWithHttpInfo(orgSetting);
        }

        /**
         * Execute updateSetting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgSetting> _callback) throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            return updateSettingAsync(orgSetting, _callback);
        }
    }

    /**
     * Update Org setting
     * Update settings of your organization.
     * @param orgSetting  (required)
     * @return UpdateSettingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingRequestBuilder updateSetting() throws IllegalArgumentException {
        return new UpdateSettingRequestBuilder();
    }
    private okhttp3.Call updateSettingsCall(OrgSetting orgSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgSetting;

        // create path and map variables
        String localVarPath = "/api/v1/org";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(OrgSetting orgSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgSetting' is set
        if (orgSetting == null) {
            throw new ApiException("Missing the required parameter 'orgSetting' when calling updateSettings(Async)");
        }

        return updateSettingsCall(orgSetting, _callback);

    }


    private ApiResponse<OrgSetting> updateSettingsWithHttpInfo(OrgSetting orgSetting) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(orgSetting, null);
        Type localVarReturnType = new TypeToken<OrgSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(OrgSetting orgSetting, final ApiCallback<OrgSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(orgSetting, _callback);
        Type localVarReturnType = new TypeToken<OrgSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private Map<String, Object> links;
        private String address1;
        private String address2;
        private String city;
        private String companyName;
        private String country;
        private OffsetDateTime created;
        private String endUserSupportHelpURL;
        private OffsetDateTime expiresAt;
        private String id;
        private OffsetDateTime lastUpdated;
        private String phoneNumber;
        private String postalCode;
        private String state;
        private String status;
        private String subdomain;
        private String supportPhoneNumber;
        private String website;

        private UpdateSettingsRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set address1
         * @param address1  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set companyName
         * @param companyName  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder companyName(String companyName) {
            this.companyName = companyName;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set endUserSupportHelpURL
         * @param endUserSupportHelpURL  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder endUserSupportHelpURL(String endUserSupportHelpURL) {
            this.endUserSupportHelpURL = endUserSupportHelpURL;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set subdomain
         * @param subdomain  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder subdomain(String subdomain) {
            this.subdomain = subdomain;
            return this;
        }
        
        /**
         * Set supportPhoneNumber
         * @param supportPhoneNumber  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder supportPhoneNumber(String supportPhoneNumber) {
            this.supportPhoneNumber = supportPhoneNumber;
            return this;
        }
        
        /**
         * Set website
         * @param website  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder website(String website) {
            this.website = website;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            return updateSettingsCall(orgSetting, _callback);
        }

        private OrgSetting buildBodyParams() {
            OrgSetting orgSetting = new OrgSetting();
            orgSetting.links(this.links);
            orgSetting.address1(this.address1);
            orgSetting.address2(this.address2);
            orgSetting.city(this.city);
            orgSetting.companyName(this.companyName);
            orgSetting.country(this.country);
            orgSetting.created(this.created);
            orgSetting.endUserSupportHelpURL(this.endUserSupportHelpURL);
            orgSetting.expiresAt(this.expiresAt);
            orgSetting.id(this.id);
            orgSetting.lastUpdated(this.lastUpdated);
            orgSetting.phoneNumber(this.phoneNumber);
            orgSetting.postalCode(this.postalCode);
            orgSetting.state(this.state);
            orgSetting.status(this.status);
            orgSetting.subdomain(this.subdomain);
            orgSetting.supportPhoneNumber(this.supportPhoneNumber);
            orgSetting.website(this.website);
            return orgSetting;
        }

        /**
         * Execute updateSettings request
         * @return OrgSetting
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrgSetting execute() throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            ApiResponse<OrgSetting> localVarResp = updateSettingsWithHttpInfo(orgSetting);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;OrgSetting&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgSetting> executeWithHttpInfo() throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            return updateSettingsWithHttpInfo(orgSetting);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgSetting> _callback) throws ApiException {
            OrgSetting orgSetting = buildBodyParams();
            return updateSettingsAsync(orgSetting, _callback);
        }
    }

    /**
     * Partial update Org setting
     * Partial update settings of your organization.
     * @param orgSetting  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings() throws IllegalArgumentException {
        return new UpdateSettingsRequestBuilder();
    }
}
