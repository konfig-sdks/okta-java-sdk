/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LinkedObject;
import com.konfigthis.client.model.LinkedObjectDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LinkedObjectApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LinkedObjectApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LinkedObjectApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLinkedObjectCall(LinkedObject linkedObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkedObject;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/user/linkedObjects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkedObjectValidateBeforeCall(LinkedObject linkedObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkedObject' is set
        if (linkedObject == null) {
            throw new ApiException("Missing the required parameter 'linkedObject' when calling createLinkedObject(Async)");
        }

        return createLinkedObjectCall(linkedObject, _callback);

    }


    private ApiResponse<LinkedObject> createLinkedObjectWithHttpInfo(LinkedObject linkedObject) throws ApiException {
        okhttp3.Call localVarCall = createLinkedObjectValidateBeforeCall(linkedObject, null);
        Type localVarReturnType = new TypeToken<LinkedObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLinkedObjectAsync(LinkedObject linkedObject, final ApiCallback<LinkedObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkedObjectValidateBeforeCall(linkedObject, _callback);
        Type localVarReturnType = new TypeToken<LinkedObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLinkedObjectRequestBuilder {
        private Map<String, Object> links;
        private LinkedObjectDetails associated;
        private LinkedObjectDetails primary;

        private CreateLinkedObjectRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return CreateLinkedObjectRequestBuilder
         */
        public CreateLinkedObjectRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set associated
         * @param associated  (optional)
         * @return CreateLinkedObjectRequestBuilder
         */
        public CreateLinkedObjectRequestBuilder associated(LinkedObjectDetails associated) {
            this.associated = associated;
            return this;
        }
        
        /**
         * Set primary
         * @param primary  (optional)
         * @return CreateLinkedObjectRequestBuilder
         */
        public CreateLinkedObjectRequestBuilder primary(LinkedObjectDetails primary) {
            this.primary = primary;
            return this;
        }
        
        /**
         * Build call for createLinkedObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LinkedObject linkedObject = buildBodyParams();
            return createLinkedObjectCall(linkedObject, _callback);
        }

        private LinkedObject buildBodyParams() {
            LinkedObject linkedObject = new LinkedObject();
            linkedObject.links(this.links);
            linkedObject.associated(this.associated);
            linkedObject.primary(this.primary);
            return linkedObject;
        }

        /**
         * Execute createLinkedObject request
         * @return LinkedObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public LinkedObject execute() throws ApiException {
            LinkedObject linkedObject = buildBodyParams();
            ApiResponse<LinkedObject> localVarResp = createLinkedObjectWithHttpInfo(linkedObject);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLinkedObject request with HTTP info returned
         * @return ApiResponse&lt;LinkedObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkedObject> executeWithHttpInfo() throws ApiException {
            LinkedObject linkedObject = buildBodyParams();
            return createLinkedObjectWithHttpInfo(linkedObject);
        }

        /**
         * Execute createLinkedObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkedObject> _callback) throws ApiException {
            LinkedObject linkedObject = buildBodyParams();
            return createLinkedObjectAsync(linkedObject, _callback);
        }
    }

    /**
     * 
     * Success
     * @param linkedObject  (required)
     * @return CreateLinkedObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateLinkedObjectRequestBuilder createLinkedObject() throws IllegalArgumentException {
        return new CreateLinkedObjectRequestBuilder();
    }
    private okhttp3.Call deleteUserLinkedObjectCall(String linkedObjectName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}"
            .replace("{" + "linkedObjectName" + "}", localVarApiClient.escapeString(linkedObjectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserLinkedObjectValidateBeforeCall(String linkedObjectName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkedObjectName' is set
        if (linkedObjectName == null) {
            throw new ApiException("Missing the required parameter 'linkedObjectName' when calling deleteUserLinkedObject(Async)");
        }

        return deleteUserLinkedObjectCall(linkedObjectName, _callback);

    }


    private ApiResponse<Void> deleteUserLinkedObjectWithHttpInfo(String linkedObjectName) throws ApiException {
        okhttp3.Call localVarCall = deleteUserLinkedObjectValidateBeforeCall(linkedObjectName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserLinkedObjectAsync(String linkedObjectName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserLinkedObjectValidateBeforeCall(linkedObjectName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUserLinkedObjectRequestBuilder {
        private final String linkedObjectName;

        private DeleteUserLinkedObjectRequestBuilder(String linkedObjectName) {
            this.linkedObjectName = linkedObjectName;
        }

        /**
         * Build call for deleteUserLinkedObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserLinkedObjectCall(linkedObjectName, _callback);
        }


        /**
         * Execute deleteUserLinkedObject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserLinkedObjectWithHttpInfo(linkedObjectName);
        }

        /**
         * Execute deleteUserLinkedObject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserLinkedObjectWithHttpInfo(linkedObjectName);
        }

        /**
         * Execute deleteUserLinkedObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserLinkedObjectAsync(linkedObjectName, _callback);
        }
    }

    /**
     * 
     * Success
     * @param linkedObjectName  (required)
     * @return DeleteUserLinkedObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserLinkedObjectRequestBuilder deleteUserLinkedObject(String linkedObjectName) throws IllegalArgumentException {
        if (linkedObjectName == null) throw new IllegalArgumentException("\"linkedObjectName\" is required but got null");
            

        return new DeleteUserLinkedObjectRequestBuilder(linkedObjectName);
    }
    private okhttp3.Call getUserLinkedObjectsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/user/linkedObjects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLinkedObjectsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserLinkedObjectsCall(_callback);

    }


    private ApiResponse<List<LinkedObject>> getUserLinkedObjectsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserLinkedObjectsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<LinkedObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserLinkedObjectsAsync(final ApiCallback<List<LinkedObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserLinkedObjectsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<LinkedObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserLinkedObjectsRequestBuilder {

        private GetUserLinkedObjectsRequestBuilder() {
        }

        /**
         * Build call for getUserLinkedObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserLinkedObjectsCall(_callback);
        }


        /**
         * Execute getUserLinkedObjects request
         * @return List&lt;LinkedObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<LinkedObject> execute() throws ApiException {
            ApiResponse<List<LinkedObject>> localVarResp = getUserLinkedObjectsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserLinkedObjects request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LinkedObject&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LinkedObject>> executeWithHttpInfo() throws ApiException {
            return getUserLinkedObjectsWithHttpInfo();
        }

        /**
         * Execute getUserLinkedObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LinkedObject>> _callback) throws ApiException {
            return getUserLinkedObjectsAsync(_callback);
        }
    }

    /**
     * 
     * Success
     * @return GetUserLinkedObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserLinkedObjectsRequestBuilder getUserLinkedObjects() throws IllegalArgumentException {
        return new GetUserLinkedObjectsRequestBuilder();
    }
    private okhttp3.Call getUserLinkedObjects_0Call(String linkedObjectName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}"
            .replace("{" + "linkedObjectName" + "}", localVarApiClient.escapeString(linkedObjectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLinkedObjects_0ValidateBeforeCall(String linkedObjectName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkedObjectName' is set
        if (linkedObjectName == null) {
            throw new ApiException("Missing the required parameter 'linkedObjectName' when calling getUserLinkedObjects_0(Async)");
        }

        return getUserLinkedObjects_0Call(linkedObjectName, _callback);

    }


    private ApiResponse<LinkedObject> getUserLinkedObjects_0WithHttpInfo(String linkedObjectName) throws ApiException {
        okhttp3.Call localVarCall = getUserLinkedObjects_0ValidateBeforeCall(linkedObjectName, null);
        Type localVarReturnType = new TypeToken<LinkedObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserLinkedObjects_0Async(String linkedObjectName, final ApiCallback<LinkedObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserLinkedObjects_0ValidateBeforeCall(linkedObjectName, _callback);
        Type localVarReturnType = new TypeToken<LinkedObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserLinkedObjects0RequestBuilder {
        private final String linkedObjectName;

        private GetUserLinkedObjects0RequestBuilder(String linkedObjectName) {
            this.linkedObjectName = linkedObjectName;
        }

        /**
         * Build call for getUserLinkedObjects_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserLinkedObjects_0Call(linkedObjectName, _callback);
        }


        /**
         * Execute getUserLinkedObjects_0 request
         * @return LinkedObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public LinkedObject execute() throws ApiException {
            ApiResponse<LinkedObject> localVarResp = getUserLinkedObjects_0WithHttpInfo(linkedObjectName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserLinkedObjects_0 request with HTTP info returned
         * @return ApiResponse&lt;LinkedObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkedObject> executeWithHttpInfo() throws ApiException {
            return getUserLinkedObjects_0WithHttpInfo(linkedObjectName);
        }

        /**
         * Execute getUserLinkedObjects_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkedObject> _callback) throws ApiException {
            return getUserLinkedObjects_0Async(linkedObjectName, _callback);
        }
    }

    /**
     * 
     * Success
     * @param linkedObjectName  (required)
     * @return GetUserLinkedObjects0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserLinkedObjects0RequestBuilder getUserLinkedObjects_0(String linkedObjectName) throws IllegalArgumentException {
        if (linkedObjectName == null) throw new IllegalArgumentException("\"linkedObjectName\" is required but got null");
            

        return new GetUserLinkedObjects0RequestBuilder(linkedObjectName);
    }
}
