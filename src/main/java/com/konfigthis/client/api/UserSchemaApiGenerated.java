/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UserSchema;
import com.konfigthis.client.model.UserSchemaDefinitions;
import com.konfigthis.client.model.UserSchemaProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserSchemaApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserSchemaApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserSchemaApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSchemaByIdCall(String schemaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/user/{schemaId}"
            .replace("{" + "schemaId" + "}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaByIdValidateBeforeCall(String schemaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling getSchemaById(Async)");
        }

        return getSchemaByIdCall(schemaId, _callback);

    }


    private ApiResponse<UserSchema> getSchemaByIdWithHttpInfo(String schemaId) throws ApiException {
        okhttp3.Call localVarCall = getSchemaByIdValidateBeforeCall(schemaId, null);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemaByIdAsync(String schemaId, final ApiCallback<UserSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaByIdValidateBeforeCall(schemaId, _callback);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchemaByIdRequestBuilder {
        private final String schemaId;

        private GetSchemaByIdRequestBuilder(String schemaId) {
            this.schemaId = schemaId;
        }

        /**
         * Build call for getSchemaById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemaByIdCall(schemaId, _callback);
        }


        /**
         * Execute getSchemaById request
         * @return UserSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserSchema execute() throws ApiException {
            ApiResponse<UserSchema> localVarResp = getSchemaByIdWithHttpInfo(schemaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSchemaById request with HTTP info returned
         * @return ApiResponse&lt;UserSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSchema> executeWithHttpInfo() throws ApiException {
            return getSchemaByIdWithHttpInfo(schemaId);
        }

        /**
         * Execute getSchemaById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSchema> _callback) throws ApiException {
            return getSchemaByIdAsync(schemaId, _callback);
        }
    }

    /**
     * Fetches the schema for a Schema Id.
     * Fetches the schema for a Schema Id.
     * @param schemaId  (required)
     * @return GetSchemaByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemaByIdRequestBuilder getSchemaById(String schemaId) throws IllegalArgumentException {
        if (schemaId == null) throw new IllegalArgumentException("\"schemaId\" is required but got null");
            

        return new GetSchemaByIdRequestBuilder(schemaId);
    }
    private okhttp3.Call getUserSchemaCall(String appInstanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/apps/{appInstanceId}/default"
            .replace("{" + "appInstanceId" + "}", localVarApiClient.escapeString(appInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSchemaValidateBeforeCall(String appInstanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceId' is set
        if (appInstanceId == null) {
            throw new ApiException("Missing the required parameter 'appInstanceId' when calling getUserSchema(Async)");
        }

        return getUserSchemaCall(appInstanceId, _callback);

    }


    private ApiResponse<UserSchema> getUserSchemaWithHttpInfo(String appInstanceId) throws ApiException {
        okhttp3.Call localVarCall = getUserSchemaValidateBeforeCall(appInstanceId, null);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSchemaAsync(String appInstanceId, final ApiCallback<UserSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSchemaValidateBeforeCall(appInstanceId, _callback);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSchemaRequestBuilder {
        private final String appInstanceId;

        private GetUserSchemaRequestBuilder(String appInstanceId) {
            this.appInstanceId = appInstanceId;
        }

        /**
         * Build call for getUserSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSchemaCall(appInstanceId, _callback);
        }


        /**
         * Execute getUserSchema request
         * @return UserSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public UserSchema execute() throws ApiException {
            ApiResponse<UserSchema> localVarResp = getUserSchemaWithHttpInfo(appInstanceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSchema request with HTTP info returned
         * @return ApiResponse&lt;UserSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSchema> executeWithHttpInfo() throws ApiException {
            return getUserSchemaWithHttpInfo(appInstanceId);
        }

        /**
         * Execute getUserSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSchema> _callback) throws ApiException {
            return getUserSchemaAsync(appInstanceId, _callback);
        }
    }

    /**
     * Fetches the Schema for an App User
     * Fetches the Schema for an App User
     * @param appInstanceId  (required)
     * @return GetUserSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSchemaRequestBuilder getUserSchema(String appInstanceId) throws IllegalArgumentException {
        if (appInstanceId == null) throw new IllegalArgumentException("\"appInstanceId\" is required but got null");
            

        return new GetUserSchemaRequestBuilder(appInstanceId);
    }
    private okhttp3.Call partialUpdateUserProfileCall(String appInstanceId, UserSchema userSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userSchema;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/apps/{appInstanceId}/default"
            .replace("{" + "appInstanceId" + "}", localVarApiClient.escapeString(appInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateUserProfileValidateBeforeCall(String appInstanceId, UserSchema userSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceId' is set
        if (appInstanceId == null) {
            throw new ApiException("Missing the required parameter 'appInstanceId' when calling partialUpdateUserProfile(Async)");
        }

        return partialUpdateUserProfileCall(appInstanceId, userSchema, _callback);

    }


    private ApiResponse<UserSchema> partialUpdateUserProfileWithHttpInfo(String appInstanceId, UserSchema userSchema) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateUserProfileValidateBeforeCall(appInstanceId, userSchema, null);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partialUpdateUserProfileAsync(String appInstanceId, UserSchema userSchema, final ApiCallback<UserSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateUserProfileValidateBeforeCall(appInstanceId, userSchema, _callback);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartialUpdateUserProfileRequestBuilder {
        private final String appInstanceId;
        private String title;
        private String $schema;
        private Map<String, Object> links;
        private String created;
        private UserSchemaDefinitions definitions;
        private String id;
        private String lastUpdated;
        private String name;
        private UserSchemaProperties properties;
        private String type;

        private PartialUpdateUserProfileRequestBuilder(String appInstanceId) {
            this.appInstanceId = appInstanceId;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set $schema
         * @param $schema  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder $schema(String $schema) {
            this.$schema = $schema;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder created(String created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set definitions
         * @param definitions  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder definitions(UserSchemaDefinitions definitions) {
            this.definitions = definitions;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder lastUpdated(String lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set properties
         * @param properties  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder properties(UserSchemaProperties properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return PartialUpdateUserProfileRequestBuilder
         */
        public PartialUpdateUserProfileRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for partialUpdateUserProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserSchema userSchema = buildBodyParams();
            return partialUpdateUserProfileCall(appInstanceId, userSchema, _callback);
        }

        private UserSchema buildBodyParams() {
            UserSchema userSchema = new UserSchema();
            userSchema.title(this.title);
            userSchema.$schema(this.$schema);
            userSchema.links(this.links);
            userSchema.created(this.created);
            userSchema.definitions(this.definitions);
            userSchema.id(this.id);
            userSchema.lastUpdated(this.lastUpdated);
            userSchema.name(this.name);
            userSchema.properties(this.properties);
            userSchema.type(this.type);
            return userSchema;
        }

        /**
         * Execute partialUpdateUserProfile request
         * @return UserSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public UserSchema execute() throws ApiException {
            UserSchema userSchema = buildBodyParams();
            ApiResponse<UserSchema> localVarResp = partialUpdateUserProfileWithHttpInfo(appInstanceId, userSchema);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partialUpdateUserProfile request with HTTP info returned
         * @return ApiResponse&lt;UserSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSchema> executeWithHttpInfo() throws ApiException {
            UserSchema userSchema = buildBodyParams();
            return partialUpdateUserProfileWithHttpInfo(appInstanceId, userSchema);
        }

        /**
         * Execute partialUpdateUserProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSchema> _callback) throws ApiException {
            UserSchema userSchema = buildBodyParams();
            return partialUpdateUserProfileAsync(appInstanceId, userSchema, _callback);
        }
    }

    /**
     * Partial updates on the User Profile properties of the Application User Schema.
     * Partial updates on the User Profile properties of the Application User Schema.
     * @param appInstanceId  (required)
     * @return PartialUpdateUserProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public PartialUpdateUserProfileRequestBuilder partialUpdateUserProfile(String appInstanceId) throws IllegalArgumentException {
        if (appInstanceId == null) throw new IllegalArgumentException("\"appInstanceId\" is required but got null");
            

        return new PartialUpdateUserProfileRequestBuilder(appInstanceId);
    }
    private okhttp3.Call partialUpdateUserProfile_0Call(String schemaId, UserSchema userSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userSchema;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/user/{schemaId}"
            .replace("{" + "schemaId" + "}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateUserProfile_0ValidateBeforeCall(String schemaId, UserSchema userSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling partialUpdateUserProfile_0(Async)");
        }

        // verify the required parameter 'userSchema' is set
        if (userSchema == null) {
            throw new ApiException("Missing the required parameter 'userSchema' when calling partialUpdateUserProfile_0(Async)");
        }

        return partialUpdateUserProfile_0Call(schemaId, userSchema, _callback);

    }


    private ApiResponse<UserSchema> partialUpdateUserProfile_0WithHttpInfo(String schemaId, UserSchema userSchema) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateUserProfile_0ValidateBeforeCall(schemaId, userSchema, null);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partialUpdateUserProfile_0Async(String schemaId, UserSchema userSchema, final ApiCallback<UserSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateUserProfile_0ValidateBeforeCall(schemaId, userSchema, _callback);
        Type localVarReturnType = new TypeToken<UserSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartialUpdateUserProfile0RequestBuilder {
        private final String schemaId;
        private String title;
        private String $schema;
        private Map<String, Object> links;
        private String created;
        private UserSchemaDefinitions definitions;
        private String id;
        private String lastUpdated;
        private String name;
        private UserSchemaProperties properties;
        private String type;

        private PartialUpdateUserProfile0RequestBuilder(String schemaId) {
            this.schemaId = schemaId;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set $schema
         * @param $schema  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder $schema(String $schema) {
            this.$schema = $schema;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder created(String created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set definitions
         * @param definitions  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder definitions(UserSchemaDefinitions definitions) {
            this.definitions = definitions;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder lastUpdated(String lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set properties
         * @param properties  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder properties(UserSchemaProperties properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return PartialUpdateUserProfile0RequestBuilder
         */
        public PartialUpdateUserProfile0RequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for partialUpdateUserProfile_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserSchema userSchema = buildBodyParams();
            return partialUpdateUserProfile_0Call(schemaId, userSchema, _callback);
        }

        private UserSchema buildBodyParams() {
            UserSchema userSchema = new UserSchema();
            userSchema.title(this.title);
            userSchema.$schema(this.$schema);
            userSchema.links(this.links);
            userSchema.created(this.created);
            userSchema.definitions(this.definitions);
            userSchema.id(this.id);
            userSchema.lastUpdated(this.lastUpdated);
            userSchema.name(this.name);
            userSchema.properties(this.properties);
            userSchema.type(this.type);
            return userSchema;
        }

        /**
         * Execute partialUpdateUserProfile_0 request
         * @return UserSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserSchema execute() throws ApiException {
            UserSchema userSchema = buildBodyParams();
            ApiResponse<UserSchema> localVarResp = partialUpdateUserProfile_0WithHttpInfo(schemaId, userSchema);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partialUpdateUserProfile_0 request with HTTP info returned
         * @return ApiResponse&lt;UserSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSchema> executeWithHttpInfo() throws ApiException {
            UserSchema userSchema = buildBodyParams();
            return partialUpdateUserProfile_0WithHttpInfo(schemaId, userSchema);
        }

        /**
         * Execute partialUpdateUserProfile_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSchema> _callback) throws ApiException {
            UserSchema userSchema = buildBodyParams();
            return partialUpdateUserProfile_0Async(schemaId, userSchema, _callback);
        }
    }

    /**
     * 
     * Partial updates on the User Profile properties of the user schema.
     * @param schemaId  (required)
     * @param userSchema  (required)
     * @return PartialUpdateUserProfile0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PartialUpdateUserProfile0RequestBuilder partialUpdateUserProfile_0(String schemaId) throws IllegalArgumentException {
        if (schemaId == null) throw new IllegalArgumentException("\"schemaId\" is required but got null");
            

        return new PartialUpdateUserProfile0RequestBuilder(schemaId);
    }
}
