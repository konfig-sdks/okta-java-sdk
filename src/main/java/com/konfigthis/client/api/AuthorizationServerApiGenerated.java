/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuthorizationServer;
import com.konfigthis.client.model.AuthorizationServerCredentials;
import com.konfigthis.client.model.AuthorizationServerPolicy;
import com.konfigthis.client.model.AuthorizationServerPolicyRule;
import com.konfigthis.client.model.AuthorizationServerPolicyRuleActions;
import com.konfigthis.client.model.AuthorizationServerPolicyRuleConditions;
import com.konfigthis.client.model.JsonWebKey;
import com.konfigthis.client.model.JwkUse;
import com.konfigthis.client.model.OAuth2Claim;
import com.konfigthis.client.model.OAuth2ClaimConditions;
import com.konfigthis.client.model.OAuth2Client;
import com.konfigthis.client.model.OAuth2RefreshToken;
import com.konfigthis.client.model.OAuth2Scope;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PolicyRuleConditions;
import com.konfigthis.client.model.PolicyType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthorizationServerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationServerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationServerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleSuccessCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/lifecycle/activate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleSuccessValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling activateLifecycleSuccess(Async)");
        }

        return activateLifecycleSuccessCall(authServerId, _callback);

    }


    private ApiResponse<Void> activateLifecycleSuccessWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(authServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activateLifecycleSuccessAsync(String authServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(authServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleSuccessRequestBuilder {
        private final String authServerId;

        private ActivateLifecycleSuccessRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for activateLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleSuccessCall(authServerId, _callback);
        }


        /**
         * Execute activateLifecycleSuccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activateLifecycleSuccessWithHttpInfo(authServerId);
        }

        /**
         * Execute activateLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activateLifecycleSuccessWithHttpInfo(authServerId);
        }

        /**
         * Execute activateLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activateLifecycleSuccessAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return ActivateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleSuccessRequestBuilder activateLifecycleSuccess(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new ActivateLifecycleSuccessRequestBuilder(authServerId);
    }
    private okhttp3.Call activatePolicyLifecycleCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activatePolicyLifecycleValidateBeforeCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling activatePolicyLifecycle(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling activatePolicyLifecycle(Async)");
        }

        return activatePolicyLifecycleCall(authServerId, policyId, _callback);

    }


    private ApiResponse<Void> activatePolicyLifecycleWithHttpInfo(String authServerId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = activatePolicyLifecycleValidateBeforeCall(authServerId, policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activatePolicyLifecycleAsync(String authServerId, String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activatePolicyLifecycleValidateBeforeCall(authServerId, policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivatePolicyLifecycleRequestBuilder {
        private final String authServerId;
        private final String policyId;

        private ActivatePolicyLifecycleRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Build call for activatePolicyLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activatePolicyLifecycleCall(authServerId, policyId, _callback);
        }


        /**
         * Execute activatePolicyLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activatePolicyLifecycleWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute activatePolicyLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activatePolicyLifecycleWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute activatePolicyLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activatePolicyLifecycleAsync(authServerId, policyId, _callback);
        }
    }

    /**
     * 
     * Activate Authorization Server Policy
     * @param authServerId  (required)
     * @param policyId  (required)
     * @return ActivatePolicyLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivatePolicyLifecycleRequestBuilder activatePolicyLifecycle(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new ActivatePolicyLifecycleRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call activatePolicyRuleCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activatePolicyRuleValidateBeforeCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling activatePolicyRule(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling activatePolicyRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling activatePolicyRule(Async)");
        }

        return activatePolicyRuleCall(authServerId, policyId, ruleId, _callback);

    }


    private ApiResponse<Void> activatePolicyRuleWithHttpInfo(String authServerId, String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = activatePolicyRuleValidateBeforeCall(authServerId, policyId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activatePolicyRuleAsync(String authServerId, String policyId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activatePolicyRuleValidateBeforeCall(authServerId, policyId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivatePolicyRuleRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private final String ruleId;

        private ActivatePolicyRuleRequestBuilder(String authServerId, String policyId, String ruleId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for activatePolicyRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activatePolicyRuleCall(authServerId, policyId, ruleId, _callback);
        }


        /**
         * Execute activatePolicyRule request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activatePolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute activatePolicyRule request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activatePolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute activatePolicyRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activatePolicyRuleAsync(authServerId, policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Activate Authorization Server Policy Rule
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return ActivatePolicyRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivatePolicyRuleRequestBuilder activatePolicyRule(String authServerId, String policyId, String ruleId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new ActivatePolicyRuleRequestBuilder(authServerId, policyId, ruleId);
    }
    private okhttp3.Call createClaimsCall(String authServerId, OAuth2Claim oauth2Claim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2Claim;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/claims"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClaimsValidateBeforeCall(String authServerId, OAuth2Claim oauth2Claim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling createClaims(Async)");
        }

        // verify the required parameter 'oauth2Claim' is set
        if (oauth2Claim == null) {
            throw new ApiException("Missing the required parameter 'oauth2Claim' when calling createClaims(Async)");
        }

        return createClaimsCall(authServerId, oauth2Claim, _callback);

    }


    private ApiResponse<OAuth2Claim> createClaimsWithHttpInfo(String authServerId, OAuth2Claim oauth2Claim) throws ApiException {
        okhttp3.Call localVarCall = createClaimsValidateBeforeCall(authServerId, oauth2Claim, null);
        Type localVarReturnType = new TypeToken<OAuth2Claim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createClaimsAsync(String authServerId, OAuth2Claim oauth2Claim, final ApiCallback<OAuth2Claim> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClaimsValidateBeforeCall(authServerId, oauth2Claim, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Claim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateClaimsRequestBuilder {
        private final String authServerId;
        private Map<String, Object> links;
        private Boolean alwaysIncludeInToken;
        private String claimType;
        private OAuth2ClaimConditions conditions;
        private String groupFilterType;
        private String id;
        private String name;
        private String status;
        private Boolean system;
        private String value;
        private String valueType;

        private CreateClaimsRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set alwaysIncludeInToken
         * @param alwaysIncludeInToken  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder alwaysIncludeInToken(Boolean alwaysIncludeInToken) {
            this.alwaysIncludeInToken = alwaysIncludeInToken;
            return this;
        }
        
        /**
         * Set claimType
         * @param claimType  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder claimType(String claimType) {
            this.claimType = claimType;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder conditions(OAuth2ClaimConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set groupFilterType
         * @param groupFilterType  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder groupFilterType(String groupFilterType) {
            this.groupFilterType = groupFilterType;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set value
         * @param value  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set valueType
         * @param valueType  (optional)
         * @return CreateClaimsRequestBuilder
         */
        public CreateClaimsRequestBuilder valueType(String valueType) {
            this.valueType = valueType;
            return this;
        }
        
        /**
         * Build call for createClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            return createClaimsCall(authServerId, oauth2Claim, _callback);
        }

        private OAuth2Claim buildBodyParams() {
            OAuth2Claim oauth2Claim = new OAuth2Claim();
            oauth2Claim.links(this.links);
            oauth2Claim.alwaysIncludeInToken(this.alwaysIncludeInToken);
            if (this.claimType != null)
            oauth2Claim.claimType(OAuth2Claim.ClaimTypeEnum.fromValue(this.claimType));
            oauth2Claim.conditions(this.conditions);
            if (this.groupFilterType != null)
            oauth2Claim.groupFilterType(OAuth2Claim.GroupFilterTypeEnum.fromValue(this.groupFilterType));
            oauth2Claim.id(this.id);
            oauth2Claim.name(this.name);
            if (this.status != null)
            oauth2Claim.status(OAuth2Claim.StatusEnum.fromValue(this.status));
            oauth2Claim.system(this.system);
            oauth2Claim.value(this.value);
            if (this.valueType != null)
            oauth2Claim.valueType(OAuth2Claim.ValueTypeEnum.fromValue(this.valueType));
            return oauth2Claim;
        }

        /**
         * Execute createClaims request
         * @return OAuth2Claim
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Claim execute() throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            ApiResponse<OAuth2Claim> localVarResp = createClaimsWithHttpInfo(authServerId, oauth2Claim);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createClaims request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Claim&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Claim> executeWithHttpInfo() throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            return createClaimsWithHttpInfo(authServerId, oauth2Claim);
        }

        /**
         * Execute createClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Claim> _callback) throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            return createClaimsAsync(authServerId, oauth2Claim, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param oauth2Claim  (required)
     * @return CreateClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClaimsRequestBuilder createClaims(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new CreateClaimsRequestBuilder(authServerId);
    }
    private okhttp3.Call createNewServerCall(AuthorizationServer authorizationServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationServer;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewServerValidateBeforeCall(AuthorizationServer authorizationServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationServer' is set
        if (authorizationServer == null) {
            throw new ApiException("Missing the required parameter 'authorizationServer' when calling createNewServer(Async)");
        }

        return createNewServerCall(authorizationServer, _callback);

    }


    private ApiResponse<AuthorizationServer> createNewServerWithHttpInfo(AuthorizationServer authorizationServer) throws ApiException {
        okhttp3.Call localVarCall = createNewServerValidateBeforeCall(authorizationServer, null);
        Type localVarReturnType = new TypeToken<AuthorizationServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewServerAsync(AuthorizationServer authorizationServer, final ApiCallback<AuthorizationServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewServerValidateBeforeCall(authorizationServer, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewServerRequestBuilder {
        private String description;
        private Map<String, Object> links;
        private List<String> audiences;
        private OffsetDateTime created;
        private AuthorizationServerCredentials credentials;
        private Boolean _default;
        private String id;
        private String issuer;
        private String issuerMode;
        private OffsetDateTime lastUpdated;
        private String name;
        private String status;

        private CreateNewServerRequestBuilder() {
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set audiences
         * @param audiences  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder audiences(List<String> audiences) {
            this.audiences = audiences;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder credentials(AuthorizationServerCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuer
         * @param issuer  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder issuer(String issuer) {
            this.issuer = issuer;
            return this;
        }
        
        /**
         * Set issuerMode
         * @param issuerMode  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder issuerMode(String issuerMode) {
            this.issuerMode = issuerMode;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewServerRequestBuilder
         */
        public CreateNewServerRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createNewServer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            return createNewServerCall(authorizationServer, _callback);
        }

        private AuthorizationServer buildBodyParams() {
            AuthorizationServer authorizationServer = new AuthorizationServer();
            authorizationServer.description(this.description);
            authorizationServer.links(this.links);
            authorizationServer.audiences(this.audiences);
            authorizationServer.created(this.created);
            authorizationServer.credentials(this.credentials);
            authorizationServer._default(this._default);
            authorizationServer.id(this.id);
            authorizationServer.issuer(this.issuer);
            if (this.issuerMode != null)
            authorizationServer.issuerMode(AuthorizationServer.IssuerModeEnum.fromValue(this.issuerMode));
            authorizationServer.lastUpdated(this.lastUpdated);
            authorizationServer.name(this.name);
            if (this.status != null)
            authorizationServer.status(AuthorizationServer.StatusEnum.fromValue(this.status));
            return authorizationServer;
        }

        /**
         * Execute createNewServer request
         * @return AuthorizationServer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServer execute() throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            ApiResponse<AuthorizationServer> localVarResp = createNewServerWithHttpInfo(authorizationServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewServer request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServer> executeWithHttpInfo() throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            return createNewServerWithHttpInfo(authorizationServer);
        }

        /**
         * Execute createNewServer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServer> _callback) throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            return createNewServerAsync(authorizationServer, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authorizationServer  (required)
     * @return CreateNewServerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewServerRequestBuilder createNewServer() throws IllegalArgumentException {
        return new CreateNewServerRequestBuilder();
    }
    private okhttp3.Call createPolicyCall(String authServerId, AuthorizationServerPolicy authorizationServerPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationServerPolicy;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(String authServerId, AuthorizationServerPolicy authorizationServerPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling createPolicy(Async)");
        }

        // verify the required parameter 'authorizationServerPolicy' is set
        if (authorizationServerPolicy == null) {
            throw new ApiException("Missing the required parameter 'authorizationServerPolicy' when calling createPolicy(Async)");
        }

        return createPolicyCall(authServerId, authorizationServerPolicy, _callback);

    }


    private ApiResponse<AuthorizationServerPolicy> createPolicyWithHttpInfo(String authServerId, AuthorizationServerPolicy authorizationServerPolicy) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(authServerId, authorizationServerPolicy, null);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyAsync(String authServerId, AuthorizationServerPolicy authorizationServerPolicy, final ApiCallback<AuthorizationServerPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(authServerId, authorizationServerPolicy, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePolicyRequestBuilder {
        private final String authServerId;
        private String description;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private PolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private PolicyType type;

        private CreatePolicyRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set embedded
         * @param embedded  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder conditions(PolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder type(PolicyType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            return createPolicyCall(authServerId, authorizationServerPolicy, _callback);
        }

        private AuthorizationServerPolicy buildBodyParams() {
            AuthorizationServerPolicy authorizationServerPolicy = new AuthorizationServerPolicy();
            authorizationServerPolicy.description(this.description);
            authorizationServerPolicy.embedded(this.embedded);
            authorizationServerPolicy.links(this.links);
            authorizationServerPolicy.conditions(this.conditions);
            authorizationServerPolicy.created(this.created);
            authorizationServerPolicy.id(this.id);
            authorizationServerPolicy.lastUpdated(this.lastUpdated);
            authorizationServerPolicy.name(this.name);
            authorizationServerPolicy.priority(this.priority);
            if (this.status != null)
            authorizationServerPolicy.status(AuthorizationServerPolicy.StatusEnum.fromValue(this.status));
            authorizationServerPolicy.system(this.system);
            authorizationServerPolicy.type(this.type);
            return authorizationServerPolicy;
        }

        /**
         * Execute createPolicy request
         * @return AuthorizationServerPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServerPolicy execute() throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            ApiResponse<AuthorizationServerPolicy> localVarResp = createPolicyWithHttpInfo(authServerId, authorizationServerPolicy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPolicy request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServerPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServerPolicy> executeWithHttpInfo() throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            return createPolicyWithHttpInfo(authServerId, authorizationServerPolicy);
        }

        /**
         * Execute createPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServerPolicy> _callback) throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            return createPolicyAsync(authServerId, authorizationServerPolicy, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param authorizationServerPolicy  (required)
     * @return CreatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyRequestBuilder createPolicy(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new CreatePolicyRequestBuilder(authServerId);
    }
    private okhttp3.Call createPolicyRuleCall(String authServerId, String policyId, AuthorizationServerPolicyRule authorizationServerPolicyRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationServerPolicyRule;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyRuleValidateBeforeCall(String authServerId, String policyId, AuthorizationServerPolicyRule authorizationServerPolicyRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling createPolicyRule(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling createPolicyRule(Async)");
        }

        // verify the required parameter 'authorizationServerPolicyRule' is set
        if (authorizationServerPolicyRule == null) {
            throw new ApiException("Missing the required parameter 'authorizationServerPolicyRule' when calling createPolicyRule(Async)");
        }

        return createPolicyRuleCall(authServerId, policyId, authorizationServerPolicyRule, _callback);

    }


    private ApiResponse<AuthorizationServerPolicyRule> createPolicyRuleWithHttpInfo(String authServerId, String policyId, AuthorizationServerPolicyRule authorizationServerPolicyRule) throws ApiException {
        okhttp3.Call localVarCall = createPolicyRuleValidateBeforeCall(authServerId, policyId, authorizationServerPolicyRule, null);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicyRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyRuleAsync(String authServerId, String policyId, AuthorizationServerPolicyRule authorizationServerPolicyRule, final ApiCallback<AuthorizationServerPolicyRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyRuleValidateBeforeCall(authServerId, policyId, authorizationServerPolicyRule, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicyRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePolicyRuleRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private AuthorizationServerPolicyRuleActions actions;
        private AuthorizationServerPolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private String type;

        private CreatePolicyRuleRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Set actions
         * @param actions  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder actions(AuthorizationServerPolicyRuleActions actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder conditions(AuthorizationServerPolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional, default to ACTIVE)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional, default to false)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreatePolicyRuleRequestBuilder
         */
        public CreatePolicyRuleRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createPolicyRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            return createPolicyRuleCall(authServerId, policyId, authorizationServerPolicyRule, _callback);
        }

        private AuthorizationServerPolicyRule buildBodyParams() {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = new AuthorizationServerPolicyRule();
            authorizationServerPolicyRule.actions(this.actions);
            authorizationServerPolicyRule.conditions(this.conditions);
            authorizationServerPolicyRule.created(this.created);
            authorizationServerPolicyRule.id(this.id);
            authorizationServerPolicyRule.lastUpdated(this.lastUpdated);
            authorizationServerPolicyRule.name(this.name);
            authorizationServerPolicyRule.priority(this.priority);
            if (this.status != null)
            authorizationServerPolicyRule.status(AuthorizationServerPolicyRule.StatusEnum.fromValue(this.status));
            authorizationServerPolicyRule.system(this.system);
            if (this.type != null)
            authorizationServerPolicyRule.type(AuthorizationServerPolicyRule.TypeEnum.fromValue(this.type));
            return authorizationServerPolicyRule;
        }

        /**
         * Execute createPolicyRule request
         * @return AuthorizationServerPolicyRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServerPolicyRule execute() throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            ApiResponse<AuthorizationServerPolicyRule> localVarResp = createPolicyRuleWithHttpInfo(authServerId, policyId, authorizationServerPolicyRule);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPolicyRule request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServerPolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServerPolicyRule> executeWithHttpInfo() throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            return createPolicyRuleWithHttpInfo(authServerId, policyId, authorizationServerPolicyRule);
        }

        /**
         * Execute createPolicyRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServerPolicyRule> _callback) throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            return createPolicyRuleAsync(authServerId, policyId, authorizationServerPolicyRule, _callback);
        }
    }

    /**
     * 
     * Creates a policy rule for the specified Custom Authorization Server and Policy.
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param authorizationServerPolicyRule  (required)
     * @return CreatePolicyRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyRuleRequestBuilder createPolicyRule(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new CreatePolicyRuleRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call createScopeCall(String authServerId, OAuth2Scope oauth2Scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2Scope;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/scopes"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScopeValidateBeforeCall(String authServerId, OAuth2Scope oauth2Scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling createScope(Async)");
        }

        // verify the required parameter 'oauth2Scope' is set
        if (oauth2Scope == null) {
            throw new ApiException("Missing the required parameter 'oauth2Scope' when calling createScope(Async)");
        }

        return createScopeCall(authServerId, oauth2Scope, _callback);

    }


    private ApiResponse<OAuth2Scope> createScopeWithHttpInfo(String authServerId, OAuth2Scope oauth2Scope) throws ApiException {
        okhttp3.Call localVarCall = createScopeValidateBeforeCall(authServerId, oauth2Scope, null);
        Type localVarReturnType = new TypeToken<OAuth2Scope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createScopeAsync(String authServerId, OAuth2Scope oauth2Scope, final ApiCallback<OAuth2Scope> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScopeValidateBeforeCall(authServerId, oauth2Scope, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Scope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateScopeRequestBuilder {
        private final String authServerId;
        private String description;
        private String consent;
        private Boolean _default;
        private String displayName;
        private String id;
        private String metadataPublish;
        private String name;
        private Boolean system;

        private CreateScopeRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set consent
         * @param consent  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder consent(String consent) {
            this.consent = consent;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set metadataPublish
         * @param metadataPublish  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder metadataPublish(String metadataPublish) {
            this.metadataPublish = metadataPublish;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return CreateScopeRequestBuilder
         */
        public CreateScopeRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Build call for createScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            return createScopeCall(authServerId, oauth2Scope, _callback);
        }

        private OAuth2Scope buildBodyParams() {
            OAuth2Scope oauth2Scope = new OAuth2Scope();
            oauth2Scope.description(this.description);
            if (this.consent != null)
            oauth2Scope.consent(OAuth2Scope.ConsentEnum.fromValue(this.consent));
            oauth2Scope._default(this._default);
            oauth2Scope.displayName(this.displayName);
            oauth2Scope.id(this.id);
            if (this.metadataPublish != null)
            oauth2Scope.metadataPublish(OAuth2Scope.MetadataPublishEnum.fromValue(this.metadataPublish));
            oauth2Scope.name(this.name);
            oauth2Scope.system(this.system);
            return oauth2Scope;
        }

        /**
         * Execute createScope request
         * @return OAuth2Scope
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Scope execute() throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            ApiResponse<OAuth2Scope> localVarResp = createScopeWithHttpInfo(authServerId, oauth2Scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createScope request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Scope&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Scope> executeWithHttpInfo() throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            return createScopeWithHttpInfo(authServerId, oauth2Scope);
        }

        /**
         * Execute createScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Scope> _callback) throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            return createScopeAsync(authServerId, oauth2Scope, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param oauth2Scope  (required)
     * @return CreateScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateScopeRequestBuilder createScope(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new CreateScopeRequestBuilder(authServerId);
    }
    private okhttp3.Call deactivateLifecycleCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deactivateLifecycle(Async)");
        }

        return deactivateLifecycleCall(authServerId, _callback);

    }


    private ApiResponse<Void> deactivateLifecycleWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(authServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateLifecycleAsync(String authServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(authServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleRequestBuilder {
        private final String authServerId;

        private DeactivateLifecycleRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for deactivateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleCall(authServerId, _callback);
        }


        /**
         * Execute deactivateLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateLifecycleWithHttpInfo(authServerId);
        }

        /**
         * Execute deactivateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleWithHttpInfo(authServerId);
        }

        /**
         * Execute deactivateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateLifecycleAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return DeactivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleRequestBuilder deactivateLifecycle(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new DeactivateLifecycleRequestBuilder(authServerId);
    }
    private okhttp3.Call deactivatePolicyLifecycleCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivatePolicyLifecycleValidateBeforeCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deactivatePolicyLifecycle(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deactivatePolicyLifecycle(Async)");
        }

        return deactivatePolicyLifecycleCall(authServerId, policyId, _callback);

    }


    private ApiResponse<Void> deactivatePolicyLifecycleWithHttpInfo(String authServerId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = deactivatePolicyLifecycleValidateBeforeCall(authServerId, policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivatePolicyLifecycleAsync(String authServerId, String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivatePolicyLifecycleValidateBeforeCall(authServerId, policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivatePolicyLifecycleRequestBuilder {
        private final String authServerId;
        private final String policyId;

        private DeactivatePolicyLifecycleRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Build call for deactivatePolicyLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivatePolicyLifecycleCall(authServerId, policyId, _callback);
        }


        /**
         * Execute deactivatePolicyLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivatePolicyLifecycleWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute deactivatePolicyLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivatePolicyLifecycleWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute deactivatePolicyLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivatePolicyLifecycleAsync(authServerId, policyId, _callback);
        }
    }

    /**
     * 
     * Deactivate Authorization Server Policy
     * @param authServerId  (required)
     * @param policyId  (required)
     * @return DeactivatePolicyLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivatePolicyLifecycleRequestBuilder deactivatePolicyLifecycle(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new DeactivatePolicyLifecycleRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call deactivatePolicyRuleCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivatePolicyRuleValidateBeforeCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deactivatePolicyRule(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deactivatePolicyRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deactivatePolicyRule(Async)");
        }

        return deactivatePolicyRuleCall(authServerId, policyId, ruleId, _callback);

    }


    private ApiResponse<Void> deactivatePolicyRuleWithHttpInfo(String authServerId, String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = deactivatePolicyRuleValidateBeforeCall(authServerId, policyId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivatePolicyRuleAsync(String authServerId, String policyId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivatePolicyRuleValidateBeforeCall(authServerId, policyId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivatePolicyRuleRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private final String ruleId;

        private DeactivatePolicyRuleRequestBuilder(String authServerId, String policyId, String ruleId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for deactivatePolicyRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivatePolicyRuleCall(authServerId, policyId, ruleId, _callback);
        }


        /**
         * Execute deactivatePolicyRule request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivatePolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute deactivatePolicyRule request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivatePolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute deactivatePolicyRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivatePolicyRuleAsync(authServerId, policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Deactivate Authorization Server Policy Rule
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return DeactivatePolicyRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivatePolicyRuleRequestBuilder deactivatePolicyRule(String authServerId, String policyId, String ruleId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new DeactivatePolicyRuleRequestBuilder(authServerId, policyId, ruleId);
    }
    private okhttp3.Call deleteAuthTokenCall(String authServerId, String clientId, String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthTokenValidateBeforeCall(String authServerId, String clientId, String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deleteAuthToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteAuthToken(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling deleteAuthToken(Async)");
        }

        return deleteAuthTokenCall(authServerId, clientId, tokenId, _callback);

    }


    private ApiResponse<Void> deleteAuthTokenWithHttpInfo(String authServerId, String clientId, String tokenId) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthTokenValidateBeforeCall(authServerId, clientId, tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAuthTokenAsync(String authServerId, String clientId, String tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthTokenValidateBeforeCall(authServerId, clientId, tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAuthTokenRequestBuilder {
        private final String authServerId;
        private final String clientId;
        private final String tokenId;

        private DeleteAuthTokenRequestBuilder(String authServerId, String clientId, String tokenId) {
            this.authServerId = authServerId;
            this.clientId = clientId;
            this.tokenId = tokenId;
        }

        /**
         * Build call for deleteAuthToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAuthTokenCall(authServerId, clientId, tokenId, _callback);
        }


        /**
         * Execute deleteAuthToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAuthTokenWithHttpInfo(authServerId, clientId, tokenId);
        }

        /**
         * Execute deleteAuthToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAuthTokenWithHttpInfo(authServerId, clientId, tokenId);
        }

        /**
         * Execute deleteAuthToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAuthTokenAsync(authServerId, clientId, tokenId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param clientId  (required)
     * @param tokenId  (required)
     * @return DeleteAuthTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAuthTokenRequestBuilder deleteAuthToken(String authServerId, String clientId, String tokenId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (tokenId == null) throw new IllegalArgumentException("\"tokenId\" is required but got null");
            

        return new DeleteAuthTokenRequestBuilder(authServerId, clientId, tokenId);
    }
    private okhttp3.Call deleteClaimCall(String authServerId, String claimId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/claims/{claimId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "claimId" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClaimValidateBeforeCall(String authServerId, String claimId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deleteClaim(Async)");
        }

        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling deleteClaim(Async)");
        }

        return deleteClaimCall(authServerId, claimId, _callback);

    }


    private ApiResponse<Void> deleteClaimWithHttpInfo(String authServerId, String claimId) throws ApiException {
        okhttp3.Call localVarCall = deleteClaimValidateBeforeCall(authServerId, claimId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteClaimAsync(String authServerId, String claimId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClaimValidateBeforeCall(authServerId, claimId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteClaimRequestBuilder {
        private final String authServerId;
        private final String claimId;

        private DeleteClaimRequestBuilder(String authServerId, String claimId) {
            this.authServerId = authServerId;
            this.claimId = claimId;
        }

        /**
         * Build call for deleteClaim
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteClaimCall(authServerId, claimId, _callback);
        }


        /**
         * Execute deleteClaim request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteClaimWithHttpInfo(authServerId, claimId);
        }

        /**
         * Execute deleteClaim request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteClaimWithHttpInfo(authServerId, claimId);
        }

        /**
         * Execute deleteClaim request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteClaimAsync(authServerId, claimId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param claimId  (required)
     * @return DeleteClaimRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteClaimRequestBuilder deleteClaim(String authServerId, String claimId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (claimId == null) throw new IllegalArgumentException("\"claimId\" is required but got null");
            

        return new DeleteClaimRequestBuilder(authServerId, claimId);
    }
    private okhttp3.Call deleteClientTokenCall(String authServerId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClientTokenValidateBeforeCall(String authServerId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deleteClientToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClientToken(Async)");
        }

        return deleteClientTokenCall(authServerId, clientId, _callback);

    }


    private ApiResponse<Void> deleteClientTokenWithHttpInfo(String authServerId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteClientTokenValidateBeforeCall(authServerId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteClientTokenAsync(String authServerId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClientTokenValidateBeforeCall(authServerId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteClientTokenRequestBuilder {
        private final String authServerId;
        private final String clientId;

        private DeleteClientTokenRequestBuilder(String authServerId, String clientId) {
            this.authServerId = authServerId;
            this.clientId = clientId;
        }

        /**
         * Build call for deleteClientToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteClientTokenCall(authServerId, clientId, _callback);
        }


        /**
         * Execute deleteClientToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteClientTokenWithHttpInfo(authServerId, clientId);
        }

        /**
         * Execute deleteClientToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteClientTokenWithHttpInfo(authServerId, clientId);
        }

        /**
         * Execute deleteClientToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteClientTokenAsync(authServerId, clientId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param clientId  (required)
     * @return DeleteClientTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteClientTokenRequestBuilder deleteClientToken(String authServerId, String clientId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new DeleteClientTokenRequestBuilder(authServerId, clientId);
    }
    private okhttp3.Call deletePolicyByIdCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyByIdValidateBeforeCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deletePolicyById(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deletePolicyById(Async)");
        }

        return deletePolicyByIdCall(authServerId, policyId, _callback);

    }


    private ApiResponse<Void> deletePolicyByIdWithHttpInfo(String authServerId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyByIdValidateBeforeCall(authServerId, policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyByIdAsync(String authServerId, String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyByIdValidateBeforeCall(authServerId, policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePolicyByIdRequestBuilder {
        private final String authServerId;
        private final String policyId;

        private DeletePolicyByIdRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Build call for deletePolicyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyByIdCall(authServerId, policyId, _callback);
        }


        /**
         * Execute deletePolicyById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyByIdWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute deletePolicyById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyByIdWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute deletePolicyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyByIdAsync(authServerId, policyId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param policyId  (required)
     * @return DeletePolicyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeletePolicyByIdRequestBuilder deletePolicyById(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new DeletePolicyByIdRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call deletePolicyRuleCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyRuleValidateBeforeCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deletePolicyRule(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deletePolicyRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deletePolicyRule(Async)");
        }

        return deletePolicyRuleCall(authServerId, policyId, ruleId, _callback);

    }


    private ApiResponse<Void> deletePolicyRuleWithHttpInfo(String authServerId, String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyRuleValidateBeforeCall(authServerId, policyId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyRuleAsync(String authServerId, String policyId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyRuleValidateBeforeCall(authServerId, policyId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePolicyRuleRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private final String ruleId;

        private DeletePolicyRuleRequestBuilder(String authServerId, String policyId, String ruleId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for deletePolicyRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyRuleCall(authServerId, policyId, ruleId, _callback);
        }


        /**
         * Execute deletePolicyRule request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute deletePolicyRule request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute deletePolicyRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyRuleAsync(authServerId, policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return DeletePolicyRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeletePolicyRuleRequestBuilder deletePolicyRule(String authServerId, String policyId, String ruleId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new DeletePolicyRuleRequestBuilder(authServerId, policyId, ruleId);
    }
    private okhttp3.Call deleteScopeCall(String authServerId, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScopeValidateBeforeCall(String authServerId, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deleteScope(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling deleteScope(Async)");
        }

        return deleteScopeCall(authServerId, scopeId, _callback);

    }


    private ApiResponse<Void> deleteScopeWithHttpInfo(String authServerId, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = deleteScopeValidateBeforeCall(authServerId, scopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteScopeAsync(String authServerId, String scopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScopeValidateBeforeCall(authServerId, scopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteScopeRequestBuilder {
        private final String authServerId;
        private final String scopeId;

        private DeleteScopeRequestBuilder(String authServerId, String scopeId) {
            this.authServerId = authServerId;
            this.scopeId = scopeId;
        }

        /**
         * Build call for deleteScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteScopeCall(authServerId, scopeId, _callback);
        }


        /**
         * Execute deleteScope request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteScopeWithHttpInfo(authServerId, scopeId);
        }

        /**
         * Execute deleteScope request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteScopeWithHttpInfo(authServerId, scopeId);
        }

        /**
         * Execute deleteScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteScopeAsync(authServerId, scopeId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param scopeId  (required)
     * @return DeleteScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteScopeRequestBuilder deleteScope(String authServerId, String scopeId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (scopeId == null) throw new IllegalArgumentException("\"scopeId\" is required but got null");
            

        return new DeleteScopeRequestBuilder(authServerId, scopeId);
    }
    private okhttp3.Call deleteSuccessCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSuccessValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling deleteSuccess(Async)");
        }

        return deleteSuccessCall(authServerId, _callback);

    }


    private ApiResponse<Void> deleteSuccessWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = deleteSuccessValidateBeforeCall(authServerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSuccessAsync(String authServerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSuccessValidateBeforeCall(authServerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSuccessRequestBuilder {
        private final String authServerId;

        private DeleteSuccessRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for deleteSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSuccessCall(authServerId, _callback);
        }


        /**
         * Execute deleteSuccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSuccessWithHttpInfo(authServerId);
        }

        /**
         * Execute deleteSuccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSuccessWithHttpInfo(authServerId);
        }

        /**
         * Execute deleteSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSuccessAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return DeleteSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSuccessRequestBuilder deleteSuccess(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new DeleteSuccessRequestBuilder(authServerId);
    }
    private okhttp3.Call enumeratePolicyRulesCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumeratePolicyRulesValidateBeforeCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling enumeratePolicyRules(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling enumeratePolicyRules(Async)");
        }

        return enumeratePolicyRulesCall(authServerId, policyId, _callback);

    }


    private ApiResponse<List<AuthorizationServerPolicyRule>> enumeratePolicyRulesWithHttpInfo(String authServerId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = enumeratePolicyRulesValidateBeforeCall(authServerId, policyId, null);
        Type localVarReturnType = new TypeToken<List<AuthorizationServerPolicyRule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumeratePolicyRulesAsync(String authServerId, String policyId, final ApiCallback<List<AuthorizationServerPolicyRule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumeratePolicyRulesValidateBeforeCall(authServerId, policyId, _callback);
        Type localVarReturnType = new TypeToken<List<AuthorizationServerPolicyRule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumeratePolicyRulesRequestBuilder {
        private final String authServerId;
        private final String policyId;

        private EnumeratePolicyRulesRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Build call for enumeratePolicyRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumeratePolicyRulesCall(authServerId, policyId, _callback);
        }


        /**
         * Execute enumeratePolicyRules request
         * @return List&lt;AuthorizationServerPolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<AuthorizationServerPolicyRule> execute() throws ApiException {
            ApiResponse<List<AuthorizationServerPolicyRule>> localVarResp = enumeratePolicyRulesWithHttpInfo(authServerId, policyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumeratePolicyRules request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AuthorizationServerPolicyRule&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AuthorizationServerPolicyRule>> executeWithHttpInfo() throws ApiException {
            return enumeratePolicyRulesWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute enumeratePolicyRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AuthorizationServerPolicyRule>> _callback) throws ApiException {
            return enumeratePolicyRulesAsync(authServerId, policyId, _callback);
        }
    }

    /**
     * 
     * Enumerates all policy rules for the specified Custom Authorization Server and Policy.
     * @param authServerId  (required)
     * @param policyId  (required)
     * @return EnumeratePolicyRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumeratePolicyRulesRequestBuilder enumeratePolicyRules(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new EnumeratePolicyRulesRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call getByIdCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getById(Async)");
        }

        return getByIdCall(authServerId, _callback);

    }


    private ApiResponse<AuthorizationServer> getByIdWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(authServerId, null);
        Type localVarReturnType = new TypeToken<AuthorizationServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String authServerId, final ApiCallback<AuthorizationServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(authServerId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String authServerId;

        private GetByIdRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(authServerId, _callback);
        }


        /**
         * Execute getById request
         * @return AuthorizationServer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServer execute() throws ApiException {
            ApiResponse<AuthorizationServer> localVarResp = getByIdWithHttpInfo(authServerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(authServerId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServer> _callback) throws ApiException {
            return getByIdAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new GetByIdRequestBuilder(authServerId);
    }
    private okhttp3.Call getClaimsCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/claims"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClaimsValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getClaims(Async)");
        }

        return getClaimsCall(authServerId, _callback);

    }


    private ApiResponse<List<OAuth2Claim>> getClaimsWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = getClaimsValidateBeforeCall(authServerId, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Claim>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClaimsAsync(String authServerId, final ApiCallback<List<OAuth2Claim>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClaimsValidateBeforeCall(authServerId, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Claim>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClaimsRequestBuilder {
        private final String authServerId;

        private GetClaimsRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for getClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClaimsCall(authServerId, _callback);
        }


        /**
         * Execute getClaims request
         * @return List&lt;OAuth2Claim&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2Claim> execute() throws ApiException {
            ApiResponse<List<OAuth2Claim>> localVarResp = getClaimsWithHttpInfo(authServerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClaims request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2Claim&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2Claim>> executeWithHttpInfo() throws ApiException {
            return getClaimsWithHttpInfo(authServerId);
        }

        /**
         * Execute getClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2Claim>> _callback) throws ApiException {
            return getClaimsAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return GetClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClaimsRequestBuilder getClaims(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new GetClaimsRequestBuilder(authServerId);
    }
    private okhttp3.Call getClaims_0Call(String authServerId, String claimId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/claims/{claimId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "claimId" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClaims_0ValidateBeforeCall(String authServerId, String claimId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getClaims_0(Async)");
        }

        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling getClaims_0(Async)");
        }

        return getClaims_0Call(authServerId, claimId, _callback);

    }


    private ApiResponse<OAuth2Claim> getClaims_0WithHttpInfo(String authServerId, String claimId) throws ApiException {
        okhttp3.Call localVarCall = getClaims_0ValidateBeforeCall(authServerId, claimId, null);
        Type localVarReturnType = new TypeToken<OAuth2Claim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClaims_0Async(String authServerId, String claimId, final ApiCallback<OAuth2Claim> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClaims_0ValidateBeforeCall(authServerId, claimId, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Claim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClaims0RequestBuilder {
        private final String authServerId;
        private final String claimId;

        private GetClaims0RequestBuilder(String authServerId, String claimId) {
            this.authServerId = authServerId;
            this.claimId = claimId;
        }

        /**
         * Build call for getClaims_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClaims_0Call(authServerId, claimId, _callback);
        }


        /**
         * Execute getClaims_0 request
         * @return OAuth2Claim
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Claim execute() throws ApiException {
            ApiResponse<OAuth2Claim> localVarResp = getClaims_0WithHttpInfo(authServerId, claimId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClaims_0 request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Claim&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Claim> executeWithHttpInfo() throws ApiException {
            return getClaims_0WithHttpInfo(authServerId, claimId);
        }

        /**
         * Execute getClaims_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Claim> _callback) throws ApiException {
            return getClaims_0Async(authServerId, claimId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param claimId  (required)
     * @return GetClaims0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClaims0RequestBuilder getClaims_0(String authServerId, String claimId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (claimId == null) throw new IllegalArgumentException("\"claimId\" is required but got null");
            

        return new GetClaims0RequestBuilder(authServerId, claimId);
    }
    private okhttp3.Call getClientAuthTokenCall(String authServerId, String clientId, String tokenId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientAuthTokenValidateBeforeCall(String authServerId, String clientId, String tokenId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getClientAuthToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientAuthToken(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getClientAuthToken(Async)");
        }

        return getClientAuthTokenCall(authServerId, clientId, tokenId, expand, _callback);

    }


    private ApiResponse<OAuth2RefreshToken> getClientAuthTokenWithHttpInfo(String authServerId, String clientId, String tokenId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getClientAuthTokenValidateBeforeCall(authServerId, clientId, tokenId, expand, null);
        Type localVarReturnType = new TypeToken<OAuth2RefreshToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientAuthTokenAsync(String authServerId, String clientId, String tokenId, String expand, final ApiCallback<OAuth2RefreshToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientAuthTokenValidateBeforeCall(authServerId, clientId, tokenId, expand, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RefreshToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientAuthTokenRequestBuilder {
        private final String authServerId;
        private final String clientId;
        private final String tokenId;
        private String expand;

        private GetClientAuthTokenRequestBuilder(String authServerId, String clientId, String tokenId) {
            this.authServerId = authServerId;
            this.clientId = clientId;
            this.tokenId = tokenId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetClientAuthTokenRequestBuilder
         */
        public GetClientAuthTokenRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getClientAuthToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientAuthTokenCall(authServerId, clientId, tokenId, expand, _callback);
        }


        /**
         * Execute getClientAuthToken request
         * @return OAuth2RefreshToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2RefreshToken execute() throws ApiException {
            ApiResponse<OAuth2RefreshToken> localVarResp = getClientAuthTokenWithHttpInfo(authServerId, clientId, tokenId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientAuthToken request with HTTP info returned
         * @return ApiResponse&lt;OAuth2RefreshToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2RefreshToken> executeWithHttpInfo() throws ApiException {
            return getClientAuthTokenWithHttpInfo(authServerId, clientId, tokenId, expand);
        }

        /**
         * Execute getClientAuthToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2RefreshToken> _callback) throws ApiException {
            return getClientAuthTokenAsync(authServerId, clientId, tokenId, expand, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param clientId  (required)
     * @param tokenId  (required)
     * @return GetClientAuthTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClientAuthTokenRequestBuilder getClientAuthToken(String authServerId, String clientId, String tokenId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (tokenId == null) throw new IllegalArgumentException("\"tokenId\" is required but got null");
            

        return new GetClientAuthTokenRequestBuilder(authServerId, clientId, tokenId);
    }
    private okhttp3.Call getClientTokensCall(String authServerId, String clientId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientTokensValidateBeforeCall(String authServerId, String clientId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getClientTokens(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientTokens(Async)");
        }

        return getClientTokensCall(authServerId, clientId, expand, after, limit, _callback);

    }


    private ApiResponse<List<OAuth2RefreshToken>> getClientTokensWithHttpInfo(String authServerId, String clientId, String expand, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getClientTokensValidateBeforeCall(authServerId, clientId, expand, after, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2RefreshToken>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientTokensAsync(String authServerId, String clientId, String expand, String after, Integer limit, final ApiCallback<List<OAuth2RefreshToken>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientTokensValidateBeforeCall(authServerId, clientId, expand, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2RefreshToken>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientTokensRequestBuilder {
        private final String authServerId;
        private final String clientId;
        private String expand;
        private String after;
        private Integer limit;

        private GetClientTokensRequestBuilder(String authServerId, String clientId) {
            this.authServerId = authServerId;
            this.clientId = clientId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetClientTokensRequestBuilder
         */
        public GetClientTokensRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return GetClientTokensRequestBuilder
         */
        public GetClientTokensRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to -1)
         * @return GetClientTokensRequestBuilder
         */
        public GetClientTokensRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getClientTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientTokensCall(authServerId, clientId, expand, after, limit, _callback);
        }


        /**
         * Execute getClientTokens request
         * @return List&lt;OAuth2RefreshToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2RefreshToken> execute() throws ApiException {
            ApiResponse<List<OAuth2RefreshToken>> localVarResp = getClientTokensWithHttpInfo(authServerId, clientId, expand, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientTokens request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2RefreshToken&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2RefreshToken>> executeWithHttpInfo() throws ApiException {
            return getClientTokensWithHttpInfo(authServerId, clientId, expand, after, limit);
        }

        /**
         * Execute getClientTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2RefreshToken>> _callback) throws ApiException {
            return getClientTokensAsync(authServerId, clientId, expand, after, limit, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param clientId  (required)
     * @return GetClientTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClientTokensRequestBuilder getClientTokens(String authServerId, String clientId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new GetClientTokensRequestBuilder(authServerId, clientId);
    }
    private okhttp3.Call getPoliciesCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliciesValidateBeforeCall(String authServerId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getPolicies(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getPolicies(Async)");
        }

        return getPoliciesCall(authServerId, policyId, _callback);

    }


    private ApiResponse<AuthorizationServerPolicy> getPoliciesWithHttpInfo(String authServerId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = getPoliciesValidateBeforeCall(authServerId, policyId, null);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPoliciesAsync(String authServerId, String policyId, final ApiCallback<AuthorizationServerPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliciesValidateBeforeCall(authServerId, policyId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPoliciesRequestBuilder {
        private final String authServerId;
        private final String policyId;

        private GetPoliciesRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Build call for getPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPoliciesCall(authServerId, policyId, _callback);
        }


        /**
         * Execute getPolicies request
         * @return AuthorizationServerPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServerPolicy execute() throws ApiException {
            ApiResponse<AuthorizationServerPolicy> localVarResp = getPoliciesWithHttpInfo(authServerId, policyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicies request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServerPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServerPolicy> executeWithHttpInfo() throws ApiException {
            return getPoliciesWithHttpInfo(authServerId, policyId);
        }

        /**
         * Execute getPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServerPolicy> _callback) throws ApiException {
            return getPoliciesAsync(authServerId, policyId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param policyId  (required)
     * @return GetPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPoliciesRequestBuilder getPolicies(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new GetPoliciesRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call getPoliciesSuccessCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliciesSuccessValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getPoliciesSuccess(Async)");
        }

        return getPoliciesSuccessCall(authServerId, _callback);

    }


    private ApiResponse<List<AuthorizationServerPolicy>> getPoliciesSuccessWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = getPoliciesSuccessValidateBeforeCall(authServerId, null);
        Type localVarReturnType = new TypeToken<List<AuthorizationServerPolicy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPoliciesSuccessAsync(String authServerId, final ApiCallback<List<AuthorizationServerPolicy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliciesSuccessValidateBeforeCall(authServerId, _callback);
        Type localVarReturnType = new TypeToken<List<AuthorizationServerPolicy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPoliciesSuccessRequestBuilder {
        private final String authServerId;

        private GetPoliciesSuccessRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for getPoliciesSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPoliciesSuccessCall(authServerId, _callback);
        }


        /**
         * Execute getPoliciesSuccess request
         * @return List&lt;AuthorizationServerPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<AuthorizationServerPolicy> execute() throws ApiException {
            ApiResponse<List<AuthorizationServerPolicy>> localVarResp = getPoliciesSuccessWithHttpInfo(authServerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPoliciesSuccess request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AuthorizationServerPolicy&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AuthorizationServerPolicy>> executeWithHttpInfo() throws ApiException {
            return getPoliciesSuccessWithHttpInfo(authServerId);
        }

        /**
         * Execute getPoliciesSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AuthorizationServerPolicy>> _callback) throws ApiException {
            return getPoliciesSuccessAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return GetPoliciesSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPoliciesSuccessRequestBuilder getPoliciesSuccess(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new GetPoliciesSuccessRequestBuilder(authServerId);
    }
    private okhttp3.Call getPolicyRuleByIdCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyRuleByIdValidateBeforeCall(String authServerId, String policyId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getPolicyRuleById(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getPolicyRuleById(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getPolicyRuleById(Async)");
        }

        return getPolicyRuleByIdCall(authServerId, policyId, ruleId, _callback);

    }


    private ApiResponse<AuthorizationServerPolicyRule> getPolicyRuleByIdWithHttpInfo(String authServerId, String policyId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = getPolicyRuleByIdValidateBeforeCall(authServerId, policyId, ruleId, null);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicyRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyRuleByIdAsync(String authServerId, String policyId, String ruleId, final ApiCallback<AuthorizationServerPolicyRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyRuleByIdValidateBeforeCall(authServerId, policyId, ruleId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicyRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyRuleByIdRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private final String ruleId;

        private GetPolicyRuleByIdRequestBuilder(String authServerId, String policyId, String ruleId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Build call for getPolicyRuleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyRuleByIdCall(authServerId, policyId, ruleId, _callback);
        }


        /**
         * Execute getPolicyRuleById request
         * @return AuthorizationServerPolicyRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServerPolicyRule execute() throws ApiException {
            ApiResponse<AuthorizationServerPolicyRule> localVarResp = getPolicyRuleByIdWithHttpInfo(authServerId, policyId, ruleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyRuleById request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServerPolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServerPolicyRule> executeWithHttpInfo() throws ApiException {
            return getPolicyRuleByIdWithHttpInfo(authServerId, policyId, ruleId);
        }

        /**
         * Execute getPolicyRuleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServerPolicyRule> _callback) throws ApiException {
            return getPolicyRuleByIdAsync(authServerId, policyId, ruleId, _callback);
        }
    }

    /**
     * 
     * Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param ruleId  (required)
     * @return GetPolicyRuleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyRuleByIdRequestBuilder getPolicyRuleById(String authServerId, String policyId, String ruleId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new GetPolicyRuleByIdRequestBuilder(authServerId, policyId, ruleId);
    }
    private okhttp3.Call getScopesCall(String authServerId, String q, String filter, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/scopes"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScopesValidateBeforeCall(String authServerId, String q, String filter, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getScopes(Async)");
        }

        return getScopesCall(authServerId, q, filter, cursor, limit, _callback);

    }


    private ApiResponse<List<OAuth2Scope>> getScopesWithHttpInfo(String authServerId, String q, String filter, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getScopesValidateBeforeCall(authServerId, q, filter, cursor, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Scope>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScopesAsync(String authServerId, String q, String filter, String cursor, Integer limit, final ApiCallback<List<OAuth2Scope>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScopesValidateBeforeCall(authServerId, q, filter, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Scope>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScopesRequestBuilder {
        private final String authServerId;
        private String q;
        private String filter;
        private String cursor;
        private Integer limit;

        private GetScopesRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Set q
         * @param q  (optional)
         * @return GetScopesRequestBuilder
         */
        public GetScopesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set filter
         * @param filter  (optional)
         * @return GetScopesRequestBuilder
         */
        public GetScopesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor  (optional)
         * @return GetScopesRequestBuilder
         */
        public GetScopesRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to -1)
         * @return GetScopesRequestBuilder
         */
        public GetScopesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getScopes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScopesCall(authServerId, q, filter, cursor, limit, _callback);
        }


        /**
         * Execute getScopes request
         * @return List&lt;OAuth2Scope&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2Scope> execute() throws ApiException {
            ApiResponse<List<OAuth2Scope>> localVarResp = getScopesWithHttpInfo(authServerId, q, filter, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScopes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2Scope&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2Scope>> executeWithHttpInfo() throws ApiException {
            return getScopesWithHttpInfo(authServerId, q, filter, cursor, limit);
        }

        /**
         * Execute getScopes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2Scope>> _callback) throws ApiException {
            return getScopesAsync(authServerId, q, filter, cursor, limit, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return GetScopesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetScopesRequestBuilder getScopes(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new GetScopesRequestBuilder(authServerId);
    }
    private okhttp3.Call getScopes_0Call(String authServerId, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScopes_0ValidateBeforeCall(String authServerId, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling getScopes_0(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling getScopes_0(Async)");
        }

        return getScopes_0Call(authServerId, scopeId, _callback);

    }


    private ApiResponse<OAuth2Scope> getScopes_0WithHttpInfo(String authServerId, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = getScopes_0ValidateBeforeCall(authServerId, scopeId, null);
        Type localVarReturnType = new TypeToken<OAuth2Scope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScopes_0Async(String authServerId, String scopeId, final ApiCallback<OAuth2Scope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScopes_0ValidateBeforeCall(authServerId, scopeId, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Scope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScopes0RequestBuilder {
        private final String authServerId;
        private final String scopeId;

        private GetScopes0RequestBuilder(String authServerId, String scopeId) {
            this.authServerId = authServerId;
            this.scopeId = scopeId;
        }

        /**
         * Build call for getScopes_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScopes_0Call(authServerId, scopeId, _callback);
        }


        /**
         * Execute getScopes_0 request
         * @return OAuth2Scope
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Scope execute() throws ApiException {
            ApiResponse<OAuth2Scope> localVarResp = getScopes_0WithHttpInfo(authServerId, scopeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScopes_0 request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Scope&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Scope> executeWithHttpInfo() throws ApiException {
            return getScopes_0WithHttpInfo(authServerId, scopeId);
        }

        /**
         * Execute getScopes_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Scope> _callback) throws ApiException {
            return getScopes_0Async(authServerId, scopeId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param scopeId  (required)
     * @return GetScopes0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetScopes0RequestBuilder getScopes_0(String authServerId, String scopeId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (scopeId == null) throw new IllegalArgumentException("\"scopeId\" is required but got null");
            

        return new GetScopes0RequestBuilder(authServerId, scopeId);
    }
    private okhttp3.Call listClientsCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/clients"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClientsValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling listClients(Async)");
        }

        return listClientsCall(authServerId, _callback);

    }


    private ApiResponse<List<OAuth2Client>> listClientsWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = listClientsValidateBeforeCall(authServerId, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listClientsAsync(String authServerId, final ApiCallback<List<OAuth2Client>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClientsValidateBeforeCall(authServerId, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListClientsRequestBuilder {
        private final String authServerId;

        private ListClientsRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for listClients
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listClientsCall(authServerId, _callback);
        }


        /**
         * Execute listClients request
         * @return List&lt;OAuth2Client&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2Client> execute() throws ApiException {
            ApiResponse<List<OAuth2Client>> localVarResp = listClientsWithHttpInfo(authServerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listClients request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2Client&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2Client>> executeWithHttpInfo() throws ApiException {
            return listClientsWithHttpInfo(authServerId);
        }

        /**
         * Execute listClients request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2Client>> _callback) throws ApiException {
            return listClientsAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return ListClientsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListClientsRequestBuilder listClients(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new ListClientsRequestBuilder(authServerId);
    }
    private okhttp3.Call listCredentialsKeysCall(String authServerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/credentials/keys"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCredentialsKeysValidateBeforeCall(String authServerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling listCredentialsKeys(Async)");
        }

        return listCredentialsKeysCall(authServerId, _callback);

    }


    private ApiResponse<List<JsonWebKey>> listCredentialsKeysWithHttpInfo(String authServerId) throws ApiException {
        okhttp3.Call localVarCall = listCredentialsKeysValidateBeforeCall(authServerId, null);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCredentialsKeysAsync(String authServerId, final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCredentialsKeysValidateBeforeCall(authServerId, _callback);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCredentialsKeysRequestBuilder {
        private final String authServerId;

        private ListCredentialsKeysRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Build call for listCredentialsKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCredentialsKeysCall(authServerId, _callback);
        }


        /**
         * Execute listCredentialsKeys request
         * @return List&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<JsonWebKey> execute() throws ApiException {
            ApiResponse<List<JsonWebKey>> localVarResp = listCredentialsKeysWithHttpInfo(authServerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCredentialsKeys request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JsonWebKey&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JsonWebKey>> executeWithHttpInfo() throws ApiException {
            return listCredentialsKeysWithHttpInfo(authServerId);
        }

        /**
         * Execute listCredentialsKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {
            return listCredentialsKeysAsync(authServerId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @return ListCredentialsKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCredentialsKeysRequestBuilder listCredentialsKeys(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new ListCredentialsKeysRequestBuilder(authServerId);
    }
    private okhttp3.Call listServersCall(String q, String limit, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServersValidateBeforeCall(String q, String limit, String after, final ApiCallback _callback) throws ApiException {
        return listServersCall(q, limit, after, _callback);

    }


    private ApiResponse<List<AuthorizationServer>> listServersWithHttpInfo(String q, String limit, String after) throws ApiException {
        okhttp3.Call localVarCall = listServersValidateBeforeCall(q, limit, after, null);
        Type localVarReturnType = new TypeToken<List<AuthorizationServer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listServersAsync(String q, String limit, String after, final ApiCallback<List<AuthorizationServer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServersValidateBeforeCall(q, limit, after, _callback);
        Type localVarReturnType = new TypeToken<List<AuthorizationServer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListServersRequestBuilder {
        private String q;
        private String limit;
        private String after;

        private ListServersRequestBuilder() {
        }

        /**
         * Set q
         * @param q  (optional)
         * @return ListServersRequestBuilder
         */
        public ListServersRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListServersRequestBuilder
         */
        public ListServersRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return ListServersRequestBuilder
         */
        public ListServersRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for listServers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listServersCall(q, limit, after, _callback);
        }


        /**
         * Execute listServers request
         * @return List&lt;AuthorizationServer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<AuthorizationServer> execute() throws ApiException {
            ApiResponse<List<AuthorizationServer>> localVarResp = listServersWithHttpInfo(q, limit, after);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listServers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AuthorizationServer&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AuthorizationServer>> executeWithHttpInfo() throws ApiException {
            return listServersWithHttpInfo(q, limit, after);
        }

        /**
         * Execute listServers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AuthorizationServer>> _callback) throws ApiException {
            return listServersAsync(q, limit, after, _callback);
        }
    }

    /**
     * 
     * Success
     * @return ListServersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListServersRequestBuilder listServers() throws IllegalArgumentException {
        return new ListServersRequestBuilder();
    }
    private okhttp3.Call rotateKeyLifecycleCall(String authServerId, JwkUse jwkUse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jwkUse;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateKeyLifecycleValidateBeforeCall(String authServerId, JwkUse jwkUse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling rotateKeyLifecycle(Async)");
        }

        // verify the required parameter 'jwkUse' is set
        if (jwkUse == null) {
            throw new ApiException("Missing the required parameter 'jwkUse' when calling rotateKeyLifecycle(Async)");
        }

        return rotateKeyLifecycleCall(authServerId, jwkUse, _callback);

    }


    private ApiResponse<List<JsonWebKey>> rotateKeyLifecycleWithHttpInfo(String authServerId, JwkUse jwkUse) throws ApiException {
        okhttp3.Call localVarCall = rotateKeyLifecycleValidateBeforeCall(authServerId, jwkUse, null);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rotateKeyLifecycleAsync(String authServerId, JwkUse jwkUse, final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateKeyLifecycleValidateBeforeCall(authServerId, jwkUse, _callback);
        Type localVarReturnType = new TypeToken<List<JsonWebKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RotateKeyLifecycleRequestBuilder {
        private final String authServerId;
        private String use;

        private RotateKeyLifecycleRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Set use
         * @param use  (optional)
         * @return RotateKeyLifecycleRequestBuilder
         */
        public RotateKeyLifecycleRequestBuilder use(String use) {
            this.use = use;
            return this;
        }
        
        /**
         * Build call for rotateKeyLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JwkUse jwkUse = buildBodyParams();
            return rotateKeyLifecycleCall(authServerId, jwkUse, _callback);
        }

        private JwkUse buildBodyParams() {
            JwkUse jwkUse = new JwkUse();
            if (this.use != null)
            jwkUse.use(JwkUse.UseEnum.fromValue(this.use));
            return jwkUse;
        }

        /**
         * Execute rotateKeyLifecycle request
         * @return List&lt;JsonWebKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<JsonWebKey> execute() throws ApiException {
            JwkUse jwkUse = buildBodyParams();
            ApiResponse<List<JsonWebKey>> localVarResp = rotateKeyLifecycleWithHttpInfo(authServerId, jwkUse);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rotateKeyLifecycle request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JsonWebKey&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JsonWebKey>> executeWithHttpInfo() throws ApiException {
            JwkUse jwkUse = buildBodyParams();
            return rotateKeyLifecycleWithHttpInfo(authServerId, jwkUse);
        }

        /**
         * Execute rotateKeyLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JsonWebKey>> _callback) throws ApiException {
            JwkUse jwkUse = buildBodyParams();
            return rotateKeyLifecycleAsync(authServerId, jwkUse, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param jwkUse  (required)
     * @return RotateKeyLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RotateKeyLifecycleRequestBuilder rotateKeyLifecycle(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new RotateKeyLifecycleRequestBuilder(authServerId);
    }
    private okhttp3.Call updateByIdCall(String authServerId, AuthorizationServer authorizationServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationServer;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String authServerId, AuthorizationServer authorizationServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling updateById(Async)");
        }

        // verify the required parameter 'authorizationServer' is set
        if (authorizationServer == null) {
            throw new ApiException("Missing the required parameter 'authorizationServer' when calling updateById(Async)");
        }

        return updateByIdCall(authServerId, authorizationServer, _callback);

    }


    private ApiResponse<AuthorizationServer> updateByIdWithHttpInfo(String authServerId, AuthorizationServer authorizationServer) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(authServerId, authorizationServer, null);
        Type localVarReturnType = new TypeToken<AuthorizationServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String authServerId, AuthorizationServer authorizationServer, final ApiCallback<AuthorizationServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(authServerId, authorizationServer, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String authServerId;
        private String description;
        private Map<String, Object> links;
        private List<String> audiences;
        private OffsetDateTime created;
        private AuthorizationServerCredentials credentials;
        private Boolean _default;
        private String id;
        private String issuer;
        private String issuerMode;
        private OffsetDateTime lastUpdated;
        private String name;
        private String status;

        private UpdateByIdRequestBuilder(String authServerId) {
            this.authServerId = authServerId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set audiences
         * @param audiences  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder audiences(List<String> audiences) {
            this.audiences = audiences;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder credentials(AuthorizationServerCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuer
         * @param issuer  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder issuer(String issuer) {
            this.issuer = issuer;
            return this;
        }
        
        /**
         * Set issuerMode
         * @param issuerMode  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder issuerMode(String issuerMode) {
            this.issuerMode = issuerMode;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            return updateByIdCall(authServerId, authorizationServer, _callback);
        }

        private AuthorizationServer buildBodyParams() {
            AuthorizationServer authorizationServer = new AuthorizationServer();
            authorizationServer.description(this.description);
            authorizationServer.links(this.links);
            authorizationServer.audiences(this.audiences);
            authorizationServer.created(this.created);
            authorizationServer.credentials(this.credentials);
            authorizationServer._default(this._default);
            authorizationServer.id(this.id);
            authorizationServer.issuer(this.issuer);
            if (this.issuerMode != null)
            authorizationServer.issuerMode(AuthorizationServer.IssuerModeEnum.fromValue(this.issuerMode));
            authorizationServer.lastUpdated(this.lastUpdated);
            authorizationServer.name(this.name);
            if (this.status != null)
            authorizationServer.status(AuthorizationServer.StatusEnum.fromValue(this.status));
            return authorizationServer;
        }

        /**
         * Execute updateById request
         * @return AuthorizationServer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServer execute() throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            ApiResponse<AuthorizationServer> localVarResp = updateByIdWithHttpInfo(authServerId, authorizationServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServer> executeWithHttpInfo() throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            return updateByIdWithHttpInfo(authServerId, authorizationServer);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServer> _callback) throws ApiException {
            AuthorizationServer authorizationServer = buildBodyParams();
            return updateByIdAsync(authServerId, authorizationServer, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param authorizationServer  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String authServerId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(authServerId);
    }
    private okhttp3.Call updateClaimSuccessCall(String authServerId, String claimId, OAuth2Claim oauth2Claim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2Claim;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/claims/{claimId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "claimId" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClaimSuccessValidateBeforeCall(String authServerId, String claimId, OAuth2Claim oauth2Claim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling updateClaimSuccess(Async)");
        }

        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling updateClaimSuccess(Async)");
        }

        // verify the required parameter 'oauth2Claim' is set
        if (oauth2Claim == null) {
            throw new ApiException("Missing the required parameter 'oauth2Claim' when calling updateClaimSuccess(Async)");
        }

        return updateClaimSuccessCall(authServerId, claimId, oauth2Claim, _callback);

    }


    private ApiResponse<OAuth2Claim> updateClaimSuccessWithHttpInfo(String authServerId, String claimId, OAuth2Claim oauth2Claim) throws ApiException {
        okhttp3.Call localVarCall = updateClaimSuccessValidateBeforeCall(authServerId, claimId, oauth2Claim, null);
        Type localVarReturnType = new TypeToken<OAuth2Claim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateClaimSuccessAsync(String authServerId, String claimId, OAuth2Claim oauth2Claim, final ApiCallback<OAuth2Claim> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClaimSuccessValidateBeforeCall(authServerId, claimId, oauth2Claim, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Claim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateClaimSuccessRequestBuilder {
        private final String authServerId;
        private final String claimId;
        private Map<String, Object> links;
        private Boolean alwaysIncludeInToken;
        private String claimType;
        private OAuth2ClaimConditions conditions;
        private String groupFilterType;
        private String id;
        private String name;
        private String status;
        private Boolean system;
        private String value;
        private String valueType;

        private UpdateClaimSuccessRequestBuilder(String authServerId, String claimId) {
            this.authServerId = authServerId;
            this.claimId = claimId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set alwaysIncludeInToken
         * @param alwaysIncludeInToken  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder alwaysIncludeInToken(Boolean alwaysIncludeInToken) {
            this.alwaysIncludeInToken = alwaysIncludeInToken;
            return this;
        }
        
        /**
         * Set claimType
         * @param claimType  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder claimType(String claimType) {
            this.claimType = claimType;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder conditions(OAuth2ClaimConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set groupFilterType
         * @param groupFilterType  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder groupFilterType(String groupFilterType) {
            this.groupFilterType = groupFilterType;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set value
         * @param value  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set valueType
         * @param valueType  (optional)
         * @return UpdateClaimSuccessRequestBuilder
         */
        public UpdateClaimSuccessRequestBuilder valueType(String valueType) {
            this.valueType = valueType;
            return this;
        }
        
        /**
         * Build call for updateClaimSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            return updateClaimSuccessCall(authServerId, claimId, oauth2Claim, _callback);
        }

        private OAuth2Claim buildBodyParams() {
            OAuth2Claim oauth2Claim = new OAuth2Claim();
            oauth2Claim.links(this.links);
            oauth2Claim.alwaysIncludeInToken(this.alwaysIncludeInToken);
            if (this.claimType != null)
            oauth2Claim.claimType(OAuth2Claim.ClaimTypeEnum.fromValue(this.claimType));
            oauth2Claim.conditions(this.conditions);
            if (this.groupFilterType != null)
            oauth2Claim.groupFilterType(OAuth2Claim.GroupFilterTypeEnum.fromValue(this.groupFilterType));
            oauth2Claim.id(this.id);
            oauth2Claim.name(this.name);
            if (this.status != null)
            oauth2Claim.status(OAuth2Claim.StatusEnum.fromValue(this.status));
            oauth2Claim.system(this.system);
            oauth2Claim.value(this.value);
            if (this.valueType != null)
            oauth2Claim.valueType(OAuth2Claim.ValueTypeEnum.fromValue(this.valueType));
            return oauth2Claim;
        }

        /**
         * Execute updateClaimSuccess request
         * @return OAuth2Claim
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Claim execute() throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            ApiResponse<OAuth2Claim> localVarResp = updateClaimSuccessWithHttpInfo(authServerId, claimId, oauth2Claim);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateClaimSuccess request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Claim&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Claim> executeWithHttpInfo() throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            return updateClaimSuccessWithHttpInfo(authServerId, claimId, oauth2Claim);
        }

        /**
         * Execute updateClaimSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Claim> _callback) throws ApiException {
            OAuth2Claim oauth2Claim = buildBodyParams();
            return updateClaimSuccessAsync(authServerId, claimId, oauth2Claim, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param claimId  (required)
     * @param oauth2Claim  (required)
     * @return UpdateClaimSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClaimSuccessRequestBuilder updateClaimSuccess(String authServerId, String claimId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (claimId == null) throw new IllegalArgumentException("\"claimId\" is required but got null");
            

        return new UpdateClaimSuccessRequestBuilder(authServerId, claimId);
    }
    private okhttp3.Call updatePolicyRuleConfigurationCall(String authServerId, String policyId, String ruleId, AuthorizationServerPolicyRule authorizationServerPolicyRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationServerPolicyRule;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyRuleConfigurationValidateBeforeCall(String authServerId, String policyId, String ruleId, AuthorizationServerPolicyRule authorizationServerPolicyRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling updatePolicyRuleConfiguration(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling updatePolicyRuleConfiguration(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updatePolicyRuleConfiguration(Async)");
        }

        // verify the required parameter 'authorizationServerPolicyRule' is set
        if (authorizationServerPolicyRule == null) {
            throw new ApiException("Missing the required parameter 'authorizationServerPolicyRule' when calling updatePolicyRuleConfiguration(Async)");
        }

        return updatePolicyRuleConfigurationCall(authServerId, policyId, ruleId, authorizationServerPolicyRule, _callback);

    }


    private ApiResponse<AuthorizationServerPolicyRule> updatePolicyRuleConfigurationWithHttpInfo(String authServerId, String policyId, String ruleId, AuthorizationServerPolicyRule authorizationServerPolicyRule) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyRuleConfigurationValidateBeforeCall(authServerId, policyId, ruleId, authorizationServerPolicyRule, null);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicyRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyRuleConfigurationAsync(String authServerId, String policyId, String ruleId, AuthorizationServerPolicyRule authorizationServerPolicyRule, final ApiCallback<AuthorizationServerPolicyRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyRuleConfigurationValidateBeforeCall(authServerId, policyId, ruleId, authorizationServerPolicyRule, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicyRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePolicyRuleConfigurationRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private final String ruleId;
        private AuthorizationServerPolicyRuleActions actions;
        private AuthorizationServerPolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private String type;

        private UpdatePolicyRuleConfigurationRequestBuilder(String authServerId, String policyId, String ruleId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
            this.ruleId = ruleId;
        }

        /**
         * Set actions
         * @param actions  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder actions(AuthorizationServerPolicyRuleActions actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder conditions(AuthorizationServerPolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional, default to ACTIVE)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional, default to false)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdatePolicyRuleConfigurationRequestBuilder
         */
        public UpdatePolicyRuleConfigurationRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updatePolicyRuleConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            return updatePolicyRuleConfigurationCall(authServerId, policyId, ruleId, authorizationServerPolicyRule, _callback);
        }

        private AuthorizationServerPolicyRule buildBodyParams() {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = new AuthorizationServerPolicyRule();
            authorizationServerPolicyRule.actions(this.actions);
            authorizationServerPolicyRule.conditions(this.conditions);
            authorizationServerPolicyRule.created(this.created);
            authorizationServerPolicyRule.id(this.id);
            authorizationServerPolicyRule.lastUpdated(this.lastUpdated);
            authorizationServerPolicyRule.name(this.name);
            authorizationServerPolicyRule.priority(this.priority);
            if (this.status != null)
            authorizationServerPolicyRule.status(AuthorizationServerPolicyRule.StatusEnum.fromValue(this.status));
            authorizationServerPolicyRule.system(this.system);
            if (this.type != null)
            authorizationServerPolicyRule.type(AuthorizationServerPolicyRule.TypeEnum.fromValue(this.type));
            return authorizationServerPolicyRule;
        }

        /**
         * Execute updatePolicyRuleConfiguration request
         * @return AuthorizationServerPolicyRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServerPolicyRule execute() throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            ApiResponse<AuthorizationServerPolicyRule> localVarResp = updatePolicyRuleConfigurationWithHttpInfo(authServerId, policyId, ruleId, authorizationServerPolicyRule);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePolicyRuleConfiguration request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServerPolicyRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServerPolicyRule> executeWithHttpInfo() throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            return updatePolicyRuleConfigurationWithHttpInfo(authServerId, policyId, ruleId, authorizationServerPolicyRule);
        }

        /**
         * Execute updatePolicyRuleConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServerPolicyRule> _callback) throws ApiException {
            AuthorizationServerPolicyRule authorizationServerPolicyRule = buildBodyParams();
            return updatePolicyRuleConfigurationAsync(authServerId, policyId, ruleId, authorizationServerPolicyRule, _callback);
        }
    }

    /**
     * 
     * Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param ruleId  (required)
     * @param authorizationServerPolicyRule  (required)
     * @return UpdatePolicyRuleConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicyRuleConfigurationRequestBuilder updatePolicyRuleConfiguration(String authServerId, String policyId, String ruleId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new UpdatePolicyRuleConfigurationRequestBuilder(authServerId, policyId, ruleId);
    }
    private okhttp3.Call updatePolicySuccessCall(String authServerId, String policyId, AuthorizationServerPolicy authorizationServerPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationServerPolicy;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicySuccessValidateBeforeCall(String authServerId, String policyId, AuthorizationServerPolicy authorizationServerPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling updatePolicySuccess(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling updatePolicySuccess(Async)");
        }

        // verify the required parameter 'authorizationServerPolicy' is set
        if (authorizationServerPolicy == null) {
            throw new ApiException("Missing the required parameter 'authorizationServerPolicy' when calling updatePolicySuccess(Async)");
        }

        return updatePolicySuccessCall(authServerId, policyId, authorizationServerPolicy, _callback);

    }


    private ApiResponse<AuthorizationServerPolicy> updatePolicySuccessWithHttpInfo(String authServerId, String policyId, AuthorizationServerPolicy authorizationServerPolicy) throws ApiException {
        okhttp3.Call localVarCall = updatePolicySuccessValidateBeforeCall(authServerId, policyId, authorizationServerPolicy, null);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicySuccessAsync(String authServerId, String policyId, AuthorizationServerPolicy authorizationServerPolicy, final ApiCallback<AuthorizationServerPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicySuccessValidateBeforeCall(authServerId, policyId, authorizationServerPolicy, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationServerPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePolicySuccessRequestBuilder {
        private final String authServerId;
        private final String policyId;
        private String description;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private PolicyRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private Integer priority;
        private String status;
        private Boolean system;
        private PolicyType type;

        private UpdatePolicySuccessRequestBuilder(String authServerId, String policyId) {
            this.authServerId = authServerId;
            this.policyId = policyId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder conditions(PolicyRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdatePolicySuccessRequestBuilder
         */
        public UpdatePolicySuccessRequestBuilder type(PolicyType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updatePolicySuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            return updatePolicySuccessCall(authServerId, policyId, authorizationServerPolicy, _callback);
        }

        private AuthorizationServerPolicy buildBodyParams() {
            AuthorizationServerPolicy authorizationServerPolicy = new AuthorizationServerPolicy();
            authorizationServerPolicy.description(this.description);
            authorizationServerPolicy.embedded(this.embedded);
            authorizationServerPolicy.links(this.links);
            authorizationServerPolicy.conditions(this.conditions);
            authorizationServerPolicy.created(this.created);
            authorizationServerPolicy.id(this.id);
            authorizationServerPolicy.lastUpdated(this.lastUpdated);
            authorizationServerPolicy.name(this.name);
            authorizationServerPolicy.priority(this.priority);
            if (this.status != null)
            authorizationServerPolicy.status(AuthorizationServerPolicy.StatusEnum.fromValue(this.status));
            authorizationServerPolicy.system(this.system);
            authorizationServerPolicy.type(this.type);
            return authorizationServerPolicy;
        }

        /**
         * Execute updatePolicySuccess request
         * @return AuthorizationServerPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizationServerPolicy execute() throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            ApiResponse<AuthorizationServerPolicy> localVarResp = updatePolicySuccessWithHttpInfo(authServerId, policyId, authorizationServerPolicy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePolicySuccess request with HTTP info returned
         * @return ApiResponse&lt;AuthorizationServerPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizationServerPolicy> executeWithHttpInfo() throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            return updatePolicySuccessWithHttpInfo(authServerId, policyId, authorizationServerPolicy);
        }

        /**
         * Execute updatePolicySuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizationServerPolicy> _callback) throws ApiException {
            AuthorizationServerPolicy authorizationServerPolicy = buildBodyParams();
            return updatePolicySuccessAsync(authServerId, policyId, authorizationServerPolicy, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param policyId  (required)
     * @param authorizationServerPolicy  (required)
     * @return UpdatePolicySuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicySuccessRequestBuilder updatePolicySuccess(String authServerId, String policyId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new UpdatePolicySuccessRequestBuilder(authServerId, policyId);
    }
    private okhttp3.Call updateScopeSuccessCall(String authServerId, String scopeId, OAuth2Scope oauth2Scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2Scope;

        // create path and map variables
        String localVarPath = "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}"
            .replace("{" + "authServerId" + "}", localVarApiClient.escapeString(authServerId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScopeSuccessValidateBeforeCall(String authServerId, String scopeId, OAuth2Scope oauth2Scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authServerId' is set
        if (authServerId == null) {
            throw new ApiException("Missing the required parameter 'authServerId' when calling updateScopeSuccess(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling updateScopeSuccess(Async)");
        }

        // verify the required parameter 'oauth2Scope' is set
        if (oauth2Scope == null) {
            throw new ApiException("Missing the required parameter 'oauth2Scope' when calling updateScopeSuccess(Async)");
        }

        return updateScopeSuccessCall(authServerId, scopeId, oauth2Scope, _callback);

    }


    private ApiResponse<OAuth2Scope> updateScopeSuccessWithHttpInfo(String authServerId, String scopeId, OAuth2Scope oauth2Scope) throws ApiException {
        okhttp3.Call localVarCall = updateScopeSuccessValidateBeforeCall(authServerId, scopeId, oauth2Scope, null);
        Type localVarReturnType = new TypeToken<OAuth2Scope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateScopeSuccessAsync(String authServerId, String scopeId, OAuth2Scope oauth2Scope, final ApiCallback<OAuth2Scope> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScopeSuccessValidateBeforeCall(authServerId, scopeId, oauth2Scope, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Scope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateScopeSuccessRequestBuilder {
        private final String authServerId;
        private final String scopeId;
        private String description;
        private String consent;
        private Boolean _default;
        private String displayName;
        private String id;
        private String metadataPublish;
        private String name;
        private Boolean system;

        private UpdateScopeSuccessRequestBuilder(String authServerId, String scopeId) {
            this.authServerId = authServerId;
            this.scopeId = scopeId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set consent
         * @param consent  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder consent(String consent) {
            this.consent = consent;
            return this;
        }
        
        /**
         * Set _default
         * @param _default  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set metadataPublish
         * @param metadataPublish  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder metadataPublish(String metadataPublish) {
            this.metadataPublish = metadataPublish;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set system
         * @param system  (optional)
         * @return UpdateScopeSuccessRequestBuilder
         */
        public UpdateScopeSuccessRequestBuilder system(Boolean system) {
            this.system = system;
            return this;
        }
        
        /**
         * Build call for updateScopeSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            return updateScopeSuccessCall(authServerId, scopeId, oauth2Scope, _callback);
        }

        private OAuth2Scope buildBodyParams() {
            OAuth2Scope oauth2Scope = new OAuth2Scope();
            oauth2Scope.description(this.description);
            if (this.consent != null)
            oauth2Scope.consent(OAuth2Scope.ConsentEnum.fromValue(this.consent));
            oauth2Scope._default(this._default);
            oauth2Scope.displayName(this.displayName);
            oauth2Scope.id(this.id);
            if (this.metadataPublish != null)
            oauth2Scope.metadataPublish(OAuth2Scope.MetadataPublishEnum.fromValue(this.metadataPublish));
            oauth2Scope.name(this.name);
            oauth2Scope.system(this.system);
            return oauth2Scope;
        }

        /**
         * Execute updateScopeSuccess request
         * @return OAuth2Scope
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2Scope execute() throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            ApiResponse<OAuth2Scope> localVarResp = updateScopeSuccessWithHttpInfo(authServerId, scopeId, oauth2Scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScopeSuccess request with HTTP info returned
         * @return ApiResponse&lt;OAuth2Scope&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2Scope> executeWithHttpInfo() throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            return updateScopeSuccessWithHttpInfo(authServerId, scopeId, oauth2Scope);
        }

        /**
         * Execute updateScopeSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2Scope> _callback) throws ApiException {
            OAuth2Scope oauth2Scope = buildBodyParams();
            return updateScopeSuccessAsync(authServerId, scopeId, oauth2Scope, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authServerId  (required)
     * @param scopeId  (required)
     * @param oauth2Scope  (required)
     * @return UpdateScopeSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScopeSuccessRequestBuilder updateScopeSuccess(String authServerId, String scopeId) throws IllegalArgumentException {
        if (authServerId == null) throw new IllegalArgumentException("\"authServerId\" is required but got null");
            

        if (scopeId == null) throw new IllegalArgumentException("\"scopeId\" is required but got null");
            

        return new UpdateScopeSuccessRequestBuilder(authServerId, scopeId);
    }
}
