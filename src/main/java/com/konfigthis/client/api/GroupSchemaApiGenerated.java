/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GroupSchema;
import com.konfigthis.client.model.GroupSchemaDefinitions;
import com.konfigthis.client.model.UserSchemaProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupSchemaApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupSchemaApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupSchemaApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/group/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCall(_callback);

    }


    private ApiResponse<GroupSchema> getWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(final ApiCallback<GroupSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {

        private GetRequestBuilder() {
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(_callback);
        }


        /**
         * Execute get request
         * @return GroupSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public GroupSchema execute() throws ApiException {
            ApiResponse<GroupSchema> localVarResp = getWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;GroupSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupSchema> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo();
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupSchema> _callback) throws ApiException {
            return getAsync(_callback);
        }
    }

    /**
     * Fetches the group schema
     * Fetches the group schema
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get() throws IllegalArgumentException {
        return new GetRequestBuilder();
    }
    private okhttp3.Call updateCustomPropertiesCall(GroupSchema groupSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupSchema;

        // create path and map variables
        String localVarPath = "/api/v1/meta/schemas/group/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomPropertiesValidateBeforeCall(GroupSchema groupSchema, final ApiCallback _callback) throws ApiException {
        return updateCustomPropertiesCall(groupSchema, _callback);

    }


    private ApiResponse<GroupSchema> updateCustomPropertiesWithHttpInfo(GroupSchema groupSchema) throws ApiException {
        okhttp3.Call localVarCall = updateCustomPropertiesValidateBeforeCall(groupSchema, null);
        Type localVarReturnType = new TypeToken<GroupSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomPropertiesAsync(GroupSchema groupSchema, final ApiCallback<GroupSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomPropertiesValidateBeforeCall(groupSchema, _callback);
        Type localVarReturnType = new TypeToken<GroupSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomPropertiesRequestBuilder {
        private String title;
        private String description;
        private String $schema;
        private Map<String, Object> links;
        private String created;
        private GroupSchemaDefinitions definitions;
        private String id;
        private String lastUpdated;
        private String name;
        private UserSchemaProperties properties;
        private String type;

        private UpdateCustomPropertiesRequestBuilder() {
        }

        /**
         * Set title
         * @param title  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set $schema
         * @param $schema  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder $schema(String $schema) {
            this.$schema = $schema;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder created(String created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set definitions
         * @param definitions  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder definitions(GroupSchemaDefinitions definitions) {
            this.definitions = definitions;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder lastUpdated(String lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set properties
         * @param properties  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder properties(UserSchemaProperties properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateCustomPropertiesRequestBuilder
         */
        public UpdateCustomPropertiesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateCustomProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupSchema groupSchema = buildBodyParams();
            return updateCustomPropertiesCall(groupSchema, _callback);
        }

        private GroupSchema buildBodyParams() {
            GroupSchema groupSchema = new GroupSchema();
            groupSchema.title(this.title);
            groupSchema.description(this.description);
            groupSchema.$schema(this.$schema);
            groupSchema.links(this.links);
            groupSchema.created(this.created);
            groupSchema.definitions(this.definitions);
            groupSchema.id(this.id);
            groupSchema.lastUpdated(this.lastUpdated);
            groupSchema.name(this.name);
            groupSchema.properties(this.properties);
            groupSchema.type(this.type);
            return groupSchema;
        }

        /**
         * Execute updateCustomProperties request
         * @return GroupSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public GroupSchema execute() throws ApiException {
            GroupSchema groupSchema = buildBodyParams();
            ApiResponse<GroupSchema> localVarResp = updateCustomPropertiesWithHttpInfo(groupSchema);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomProperties request with HTTP info returned
         * @return ApiResponse&lt;GroupSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupSchema> executeWithHttpInfo() throws ApiException {
            GroupSchema groupSchema = buildBodyParams();
            return updateCustomPropertiesWithHttpInfo(groupSchema);
        }

        /**
         * Execute updateCustomProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupSchema> _callback) throws ApiException {
            GroupSchema groupSchema = buildBodyParams();
            return updateCustomPropertiesAsync(groupSchema, _callback);
        }
    }

    /**
     * Updates, adds ore removes one or more custom Group Profile properties in the schema
     * Updates, adds ore removes one or more custom Group Profile properties in the schema
     * @return UpdateCustomPropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomPropertiesRequestBuilder updateCustomProperties() throws IllegalArgumentException {
        return new UpdateCustomPropertiesRequestBuilder();
    }
}
