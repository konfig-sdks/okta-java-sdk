/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Authenticator;
import com.konfigthis.client.model.AuthenticatorProvider;
import com.konfigthis.client.model.AuthenticatorSettings;
import com.konfigthis.client.model.AuthenticatorStatus;
import com.konfigthis.client.model.AuthenticatorType;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticatorApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticatorApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticatorApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleSuccessCall(String authenticatorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authenticators/{authenticatorId}/lifecycle/activate"
            .replace("{" + "authenticatorId" + "}", localVarApiClient.escapeString(authenticatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleSuccessValidateBeforeCall(String authenticatorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorId' is set
        if (authenticatorId == null) {
            throw new ApiException("Missing the required parameter 'authenticatorId' when calling activateLifecycleSuccess(Async)");
        }

        return activateLifecycleSuccessCall(authenticatorId, _callback);

    }


    private ApiResponse<Authenticator> activateLifecycleSuccessWithHttpInfo(String authenticatorId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(authenticatorId, null);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateLifecycleSuccessAsync(String authenticatorId, final ApiCallback<Authenticator> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(authenticatorId, _callback);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleSuccessRequestBuilder {
        private final String authenticatorId;

        private ActivateLifecycleSuccessRequestBuilder(String authenticatorId) {
            this.authenticatorId = authenticatorId;
        }

        /**
         * Build call for activateLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleSuccessCall(authenticatorId, _callback);
        }


        /**
         * Execute activateLifecycleSuccess request
         * @return Authenticator
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Authenticator execute() throws ApiException {
            ApiResponse<Authenticator> localVarResp = activateLifecycleSuccessWithHttpInfo(authenticatorId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;Authenticator&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authenticator> executeWithHttpInfo() throws ApiException {
            return activateLifecycleSuccessWithHttpInfo(authenticatorId);
        }

        /**
         * Execute activateLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authenticator> _callback) throws ApiException {
            return activateLifecycleSuccessAsync(authenticatorId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authenticatorId  (required)
     * @return ActivateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleSuccessRequestBuilder activateLifecycleSuccess(String authenticatorId) throws IllegalArgumentException {
        if (authenticatorId == null) throw new IllegalArgumentException("\"authenticatorId\" is required but got null");
            

        return new ActivateLifecycleSuccessRequestBuilder(authenticatorId);
    }
    private okhttp3.Call createNewCall(Authenticator authenticator, Boolean activate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticator;

        // create path and map variables
        String localVarPath = "/api/v1/authenticators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(Authenticator authenticator, Boolean activate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticator' is set
        if (authenticator == null) {
            throw new ApiException("Missing the required parameter 'authenticator' when calling createNew(Async)");
        }

        return createNewCall(authenticator, activate, _callback);

    }


    private ApiResponse<Authenticator> createNewWithHttpInfo(Authenticator authenticator, Boolean activate) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(authenticator, activate, null);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(Authenticator authenticator, Boolean activate, final ApiCallback<Authenticator> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(authenticator, activate, _callback);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String id;
        private String key;
        private OffsetDateTime lastUpdated;
        private String name;
        private AuthenticatorProvider provider;
        private AuthenticatorSettings settings;
        private AuthenticatorStatus status;
        private AuthenticatorType type;
        private Boolean activate;

        private CreateNewRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set key
         * @param key  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder provider(AuthenticatorProvider provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder settings(AuthenticatorSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder status(AuthenticatorStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder type(AuthenticatorType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set activate
         * @param activate  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder activate(Boolean activate) {
            this.activate = activate;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Authenticator authenticator = buildBodyParams();
            return createNewCall(authenticator, activate, _callback);
        }

        private Authenticator buildBodyParams() {
            Authenticator authenticator = new Authenticator();
            authenticator.links(this.links);
            authenticator.created(this.created);
            authenticator.id(this.id);
            authenticator.key(this.key);
            authenticator.lastUpdated(this.lastUpdated);
            authenticator.name(this.name);
            authenticator.provider(this.provider);
            authenticator.settings(this.settings);
            authenticator.status(this.status);
            authenticator.type(this.type);
            return authenticator;
        }

        /**
         * Execute createNew request
         * @return Authenticator
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Authenticator execute() throws ApiException {
            Authenticator authenticator = buildBodyParams();
            ApiResponse<Authenticator> localVarResp = createNewWithHttpInfo(authenticator, activate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;Authenticator&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authenticator> executeWithHttpInfo() throws ApiException {
            Authenticator authenticator = buildBodyParams();
            return createNewWithHttpInfo(authenticator, activate);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authenticator> _callback) throws ApiException {
            Authenticator authenticator = buildBodyParams();
            return createNewAsync(authenticator, activate, _callback);
        }
    }

    /**
     * Create an Authenticator
     * Create Authenticator
     * @param authenticator  (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew() throws IllegalArgumentException {
        return new CreateNewRequestBuilder();
    }
    private okhttp3.Call deactivateLifecycleSuccessCall(String authenticatorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authenticators/{authenticatorId}/lifecycle/deactivate"
            .replace("{" + "authenticatorId" + "}", localVarApiClient.escapeString(authenticatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleSuccessValidateBeforeCall(String authenticatorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorId' is set
        if (authenticatorId == null) {
            throw new ApiException("Missing the required parameter 'authenticatorId' when calling deactivateLifecycleSuccess(Async)");
        }

        return deactivateLifecycleSuccessCall(authenticatorId, _callback);

    }


    private ApiResponse<Authenticator> deactivateLifecycleSuccessWithHttpInfo(String authenticatorId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleSuccessValidateBeforeCall(authenticatorId, null);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateLifecycleSuccessAsync(String authenticatorId, final ApiCallback<Authenticator> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleSuccessValidateBeforeCall(authenticatorId, _callback);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleSuccessRequestBuilder {
        private final String authenticatorId;

        private DeactivateLifecycleSuccessRequestBuilder(String authenticatorId) {
            this.authenticatorId = authenticatorId;
        }

        /**
         * Build call for deactivateLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleSuccessCall(authenticatorId, _callback);
        }


        /**
         * Execute deactivateLifecycleSuccess request
         * @return Authenticator
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Authenticator execute() throws ApiException {
            ApiResponse<Authenticator> localVarResp = deactivateLifecycleSuccessWithHttpInfo(authenticatorId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;Authenticator&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authenticator> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleSuccessWithHttpInfo(authenticatorId);
        }

        /**
         * Execute deactivateLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authenticator> _callback) throws ApiException {
            return deactivateLifecycleSuccessAsync(authenticatorId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authenticatorId  (required)
     * @return DeactivateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleSuccessRequestBuilder deactivateLifecycleSuccess(String authenticatorId) throws IllegalArgumentException {
        if (authenticatorId == null) throw new IllegalArgumentException("\"authenticatorId\" is required but got null");
            

        return new DeactivateLifecycleSuccessRequestBuilder(authenticatorId);
    }
    private okhttp3.Call getSuccessCall(String authenticatorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authenticators/{authenticatorId}"
            .replace("{" + "authenticatorId" + "}", localVarApiClient.escapeString(authenticatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuccessValidateBeforeCall(String authenticatorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorId' is set
        if (authenticatorId == null) {
            throw new ApiException("Missing the required parameter 'authenticatorId' when calling getSuccess(Async)");
        }

        return getSuccessCall(authenticatorId, _callback);

    }


    private ApiResponse<Authenticator> getSuccessWithHttpInfo(String authenticatorId) throws ApiException {
        okhttp3.Call localVarCall = getSuccessValidateBeforeCall(authenticatorId, null);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuccessAsync(String authenticatorId, final ApiCallback<Authenticator> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuccessValidateBeforeCall(authenticatorId, _callback);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuccessRequestBuilder {
        private final String authenticatorId;

        private GetSuccessRequestBuilder(String authenticatorId) {
            this.authenticatorId = authenticatorId;
        }

        /**
         * Build call for getSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSuccessCall(authenticatorId, _callback);
        }


        /**
         * Execute getSuccess request
         * @return Authenticator
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Authenticator execute() throws ApiException {
            ApiResponse<Authenticator> localVarResp = getSuccessWithHttpInfo(authenticatorId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuccess request with HTTP info returned
         * @return ApiResponse&lt;Authenticator&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authenticator> executeWithHttpInfo() throws ApiException {
            return getSuccessWithHttpInfo(authenticatorId);
        }

        /**
         * Execute getSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authenticator> _callback) throws ApiException {
            return getSuccessAsync(authenticatorId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param authenticatorId  (required)
     * @return GetSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSuccessRequestBuilder getSuccess(String authenticatorId) throws IllegalArgumentException {
        if (authenticatorId == null) throw new IllegalArgumentException("\"authenticatorId\" is required but got null");
            

        return new GetSuccessRequestBuilder(authenticatorId);
    }
    private okhttp3.Call listAllAvailableCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authenticators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAvailableValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllAvailableCall(_callback);

    }


    private ApiResponse<List<Authenticator>> listAllAvailableWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllAvailableValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Authenticator>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAvailableAsync(final ApiCallback<List<Authenticator>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAvailableValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Authenticator>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllAvailableRequestBuilder {

        private ListAllAvailableRequestBuilder() {
        }

        /**
         * Build call for listAllAvailable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllAvailableCall(_callback);
        }


        /**
         * Execute listAllAvailable request
         * @return List&lt;Authenticator&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Authenticator> execute() throws ApiException {
            ApiResponse<List<Authenticator>> localVarResp = listAllAvailableWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllAvailable request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Authenticator&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Authenticator>> executeWithHttpInfo() throws ApiException {
            return listAllAvailableWithHttpInfo();
        }

        /**
         * Execute listAllAvailable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Authenticator>> _callback) throws ApiException {
            return listAllAvailableAsync(_callback);
        }
    }

    /**
     * Lists all available Authenticators
     * List Authenticators
     * @return ListAllAvailableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllAvailableRequestBuilder listAllAvailable() throws IllegalArgumentException {
        return new ListAllAvailableRequestBuilder();
    }
    private okhttp3.Call updateAuthenticatorCall(String authenticatorId, Authenticator authenticator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticator;

        // create path and map variables
        String localVarPath = "/api/v1/authenticators/{authenticatorId}"
            .replace("{" + "authenticatorId" + "}", localVarApiClient.escapeString(authenticatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthenticatorValidateBeforeCall(String authenticatorId, Authenticator authenticator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorId' is set
        if (authenticatorId == null) {
            throw new ApiException("Missing the required parameter 'authenticatorId' when calling updateAuthenticator(Async)");
        }

        // verify the required parameter 'authenticator' is set
        if (authenticator == null) {
            throw new ApiException("Missing the required parameter 'authenticator' when calling updateAuthenticator(Async)");
        }

        return updateAuthenticatorCall(authenticatorId, authenticator, _callback);

    }


    private ApiResponse<Authenticator> updateAuthenticatorWithHttpInfo(String authenticatorId, Authenticator authenticator) throws ApiException {
        okhttp3.Call localVarCall = updateAuthenticatorValidateBeforeCall(authenticatorId, authenticator, null);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAuthenticatorAsync(String authenticatorId, Authenticator authenticator, final ApiCallback<Authenticator> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthenticatorValidateBeforeCall(authenticatorId, authenticator, _callback);
        Type localVarReturnType = new TypeToken<Authenticator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAuthenticatorRequestBuilder {
        private final String authenticatorId;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String id;
        private String key;
        private OffsetDateTime lastUpdated;
        private String name;
        private AuthenticatorProvider provider;
        private AuthenticatorSettings settings;
        private AuthenticatorStatus status;
        private AuthenticatorType type;

        private UpdateAuthenticatorRequestBuilder(String authenticatorId) {
            this.authenticatorId = authenticatorId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set key
         * @param key  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder provider(AuthenticatorProvider provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder settings(AuthenticatorSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder status(AuthenticatorStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateAuthenticatorRequestBuilder
         */
        public UpdateAuthenticatorRequestBuilder type(AuthenticatorType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateAuthenticator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Authenticator authenticator = buildBodyParams();
            return updateAuthenticatorCall(authenticatorId, authenticator, _callback);
        }

        private Authenticator buildBodyParams() {
            Authenticator authenticator = new Authenticator();
            authenticator.links(this.links);
            authenticator.created(this.created);
            authenticator.id(this.id);
            authenticator.key(this.key);
            authenticator.lastUpdated(this.lastUpdated);
            authenticator.name(this.name);
            authenticator.provider(this.provider);
            authenticator.settings(this.settings);
            authenticator.status(this.status);
            authenticator.type(this.type);
            return authenticator;
        }

        /**
         * Execute updateAuthenticator request
         * @return Authenticator
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Authenticator execute() throws ApiException {
            Authenticator authenticator = buildBodyParams();
            ApiResponse<Authenticator> localVarResp = updateAuthenticatorWithHttpInfo(authenticatorId, authenticator);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAuthenticator request with HTTP info returned
         * @return ApiResponse&lt;Authenticator&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authenticator> executeWithHttpInfo() throws ApiException {
            Authenticator authenticator = buildBodyParams();
            return updateAuthenticatorWithHttpInfo(authenticatorId, authenticator);
        }

        /**
         * Execute updateAuthenticator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authenticator> _callback) throws ApiException {
            Authenticator authenticator = buildBodyParams();
            return updateAuthenticatorAsync(authenticatorId, authenticator, _callback);
        }
    }

    /**
     * Update Authenticator
     * Updates an authenticator
     * @param authenticatorId  (required)
     * @param authenticator  (required)
     * @return UpdateAuthenticatorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAuthenticatorRequestBuilder updateAuthenticator(String authenticatorId) throws IllegalArgumentException {
        if (authenticatorId == null) throw new IllegalArgumentException("\"authenticatorId\" is required but got null");
            

        return new UpdateAuthenticatorRequestBuilder(authenticatorId);
    }
}
