/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InlineHook;
import com.konfigthis.client.model.InlineHookChannel;
import com.konfigthis.client.model.InlineHookResponse;
import com.konfigthis.client.model.InlineHookStatus;
import com.konfigthis.client.model.InlineHookType;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InlineHookApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InlineHookApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InlineHookApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks/{inlineHookId}/lifecycle/activate"
            .replace("{" + "inlineHookId" + "}", localVarApiClient.escapeString(inlineHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleValidateBeforeCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHookId' is set
        if (inlineHookId == null) {
            throw new ApiException("Missing the required parameter 'inlineHookId' when calling activateLifecycle(Async)");
        }

        return activateLifecycleCall(inlineHookId, _callback);

    }


    private ApiResponse<InlineHook> activateLifecycleWithHttpInfo(String inlineHookId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(inlineHookId, null);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateLifecycleAsync(String inlineHookId, final ApiCallback<InlineHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(inlineHookId, _callback);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleRequestBuilder {
        private final String inlineHookId;

        private ActivateLifecycleRequestBuilder(String inlineHookId) {
            this.inlineHookId = inlineHookId;
        }

        /**
         * Build call for activateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleCall(inlineHookId, _callback);
        }


        /**
         * Execute activateLifecycle request
         * @return InlineHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InlineHook execute() throws ApiException {
            ApiResponse<InlineHook> localVarResp = activateLifecycleWithHttpInfo(inlineHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;InlineHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InlineHook> executeWithHttpInfo() throws ApiException {
            return activateLifecycleWithHttpInfo(inlineHookId);
        }

        /**
         * Execute activateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InlineHook> _callback) throws ApiException {
            return activateLifecycleAsync(inlineHookId, _callback);
        }
    }

    /**
     * 
     * Activates the Inline Hook matching the provided id
     * @param inlineHookId  (required)
     * @return ActivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleRequestBuilder activateLifecycle(String inlineHookId) throws IllegalArgumentException {
        if (inlineHookId == null) throw new IllegalArgumentException("\"inlineHookId\" is required but got null");
            

        return new ActivateLifecycleRequestBuilder(inlineHookId);
    }
    private okhttp3.Call createSuccessCall(InlineHook inlineHook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineHook;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSuccessValidateBeforeCall(InlineHook inlineHook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHook' is set
        if (inlineHook == null) {
            throw new ApiException("Missing the required parameter 'inlineHook' when calling createSuccess(Async)");
        }

        return createSuccessCall(inlineHook, _callback);

    }


    private ApiResponse<InlineHook> createSuccessWithHttpInfo(InlineHook inlineHook) throws ApiException {
        okhttp3.Call localVarCall = createSuccessValidateBeforeCall(inlineHook, null);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSuccessAsync(InlineHook inlineHook, final ApiCallback<InlineHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSuccessValidateBeforeCall(inlineHook, _callback);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSuccessRequestBuilder {
        private String version;
        private Map<String, Object> links;
        private InlineHookChannel channel;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private InlineHookStatus status;
        private InlineHookType type;

        private CreateSuccessRequestBuilder() {
        }

        /**
         * Set version
         * @param version  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set channel
         * @param channel  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder channel(InlineHookChannel channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder status(InlineHookStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder type(InlineHookType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            return createSuccessCall(inlineHook, _callback);
        }

        private InlineHook buildBodyParams() {
            InlineHook inlineHook = new InlineHook();
            inlineHook.version(this.version);
            inlineHook.links(this.links);
            inlineHook.channel(this.channel);
            inlineHook.created(this.created);
            inlineHook.id(this.id);
            inlineHook.lastUpdated(this.lastUpdated);
            inlineHook.name(this.name);
            inlineHook.status(this.status);
            inlineHook.type(this.type);
            return inlineHook;
        }

        /**
         * Execute createSuccess request
         * @return InlineHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InlineHook execute() throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            ApiResponse<InlineHook> localVarResp = createSuccessWithHttpInfo(inlineHook);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSuccess request with HTTP info returned
         * @return ApiResponse&lt;InlineHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InlineHook> executeWithHttpInfo() throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            return createSuccessWithHttpInfo(inlineHook);
        }

        /**
         * Execute createSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InlineHook> _callback) throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            return createSuccessAsync(inlineHook, _callback);
        }
    }

    /**
     * 
     * Success
     * @param inlineHook  (required)
     * @return CreateSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateSuccessRequestBuilder createSuccess() throws IllegalArgumentException {
        return new CreateSuccessRequestBuilder();
    }
    private okhttp3.Call deactivateLifecycleCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate"
            .replace("{" + "inlineHookId" + "}", localVarApiClient.escapeString(inlineHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleValidateBeforeCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHookId' is set
        if (inlineHookId == null) {
            throw new ApiException("Missing the required parameter 'inlineHookId' when calling deactivateLifecycle(Async)");
        }

        return deactivateLifecycleCall(inlineHookId, _callback);

    }


    private ApiResponse<InlineHook> deactivateLifecycleWithHttpInfo(String inlineHookId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(inlineHookId, null);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateLifecycleAsync(String inlineHookId, final ApiCallback<InlineHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(inlineHookId, _callback);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleRequestBuilder {
        private final String inlineHookId;

        private DeactivateLifecycleRequestBuilder(String inlineHookId) {
            this.inlineHookId = inlineHookId;
        }

        /**
         * Build call for deactivateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleCall(inlineHookId, _callback);
        }


        /**
         * Execute deactivateLifecycle request
         * @return InlineHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InlineHook execute() throws ApiException {
            ApiResponse<InlineHook> localVarResp = deactivateLifecycleWithHttpInfo(inlineHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;InlineHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InlineHook> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleWithHttpInfo(inlineHookId);
        }

        /**
         * Execute deactivateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InlineHook> _callback) throws ApiException {
            return deactivateLifecycleAsync(inlineHookId, _callback);
        }
    }

    /**
     * 
     * Deactivates the Inline Hook matching the provided id
     * @param inlineHookId  (required)
     * @return DeactivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleRequestBuilder deactivateLifecycle(String inlineHookId) throws IllegalArgumentException {
        if (inlineHookId == null) throw new IllegalArgumentException("\"inlineHookId\" is required but got null");
            

        return new DeactivateLifecycleRequestBuilder(inlineHookId);
    }
    private okhttp3.Call deleteMatchingByIdCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks/{inlineHookId}"
            .replace("{" + "inlineHookId" + "}", localVarApiClient.escapeString(inlineHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMatchingByIdValidateBeforeCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHookId' is set
        if (inlineHookId == null) {
            throw new ApiException("Missing the required parameter 'inlineHookId' when calling deleteMatchingById(Async)");
        }

        return deleteMatchingByIdCall(inlineHookId, _callback);

    }


    private ApiResponse<Void> deleteMatchingByIdWithHttpInfo(String inlineHookId) throws ApiException {
        okhttp3.Call localVarCall = deleteMatchingByIdValidateBeforeCall(inlineHookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMatchingByIdAsync(String inlineHookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMatchingByIdValidateBeforeCall(inlineHookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMatchingByIdRequestBuilder {
        private final String inlineHookId;

        private DeleteMatchingByIdRequestBuilder(String inlineHookId) {
            this.inlineHookId = inlineHookId;
        }

        /**
         * Build call for deleteMatchingById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMatchingByIdCall(inlineHookId, _callback);
        }


        /**
         * Execute deleteMatchingById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMatchingByIdWithHttpInfo(inlineHookId);
        }

        /**
         * Execute deleteMatchingById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMatchingByIdWithHttpInfo(inlineHookId);
        }

        /**
         * Execute deleteMatchingById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMatchingByIdAsync(inlineHookId, _callback);
        }
    }

    /**
     * 
     * Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
     * @param inlineHookId  (required)
     * @return DeleteMatchingByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMatchingByIdRequestBuilder deleteMatchingById(String inlineHookId) throws IllegalArgumentException {
        if (inlineHookId == null) throw new IllegalArgumentException("\"inlineHookId\" is required but got null");
            

        return new DeleteMatchingByIdRequestBuilder(inlineHookId);
    }
    private okhttp3.Call executeWithInputCall(String inlineHookId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks/{inlineHookId}/execute"
            .replace("{" + "inlineHookId" + "}", localVarApiClient.escapeString(inlineHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeWithInputValidateBeforeCall(String inlineHookId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHookId' is set
        if (inlineHookId == null) {
            throw new ApiException("Missing the required parameter 'inlineHookId' when calling executeWithInput(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeWithInput(Async)");
        }

        return executeWithInputCall(inlineHookId, body, _callback);

    }


    private ApiResponse<InlineHookResponse> executeWithInputWithHttpInfo(String inlineHookId, Object body) throws ApiException {
        okhttp3.Call localVarCall = executeWithInputValidateBeforeCall(inlineHookId, body, null);
        Type localVarReturnType = new TypeToken<InlineHookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call executeWithInputAsync(String inlineHookId, Object body, final ApiCallback<InlineHookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeWithInputValidateBeforeCall(inlineHookId, body, _callback);
        Type localVarReturnType = new TypeToken<InlineHookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExecuteWithInputRequestBuilder {
        private final String inlineHookId;

        private ExecuteWithInputRequestBuilder(String inlineHookId) {
            this.inlineHookId = inlineHookId;
        }

        /**
         * Build call for executeWithInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return executeWithInputCall(inlineHookId, body, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute executeWithInput request
         * @return InlineHookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InlineHookResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<InlineHookResponse> localVarResp = executeWithInputWithHttpInfo(inlineHookId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute executeWithInput request with HTTP info returned
         * @return ApiResponse&lt;InlineHookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InlineHookResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return executeWithInputWithHttpInfo(inlineHookId, body);
        }

        /**
         * Execute executeWithInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InlineHookResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return executeWithInputAsync(inlineHookId, body, _callback);
        }
    }

    /**
     * 
     * Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
     * @param inlineHookId  (required)
     * @param body  (required)
     * @return ExecuteWithInputRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteWithInputRequestBuilder executeWithInput(String inlineHookId) throws IllegalArgumentException {
        if (inlineHookId == null) throw new IllegalArgumentException("\"inlineHookId\" is required but got null");
            

        return new ExecuteWithInputRequestBuilder(inlineHookId);
    }
    private okhttp3.Call getByIdCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks/{inlineHookId}"
            .replace("{" + "inlineHookId" + "}", localVarApiClient.escapeString(inlineHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String inlineHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHookId' is set
        if (inlineHookId == null) {
            throw new ApiException("Missing the required parameter 'inlineHookId' when calling getById(Async)");
        }

        return getByIdCall(inlineHookId, _callback);

    }


    private ApiResponse<InlineHook> getByIdWithHttpInfo(String inlineHookId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(inlineHookId, null);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String inlineHookId, final ApiCallback<InlineHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(inlineHookId, _callback);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String inlineHookId;

        private GetByIdRequestBuilder(String inlineHookId) {
            this.inlineHookId = inlineHookId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(inlineHookId, _callback);
        }


        /**
         * Execute getById request
         * @return InlineHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InlineHook execute() throws ApiException {
            ApiResponse<InlineHook> localVarResp = getByIdWithHttpInfo(inlineHookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;InlineHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InlineHook> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(inlineHookId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InlineHook> _callback) throws ApiException {
            return getByIdAsync(inlineHookId, _callback);
        }
    }

    /**
     * 
     * Gets an inline hook by ID
     * @param inlineHookId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String inlineHookId) throws IllegalArgumentException {
        if (inlineHookId == null) throw new IllegalArgumentException("\"inlineHookId\" is required but got null");
            

        return new GetByIdRequestBuilder(inlineHookId);
    }
    private okhttp3.Call getSuccessCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuccessValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        return getSuccessCall(type, _callback);

    }


    private ApiResponse<List<InlineHook>> getSuccessWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = getSuccessValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<List<InlineHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuccessAsync(String type, final ApiCallback<List<InlineHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuccessValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<List<InlineHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuccessRequestBuilder {
        private String type;

        private GetSuccessRequestBuilder() {
        }

        /**
         * Set type
         * @param type  (optional)
         * @return GetSuccessRequestBuilder
         */
        public GetSuccessRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSuccessCall(type, _callback);
        }


        /**
         * Execute getSuccess request
         * @return List&lt;InlineHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<InlineHook> execute() throws ApiException {
            ApiResponse<List<InlineHook>> localVarResp = getSuccessWithHttpInfo(type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuccess request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InlineHook&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<InlineHook>> executeWithHttpInfo() throws ApiException {
            return getSuccessWithHttpInfo(type);
        }

        /**
         * Execute getSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<InlineHook>> _callback) throws ApiException {
            return getSuccessAsync(type, _callback);
        }
    }

    /**
     * 
     * Success
     * @return GetSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSuccessRequestBuilder getSuccess() throws IllegalArgumentException {
        return new GetSuccessRequestBuilder();
    }
    private okhttp3.Call updateByIdCall(String inlineHookId, InlineHook inlineHook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineHook;

        // create path and map variables
        String localVarPath = "/api/v1/inlineHooks/{inlineHookId}"
            .replace("{" + "inlineHookId" + "}", localVarApiClient.escapeString(inlineHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String inlineHookId, InlineHook inlineHook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inlineHookId' is set
        if (inlineHookId == null) {
            throw new ApiException("Missing the required parameter 'inlineHookId' when calling updateById(Async)");
        }

        // verify the required parameter 'inlineHook' is set
        if (inlineHook == null) {
            throw new ApiException("Missing the required parameter 'inlineHook' when calling updateById(Async)");
        }

        return updateByIdCall(inlineHookId, inlineHook, _callback);

    }


    private ApiResponse<InlineHook> updateByIdWithHttpInfo(String inlineHookId, InlineHook inlineHook) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(inlineHookId, inlineHook, null);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String inlineHookId, InlineHook inlineHook, final ApiCallback<InlineHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(inlineHookId, inlineHook, _callback);
        Type localVarReturnType = new TypeToken<InlineHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String inlineHookId;
        private String version;
        private Map<String, Object> links;
        private InlineHookChannel channel;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private InlineHookStatus status;
        private InlineHookType type;

        private UpdateByIdRequestBuilder(String inlineHookId) {
            this.inlineHookId = inlineHookId;
        }

        /**
         * Set version
         * @param version  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set channel
         * @param channel  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder channel(InlineHookChannel channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder status(InlineHookStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder type(InlineHookType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            return updateByIdCall(inlineHookId, inlineHook, _callback);
        }

        private InlineHook buildBodyParams() {
            InlineHook inlineHook = new InlineHook();
            inlineHook.version(this.version);
            inlineHook.links(this.links);
            inlineHook.channel(this.channel);
            inlineHook.created(this.created);
            inlineHook.id(this.id);
            inlineHook.lastUpdated(this.lastUpdated);
            inlineHook.name(this.name);
            inlineHook.status(this.status);
            inlineHook.type(this.type);
            return inlineHook;
        }

        /**
         * Execute updateById request
         * @return InlineHook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InlineHook execute() throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            ApiResponse<InlineHook> localVarResp = updateByIdWithHttpInfo(inlineHookId, inlineHook);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;InlineHook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InlineHook> executeWithHttpInfo() throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            return updateByIdWithHttpInfo(inlineHookId, inlineHook);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InlineHook> _callback) throws ApiException {
            InlineHook inlineHook = buildBodyParams();
            return updateByIdAsync(inlineHookId, inlineHook, _callback);
        }
    }

    /**
     * 
     * Updates an inline hook by ID
     * @param inlineHookId  (required)
     * @param inlineHook  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String inlineHookId) throws IllegalArgumentException {
        if (inlineHookId == null) throw new IllegalArgumentException("\"inlineHookId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(inlineHookId);
    }
}
