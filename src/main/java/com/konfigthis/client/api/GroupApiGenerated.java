/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Application;
import com.konfigthis.client.model.AssignRoleRequest;
import com.konfigthis.client.model.CatalogApplication;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.GroupProfile;
import com.konfigthis.client.model.GroupRule;
import com.konfigthis.client.model.GroupRuleAction;
import com.konfigthis.client.model.GroupRuleConditions;
import com.konfigthis.client.model.GroupRuleStatus;
import com.konfigthis.client.model.GroupType;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Role;
import com.konfigthis.client.model.RoleType;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateRuleLifecycleCall(String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules/{ruleId}/lifecycle/activate"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateRuleLifecycleValidateBeforeCall(String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling activateRuleLifecycle(Async)");
        }

        return activateRuleLifecycleCall(ruleId, _callback);

    }


    private ApiResponse<Void> activateRuleLifecycleWithHttpInfo(String ruleId) throws ApiException {
        okhttp3.Call localVarCall = activateRuleLifecycleValidateBeforeCall(ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call activateRuleLifecycleAsync(String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateRuleLifecycleValidateBeforeCall(ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ActivateRuleLifecycleRequestBuilder {
        private final String ruleId;

        private ActivateRuleLifecycleRequestBuilder(String ruleId) {
            this.ruleId = ruleId;
        }

        /**
         * Build call for activateRuleLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateRuleLifecycleCall(ruleId, _callback);
        }


        /**
         * Execute activateRuleLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            activateRuleLifecycleWithHttpInfo(ruleId);
        }

        /**
         * Execute activateRuleLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return activateRuleLifecycleWithHttpInfo(ruleId);
        }

        /**
         * Execute activateRuleLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return activateRuleLifecycleAsync(ruleId, _callback);
        }
    }

    /**
     * Activate a group Rule
     * Activates a specific group rule by id from your organization
     * @param ruleId  (required)
     * @return ActivateRuleLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ActivateRuleLifecycleRequestBuilder activateRuleLifecycle(String ruleId) throws IllegalArgumentException {
        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new ActivateRuleLifecycleRequestBuilder(ruleId);
    }
    private okhttp3.Call addAppInstanceTargetToAppAdminRoleGivenToGroupCall(String groupId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAppInstanceTargetToAppAdminRoleGivenToGroupValidateBeforeCall(String groupId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling addAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling addAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        return addAppInstanceTargetToAppAdminRoleGivenToGroupCall(groupId, roleId, appName, applicationId, _callback);

    }


    private ApiResponse<Void> addAppInstanceTargetToAppAdminRoleGivenToGroupWithHttpInfo(String groupId, String roleId, String appName, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = addAppInstanceTargetToAppAdminRoleGivenToGroupValidateBeforeCall(groupId, roleId, appName, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addAppInstanceTargetToAppAdminRoleGivenToGroupAsync(String groupId, String roleId, String appName, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAppInstanceTargetToAppAdminRoleGivenToGroupValidateBeforeCall(groupId, roleId, appName, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder {
        private final String groupId;
        private final String roleId;
        private final String appName;
        private final String applicationId;

        private AddAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder(String groupId, String roleId, String appName, String applicationId) {
            this.groupId = groupId;
            this.roleId = roleId;
            this.appName = appName;
            this.applicationId = applicationId;
        }

        /**
         * Build call for addAppInstanceTargetToAppAdminRoleGivenToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addAppInstanceTargetToAppAdminRoleGivenToGroupCall(groupId, roleId, appName, applicationId, _callback);
        }


        /**
         * Execute addAppInstanceTargetToAppAdminRoleGivenToGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addAppInstanceTargetToAppAdminRoleGivenToGroupWithHttpInfo(groupId, roleId, appName, applicationId);
        }

        /**
         * Execute addAppInstanceTargetToAppAdminRoleGivenToGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addAppInstanceTargetToAppAdminRoleGivenToGroupWithHttpInfo(groupId, roleId, appName, applicationId);
        }

        /**
         * Execute addAppInstanceTargetToAppAdminRoleGivenToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addAppInstanceTargetToAppAdminRoleGivenToGroupAsync(groupId, roleId, appName, applicationId, _callback);
        }
    }

    /**
     * Add App Instance Target to App Administrator Role given to a Group
     * Add App Instance Target to App Administrator Role given to a Group
     * @param groupId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @param applicationId  (required)
     * @return AddAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public AddAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder addAppInstanceTargetToAppAdminRoleGivenToGroup(String groupId, String roleId, String appName, String applicationId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
            

        return new AddAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder(groupId, roleId, appName, applicationId);
    }
    private okhttp3.Call addRuleCall(GroupRule groupRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRule;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRuleValidateBeforeCall(GroupRule groupRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupRule' is set
        if (groupRule == null) {
            throw new ApiException("Missing the required parameter 'groupRule' when calling addRule(Async)");
        }

        return addRuleCall(groupRule, _callback);

    }


    private ApiResponse<GroupRule> addRuleWithHttpInfo(GroupRule groupRule) throws ApiException {
        okhttp3.Call localVarCall = addRuleValidateBeforeCall(groupRule, null);
        Type localVarReturnType = new TypeToken<GroupRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addRuleAsync(GroupRule groupRule, final ApiCallback<GroupRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRuleValidateBeforeCall(groupRule, _callback);
        Type localVarReturnType = new TypeToken<GroupRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRuleRequestBuilder {
        private GroupRuleAction actions;
        private GroupRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private GroupRuleStatus status;
        private String type;

        private AddRuleRequestBuilder() {
        }

        /**
         * Set actions
         * @param actions  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder actions(GroupRuleAction actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder conditions(GroupRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder status(GroupRuleStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AddRuleRequestBuilder
         */
        public AddRuleRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for addRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupRule groupRule = buildBodyParams();
            return addRuleCall(groupRule, _callback);
        }

        private GroupRule buildBodyParams() {
            GroupRule groupRule = new GroupRule();
            groupRule.actions(this.actions);
            groupRule.conditions(this.conditions);
            groupRule.created(this.created);
            groupRule.id(this.id);
            groupRule.lastUpdated(this.lastUpdated);
            groupRule.name(this.name);
            groupRule.status(this.status);
            groupRule.type(this.type);
            return groupRule;
        }

        /**
         * Execute addRule request
         * @return GroupRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public GroupRule execute() throws ApiException {
            GroupRule groupRule = buildBodyParams();
            ApiResponse<GroupRule> localVarResp = addRuleWithHttpInfo(groupRule);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addRule request with HTTP info returned
         * @return ApiResponse&lt;GroupRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupRule> executeWithHttpInfo() throws ApiException {
            GroupRule groupRule = buildBodyParams();
            return addRuleWithHttpInfo(groupRule);
        }

        /**
         * Execute addRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupRule> _callback) throws ApiException {
            GroupRule groupRule = buildBodyParams();
            return addRuleAsync(groupRule, _callback);
        }
    }

    /**
     * Create Group Rule
     * Creates a group rule to dynamically add users to the specified group if they match the condition
     * @param groupRule  (required)
     * @return AddRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddRuleRequestBuilder addRule() throws IllegalArgumentException {
        return new AddRuleRequestBuilder();
    }
    private okhttp3.Call addUserToGroupCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/users/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToGroupValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addUserToGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addUserToGroup(Async)");
        }

        return addUserToGroupCall(groupId, userId, _callback);

    }


    private ApiResponse<Void> addUserToGroupWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addUserToGroupAsync(String groupId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddUserToGroupRequestBuilder {
        private final String groupId;
        private final String userId;

        private AddUserToGroupRequestBuilder(String groupId, String userId) {
            this.groupId = groupId;
            this.userId = userId;
        }

        /**
         * Build call for addUserToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addUserToGroupCall(groupId, userId, _callback);
        }


        /**
         * Execute addUserToGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addUserToGroupWithHttpInfo(groupId, userId);
        }

        /**
         * Execute addUserToGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addUserToGroupWithHttpInfo(groupId, userId);
        }

        /**
         * Execute addUserToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addUserToGroupAsync(groupId, userId, _callback);
        }
    }

    /**
     * Add User to Group
     * Adds a user to a group with &#39;OKTA_GROUP&#39; type.
     * @param groupId  (required)
     * @param userId  (required)
     * @return AddUserToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public AddUserToGroupRequestBuilder addUserToGroup(String groupId, String userId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new AddUserToGroupRequestBuilder(groupId, userId);
    }
    private okhttp3.Call assignRoleToGroupCall(String groupId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignRoleRequest;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disableNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disableNotifications", disableNotifications));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignRoleToGroupValidateBeforeCall(String groupId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling assignRoleToGroup(Async)");
        }

        // verify the required parameter 'assignRoleRequest' is set
        if (assignRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'assignRoleRequest' when calling assignRoleToGroup(Async)");
        }

        return assignRoleToGroupCall(groupId, assignRoleRequest, disableNotifications, _callback);

    }


    private ApiResponse<Role> assignRoleToGroupWithHttpInfo(String groupId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications) throws ApiException {
        okhttp3.Call localVarCall = assignRoleToGroupValidateBeforeCall(groupId, assignRoleRequest, disableNotifications, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignRoleToGroupAsync(String groupId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignRoleToGroupValidateBeforeCall(groupId, assignRoleRequest, disableNotifications, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignRoleToGroupRequestBuilder {
        private final String groupId;
        private RoleType type;
        private Boolean disableNotifications;

        private AssignRoleToGroupRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return AssignRoleToGroupRequestBuilder
         */
        public AssignRoleToGroupRequestBuilder type(RoleType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set disableNotifications
         * @param disableNotifications  (optional)
         * @return AssignRoleToGroupRequestBuilder
         */
        public AssignRoleToGroupRequestBuilder disableNotifications(Boolean disableNotifications) {
            this.disableNotifications = disableNotifications;
            return this;
        }
        
        /**
         * Build call for assignRoleToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            return assignRoleToGroupCall(groupId, assignRoleRequest, disableNotifications, _callback);
        }

        private AssignRoleRequest buildBodyParams() {
            AssignRoleRequest assignRoleRequest = new AssignRoleRequest();
            assignRoleRequest.type(this.type);
            return assignRoleRequest;
        }

        /**
         * Execute assignRoleToGroup request
         * @return Role
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Role execute() throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            ApiResponse<Role> localVarResp = assignRoleToGroupWithHttpInfo(groupId, assignRoleRequest, disableNotifications);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignRoleToGroup request with HTTP info returned
         * @return ApiResponse&lt;Role&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Role> executeWithHttpInfo() throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            return assignRoleToGroupWithHttpInfo(groupId, assignRoleRequest, disableNotifications);
        }

        /**
         * Execute assignRoleToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Role> _callback) throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            return assignRoleToGroupAsync(groupId, assignRoleRequest, disableNotifications, _callback);
        }
    }

    /**
     * 
     * Assigns a Role to a Group
     * @param groupId  (required)
     * @param assignRoleRequest  (required)
     * @return AssignRoleToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssignRoleToGroupRequestBuilder assignRoleToGroup(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new AssignRoleToGroupRequestBuilder(groupId);
    }
    private okhttp3.Call createNewGroupCall(Group group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = group;

        // create path and map variables
        String localVarPath = "/api/v1/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGroupValidateBeforeCall(Group group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling createNewGroup(Async)");
        }

        return createNewGroupCall(group, _callback);

    }


    private ApiResponse<Group> createNewGroupWithHttpInfo(Group group) throws ApiException {
        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(group, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewGroupAsync(Group group, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(group, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewGroupRequestBuilder {
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastMembershipUpdated;
        private OffsetDateTime lastUpdated;
        private List<String> objectClass;
        private GroupProfile profile;
        private GroupType type;

        private CreateNewGroupRequestBuilder() {
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastMembershipUpdated
         * @param lastMembershipUpdated  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder lastMembershipUpdated(OffsetDateTime lastMembershipUpdated) {
            this.lastMembershipUpdated = lastMembershipUpdated;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set objectClass
         * @param objectClass  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder objectClass(List<String> objectClass) {
            this.objectClass = objectClass;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder profile(GroupProfile profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder type(GroupType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createNewGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Group group = buildBodyParams();
            return createNewGroupCall(group, _callback);
        }

        private Group buildBodyParams() {
            Group group = new Group();
            group.embedded(this.embedded);
            group.links(this.links);
            group.created(this.created);
            group.id(this.id);
            group.lastMembershipUpdated(this.lastMembershipUpdated);
            group.lastUpdated(this.lastUpdated);
            group.objectClass(this.objectClass);
            group.profile(this.profile);
            group.type(this.type);
            return group;
        }

        /**
         * Execute createNewGroup request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Group execute() throws ApiException {
            Group group = buildBodyParams();
            ApiResponse<Group> localVarResp = createNewGroupWithHttpInfo(group);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewGroup request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            Group group = buildBodyParams();
            return createNewGroupWithHttpInfo(group);
        }

        /**
         * Execute createNewGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            Group group = buildBodyParams();
            return createNewGroupAsync(group, _callback);
        }
    }

    /**
     * Add Group
     * Adds a new group with &#x60;OKTA_GROUP&#x60; type to your organization.
     * @param group  (required)
     * @return CreateNewGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGroupRequestBuilder createNewGroup() throws IllegalArgumentException {
        return new CreateNewGroupRequestBuilder();
    }
    private okhttp3.Call deactivateRuleLifecycleCall(String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules/{ruleId}/lifecycle/deactivate"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateRuleLifecycleValidateBeforeCall(String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deactivateRuleLifecycle(Async)");
        }

        return deactivateRuleLifecycleCall(ruleId, _callback);

    }


    private ApiResponse<Void> deactivateRuleLifecycleWithHttpInfo(String ruleId) throws ApiException {
        okhttp3.Call localVarCall = deactivateRuleLifecycleValidateBeforeCall(ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateRuleLifecycleAsync(String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateRuleLifecycleValidateBeforeCall(ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateRuleLifecycleRequestBuilder {
        private final String ruleId;

        private DeactivateRuleLifecycleRequestBuilder(String ruleId) {
            this.ruleId = ruleId;
        }

        /**
         * Build call for deactivateRuleLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateRuleLifecycleCall(ruleId, _callback);
        }


        /**
         * Execute deactivateRuleLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateRuleLifecycleWithHttpInfo(ruleId);
        }

        /**
         * Execute deactivateRuleLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateRuleLifecycleWithHttpInfo(ruleId);
        }

        /**
         * Execute deactivateRuleLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateRuleLifecycleAsync(ruleId, _callback);
        }
    }

    /**
     * Deactivate a group Rule
     * Deactivates a specific group rule by id from your organization
     * @param ruleId  (required)
     * @return DeactivateRuleLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateRuleLifecycleRequestBuilder deactivateRuleLifecycle(String ruleId) throws IllegalArgumentException {
        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new DeactivateRuleLifecycleRequestBuilder(ruleId);
    }
    private okhttp3.Call deleteTargetGroupRolesCatalogAppsCall(String groupId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetGroupRolesCatalogAppsValidateBeforeCall(String groupId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteTargetGroupRolesCatalogApps(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteTargetGroupRolesCatalogApps(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling deleteTargetGroupRolesCatalogApps(Async)");
        }

        return deleteTargetGroupRolesCatalogAppsCall(groupId, roleId, appName, _callback);

    }


    private ApiResponse<Void> deleteTargetGroupRolesCatalogAppsWithHttpInfo(String groupId, String roleId, String appName) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetGroupRolesCatalogAppsValidateBeforeCall(groupId, roleId, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTargetGroupRolesCatalogAppsAsync(String groupId, String roleId, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetGroupRolesCatalogAppsValidateBeforeCall(groupId, roleId, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTargetGroupRolesCatalogAppsRequestBuilder {
        private final String groupId;
        private final String roleId;
        private final String appName;

        private DeleteTargetGroupRolesCatalogAppsRequestBuilder(String groupId, String roleId, String appName) {
            this.groupId = groupId;
            this.roleId = roleId;
            this.appName = appName;
        }

        /**
         * Build call for deleteTargetGroupRolesCatalogApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTargetGroupRolesCatalogAppsCall(groupId, roleId, appName, _callback);
        }


        /**
         * Execute deleteTargetGroupRolesCatalogApps request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTargetGroupRolesCatalogAppsWithHttpInfo(groupId, roleId, appName);
        }

        /**
         * Execute deleteTargetGroupRolesCatalogApps request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTargetGroupRolesCatalogAppsWithHttpInfo(groupId, roleId, appName);
        }

        /**
         * Execute deleteTargetGroupRolesCatalogApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTargetGroupRolesCatalogAppsAsync(groupId, roleId, appName, _callback);
        }
    }

    /**
     * 
     * Success
     * @param groupId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @return DeleteTargetGroupRolesCatalogAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTargetGroupRolesCatalogAppsRequestBuilder deleteTargetGroupRolesCatalogApps(String groupId, String roleId, String appName) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new DeleteTargetGroupRolesCatalogAppsRequestBuilder(groupId, roleId, appName);
    }
    private okhttp3.Call enumerateGroupMembersCall(String groupId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/users"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerateGroupMembersValidateBeforeCall(String groupId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling enumerateGroupMembers(Async)");
        }

        return enumerateGroupMembersCall(groupId, after, limit, _callback);

    }


    private ApiResponse<List<User>> enumerateGroupMembersWithHttpInfo(String groupId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = enumerateGroupMembersValidateBeforeCall(groupId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enumerateGroupMembersAsync(String groupId, String after, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerateGroupMembersValidateBeforeCall(groupId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnumerateGroupMembersRequestBuilder {
        private final String groupId;
        private String after;
        private Integer limit;

        private EnumerateGroupMembersRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of users (optional)
         * @return EnumerateGroupMembersRequestBuilder
         */
        public EnumerateGroupMembersRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of user results in a page (optional, default to 1000)
         * @return EnumerateGroupMembersRequestBuilder
         */
        public EnumerateGroupMembersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for enumerateGroupMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enumerateGroupMembersCall(groupId, after, limit, _callback);
        }


        /**
         * Execute enumerateGroupMembers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = enumerateGroupMembersWithHttpInfo(groupId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enumerateGroupMembers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return enumerateGroupMembersWithHttpInfo(groupId, after, limit);
        }

        /**
         * Execute enumerateGroupMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return enumerateGroupMembersAsync(groupId, after, limit, _callback);
        }
    }

    /**
     * List Group Members
     * Enumerates all users that are a member of a group.
     * @param groupId  (required)
     * @return EnumerateGroupMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnumerateGroupMembersRequestBuilder enumerateGroupMembers(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new EnumerateGroupMembersRequestBuilder(groupId);
    }
    private okhttp3.Call getAllRulesCall(Integer limit, String after, String search, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRulesValidateBeforeCall(Integer limit, String after, String search, String expand, final ApiCallback _callback) throws ApiException {
        return getAllRulesCall(limit, after, search, expand, _callback);

    }


    private ApiResponse<List<GroupRule>> getAllRulesWithHttpInfo(Integer limit, String after, String search, String expand) throws ApiException {
        okhttp3.Call localVarCall = getAllRulesValidateBeforeCall(limit, after, search, expand, null);
        Type localVarReturnType = new TypeToken<List<GroupRule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllRulesAsync(Integer limit, String after, String search, String expand, final ApiCallback<List<GroupRule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRulesValidateBeforeCall(limit, after, search, expand, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRulesRequestBuilder {
        private Integer limit;
        private String after;
        private String search;
        private String expand;

        private GetAllRulesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Specifies the number of rule results in a page (optional, default to 50)
         * @return GetAllRulesRequestBuilder
         */
        public GetAllRulesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of rules (optional)
         * @return GetAllRulesRequestBuilder
         */
        public GetAllRulesRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set search
         * @param search Specifies the keyword to search fules for (optional)
         * @return GetAllRulesRequestBuilder
         */
        public GetAllRulesRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set expand
         * @param expand If specified as &#x60;groupIdToGroupNameMap&#x60;, then show group names (optional)
         * @return GetAllRulesRequestBuilder
         */
        public GetAllRulesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getAllRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllRulesCall(limit, after, search, expand, _callback);
        }


        /**
         * Execute getAllRules request
         * @return List&lt;GroupRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<GroupRule> execute() throws ApiException {
            ApiResponse<List<GroupRule>> localVarResp = getAllRulesWithHttpInfo(limit, after, search, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllRules request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GroupRule&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GroupRule>> executeWithHttpInfo() throws ApiException {
            return getAllRulesWithHttpInfo(limit, after, search, expand);
        }

        /**
         * Execute getAllRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GroupRule>> _callback) throws ApiException {
            return getAllRulesAsync(limit, after, search, expand, _callback);
        }
    }

    /**
     * List Group Rules
     * Lists all group rules for your organization.
     * @return GetAllRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRulesRequestBuilder getAllRules() throws IllegalArgumentException {
        return new GetAllRulesRequestBuilder();
    }
    private okhttp3.Call getGroupRuleByIdCall(String ruleId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupRuleByIdValidateBeforeCall(String ruleId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getGroupRuleById(Async)");
        }

        return getGroupRuleByIdCall(ruleId, expand, _callback);

    }


    private ApiResponse<GroupRule> getGroupRuleByIdWithHttpInfo(String ruleId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getGroupRuleByIdValidateBeforeCall(ruleId, expand, null);
        Type localVarReturnType = new TypeToken<GroupRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupRuleByIdAsync(String ruleId, String expand, final ApiCallback<GroupRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupRuleByIdValidateBeforeCall(ruleId, expand, _callback);
        Type localVarReturnType = new TypeToken<GroupRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupRuleByIdRequestBuilder {
        private final String ruleId;
        private String expand;

        private GetGroupRuleByIdRequestBuilder(String ruleId) {
            this.ruleId = ruleId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetGroupRuleByIdRequestBuilder
         */
        public GetGroupRuleByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getGroupRuleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupRuleByIdCall(ruleId, expand, _callback);
        }


        /**
         * Execute getGroupRuleById request
         * @return GroupRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public GroupRule execute() throws ApiException {
            ApiResponse<GroupRule> localVarResp = getGroupRuleByIdWithHttpInfo(ruleId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupRuleById request with HTTP info returned
         * @return ApiResponse&lt;GroupRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupRule> executeWithHttpInfo() throws ApiException {
            return getGroupRuleByIdWithHttpInfo(ruleId, expand);
        }

        /**
         * Execute getGroupRuleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupRule> _callback) throws ApiException {
            return getGroupRuleByIdAsync(ruleId, expand, _callback);
        }
    }

    /**
     * Get Group Rule
     * Fetches a specific group rule by id from your organization
     * @param ruleId  (required)
     * @return GetGroupRuleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupRuleByIdRequestBuilder getGroupRuleById(String ruleId) throws IllegalArgumentException {
        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new GetGroupRuleByIdRequestBuilder(ruleId);
    }
    private okhttp3.Call getRoleListCall(String groupId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleListValidateBeforeCall(String groupId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getRoleList(Async)");
        }

        return getRoleListCall(groupId, expand, _callback);

    }


    private ApiResponse<List<Role>> getRoleListWithHttpInfo(String groupId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getRoleListValidateBeforeCall(groupId, expand, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleListAsync(String groupId, String expand, final ApiCallback<List<Role>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleListValidateBeforeCall(groupId, expand, _callback);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleListRequestBuilder {
        private final String groupId;
        private String expand;

        private GetRoleListRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetRoleListRequestBuilder
         */
        public GetRoleListRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getRoleList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleListCall(groupId, expand, _callback);
        }


        /**
         * Execute getRoleList request
         * @return List&lt;Role&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Role> execute() throws ApiException {
            ApiResponse<List<Role>> localVarResp = getRoleListWithHttpInfo(groupId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Role&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Role>> executeWithHttpInfo() throws ApiException {
            return getRoleListWithHttpInfo(groupId, expand);
        }

        /**
         * Execute getRoleList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Role>> _callback) throws ApiException {
            return getRoleListAsync(groupId, expand, _callback);
        }
    }

    /**
     * 
     * Success
     * @param groupId  (required)
     * @return GetRoleListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleListRequestBuilder getRoleList(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetRoleListRequestBuilder(groupId);
    }
    private okhttp3.Call getRoleSuccessCall(String groupId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleSuccessValidateBeforeCall(String groupId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getRoleSuccess(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleSuccess(Async)");
        }

        return getRoleSuccessCall(groupId, roleId, _callback);

    }


    private ApiResponse<Role> getRoleSuccessWithHttpInfo(String groupId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = getRoleSuccessValidateBeforeCall(groupId, roleId, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleSuccessAsync(String groupId, String roleId, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleSuccessValidateBeforeCall(groupId, roleId, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleSuccessRequestBuilder {
        private final String groupId;
        private final String roleId;

        private GetRoleSuccessRequestBuilder(String groupId, String roleId) {
            this.groupId = groupId;
            this.roleId = roleId;
        }

        /**
         * Build call for getRoleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleSuccessCall(groupId, roleId, _callback);
        }


        /**
         * Execute getRoleSuccess request
         * @return Role
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Role execute() throws ApiException {
            ApiResponse<Role> localVarResp = getRoleSuccessWithHttpInfo(groupId, roleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleSuccess request with HTTP info returned
         * @return ApiResponse&lt;Role&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Role> executeWithHttpInfo() throws ApiException {
            return getRoleSuccessWithHttpInfo(groupId, roleId);
        }

        /**
         * Execute getRoleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Role> _callback) throws ApiException {
            return getRoleSuccessAsync(groupId, roleId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param groupId  (required)
     * @param roleId  (required)
     * @return GetRoleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleSuccessRequestBuilder getRoleSuccess(String groupId, String roleId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new GetRoleSuccessRequestBuilder(groupId, roleId);
    }
    private okhttp3.Call getRoleTargetsCatalogAppsCall(String groupId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleTargetsCatalogAppsValidateBeforeCall(String groupId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getRoleTargetsCatalogApps(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleTargetsCatalogApps(Async)");
        }

        return getRoleTargetsCatalogAppsCall(groupId, roleId, after, limit, _callback);

    }


    private ApiResponse<List<CatalogApplication>> getRoleTargetsCatalogAppsWithHttpInfo(String groupId, String roleId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRoleTargetsCatalogAppsValidateBeforeCall(groupId, roleId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<CatalogApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleTargetsCatalogAppsAsync(String groupId, String roleId, String after, Integer limit, final ApiCallback<List<CatalogApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleTargetsCatalogAppsValidateBeforeCall(groupId, roleId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<CatalogApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleTargetsCatalogAppsRequestBuilder {
        private final String groupId;
        private final String roleId;
        private String after;
        private Integer limit;

        private GetRoleTargetsCatalogAppsRequestBuilder(String groupId, String roleId) {
            this.groupId = groupId;
            this.roleId = roleId;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return GetRoleTargetsCatalogAppsRequestBuilder
         */
        public GetRoleTargetsCatalogAppsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetRoleTargetsCatalogAppsRequestBuilder
         */
        public GetRoleTargetsCatalogAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getRoleTargetsCatalogApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleTargetsCatalogAppsCall(groupId, roleId, after, limit, _callback);
        }


        /**
         * Execute getRoleTargetsCatalogApps request
         * @return List&lt;CatalogApplication&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<CatalogApplication> execute() throws ApiException {
            ApiResponse<List<CatalogApplication>> localVarResp = getRoleTargetsCatalogAppsWithHttpInfo(groupId, roleId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleTargetsCatalogApps request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CatalogApplication&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CatalogApplication>> executeWithHttpInfo() throws ApiException {
            return getRoleTargetsCatalogAppsWithHttpInfo(groupId, roleId, after, limit);
        }

        /**
         * Execute getRoleTargetsCatalogApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CatalogApplication>> _callback) throws ApiException {
            return getRoleTargetsCatalogAppsAsync(groupId, roleId, after, limit, _callback);
        }
    }

    /**
     * 
     * Lists all App targets for an &#x60;APP_ADMIN&#x60; Role assigned to a Group. This methods return list may include full Applications or Instances. The response for an instance will have an &#x60;ID&#x60; value, while Application will not have an ID.
     * @param groupId  (required)
     * @param roleId  (required)
     * @return GetRoleTargetsCatalogAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleTargetsCatalogAppsRequestBuilder getRoleTargetsCatalogApps(String groupId, String roleId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new GetRoleTargetsCatalogAppsRequestBuilder(groupId, roleId);
    }
    private okhttp3.Call getRulesCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRulesValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getRules(Async)");
        }

        return getRulesCall(groupId, _callback);

    }


    private ApiResponse<Group> getRulesWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getRulesValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRulesAsync(String groupId, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRulesValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRulesRequestBuilder {
        private final String groupId;

        private GetRulesRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for getRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRulesCall(groupId, _callback);
        }


        /**
         * Execute getRules request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Group execute() throws ApiException {
            ApiResponse<Group> localVarResp = getRulesWithHttpInfo(groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRules request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            return getRulesWithHttpInfo(groupId);
        }

        /**
         * Execute getRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            return getRulesAsync(groupId, _callback);
        }
    }

    /**
     * List Group Rules
     * Fetches a group from your organization.
     * @param groupId  (required)
     * @return GetRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRulesRequestBuilder getRules(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetRulesRequestBuilder(groupId);
    }
    private okhttp3.Call listCall(String q, String filter, String after, Integer limit, String expand, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String q, String filter, String after, Integer limit, String expand, String search, final ApiCallback _callback) throws ApiException {
        return listCall(q, filter, after, limit, expand, search, _callback);

    }


    private ApiResponse<List<Group>> listWithHttpInfo(String q, String filter, String after, Integer limit, String expand, String search) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(q, filter, after, limit, expand, search, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String q, String filter, String after, Integer limit, String expand, String search, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(q, filter, after, limit, expand, search, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String q;
        private String filter;
        private String after;
        private Integer limit;
        private String expand;
        private String search;

        private ListRequestBuilder() {
        }

        /**
         * Set q
         * @param q Searches the name property of groups for matching value (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Filter expression for groups (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of groups (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of group results in a page (optional, default to 10000)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set expand
         * @param expand If specified, it causes additional metadata to be included in the response. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set search
         * @param search Searches for groups with a supported filtering expression for all attributes except for _embedded, _links, and objectClass (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(q, filter, after, limit, expand, search, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Group> execute() throws ApiException {
            ApiResponse<List<Group>> localVarResp = listWithHttpInfo(q, filter, after, limit, expand, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Group&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Group>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(q, filter, after, limit, expand, search);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Group>> _callback) throws ApiException {
            return listAsync(q, filter, after, limit, expand, search, _callback);
        }
    }

    /**
     * List Groups
     * Enumerates groups in your organization with pagination. A subset of groups can be returned that match a supported filter expression or query.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listAssignedAppsCall(String groupId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/apps"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignedAppsValidateBeforeCall(String groupId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listAssignedApps(Async)");
        }

        return listAssignedAppsCall(groupId, after, limit, _callback);

    }


    private ApiResponse<List<Application>> listAssignedAppsWithHttpInfo(String groupId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAssignedAppsValidateBeforeCall(groupId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignedAppsAsync(String groupId, String after, Integer limit, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignedAppsValidateBeforeCall(groupId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignedAppsRequestBuilder {
        private final String groupId;
        private String after;
        private Integer limit;

        private ListAssignedAppsRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of apps (optional)
         * @return ListAssignedAppsRequestBuilder
         */
        public ListAssignedAppsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of app results for a page (optional, default to 20)
         * @return ListAssignedAppsRequestBuilder
         */
        public ListAssignedAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAssignedApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignedAppsCall(groupId, after, limit, _callback);
        }


        /**
         * Execute listAssignedApps request
         * @return List&lt;Application&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Application> execute() throws ApiException {
            ApiResponse<List<Application>> localVarResp = listAssignedAppsWithHttpInfo(groupId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignedApps request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Application&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Application>> executeWithHttpInfo() throws ApiException {
            return listAssignedAppsWithHttpInfo(groupId, after, limit);
        }

        /**
         * Execute listAssignedApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Application>> _callback) throws ApiException {
            return listAssignedAppsAsync(groupId, after, limit, _callback);
        }
    }

    /**
     * List Assigned Applications
     * Enumerates all applications that are assigned to a group.
     * @param groupId  (required)
     * @return ListAssignedAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignedAppsRequestBuilder listAssignedApps(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new ListAssignedAppsRequestBuilder(groupId);
    }
    private okhttp3.Call listRoleTargetsGroupsCall(String groupId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoleTargetsGroupsValidateBeforeCall(String groupId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listRoleTargetsGroups(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling listRoleTargetsGroups(Async)");
        }

        return listRoleTargetsGroupsCall(groupId, roleId, after, limit, _callback);

    }


    private ApiResponse<List<Group>> listRoleTargetsGroupsWithHttpInfo(String groupId, String roleId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listRoleTargetsGroupsValidateBeforeCall(groupId, roleId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRoleTargetsGroupsAsync(String groupId, String roleId, String after, Integer limit, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoleTargetsGroupsValidateBeforeCall(groupId, roleId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRoleTargetsGroupsRequestBuilder {
        private final String groupId;
        private final String roleId;
        private String after;
        private Integer limit;

        private ListRoleTargetsGroupsRequestBuilder(String groupId, String roleId) {
            this.groupId = groupId;
            this.roleId = roleId;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return ListRoleTargetsGroupsRequestBuilder
         */
        public ListRoleTargetsGroupsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListRoleTargetsGroupsRequestBuilder
         */
        public ListRoleTargetsGroupsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listRoleTargetsGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRoleTargetsGroupsCall(groupId, roleId, after, limit, _callback);
        }


        /**
         * Execute listRoleTargetsGroups request
         * @return List&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Group> execute() throws ApiException {
            ApiResponse<List<Group>> localVarResp = listRoleTargetsGroupsWithHttpInfo(groupId, roleId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRoleTargetsGroups request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Group&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Group>> executeWithHttpInfo() throws ApiException {
            return listRoleTargetsGroupsWithHttpInfo(groupId, roleId, after, limit);
        }

        /**
         * Execute listRoleTargetsGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Group>> _callback) throws ApiException {
            return listRoleTargetsGroupsAsync(groupId, roleId, after, limit, _callback);
        }
    }

    /**
     * 
     * Success
     * @param groupId  (required)
     * @param roleId  (required)
     * @return ListRoleTargetsGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRoleTargetsGroupsRequestBuilder listRoleTargetsGroups(String groupId, String roleId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new ListRoleTargetsGroupsRequestBuilder(groupId, roleId);
    }
    private okhttp3.Call removeAppInstanceTargetToAppAdminRoleGivenToGroupCall(String groupId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAppInstanceTargetToAppAdminRoleGivenToGroupValidateBeforeCall(String groupId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling removeAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling removeAppInstanceTargetToAppAdminRoleGivenToGroup(Async)");
        }

        return removeAppInstanceTargetToAppAdminRoleGivenToGroupCall(groupId, roleId, appName, applicationId, _callback);

    }


    private ApiResponse<Void> removeAppInstanceTargetToAppAdminRoleGivenToGroupWithHttpInfo(String groupId, String roleId, String appName, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = removeAppInstanceTargetToAppAdminRoleGivenToGroupValidateBeforeCall(groupId, roleId, appName, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAppInstanceTargetToAppAdminRoleGivenToGroupAsync(String groupId, String roleId, String appName, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAppInstanceTargetToAppAdminRoleGivenToGroupValidateBeforeCall(groupId, roleId, appName, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder {
        private final String groupId;
        private final String roleId;
        private final String appName;
        private final String applicationId;

        private RemoveAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder(String groupId, String roleId, String appName, String applicationId) {
            this.groupId = groupId;
            this.roleId = roleId;
            this.appName = appName;
            this.applicationId = applicationId;
        }

        /**
         * Build call for removeAppInstanceTargetToAppAdminRoleGivenToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAppInstanceTargetToAppAdminRoleGivenToGroupCall(groupId, roleId, appName, applicationId, _callback);
        }


        /**
         * Execute removeAppInstanceTargetToAppAdminRoleGivenToGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAppInstanceTargetToAppAdminRoleGivenToGroupWithHttpInfo(groupId, roleId, appName, applicationId);
        }

        /**
         * Execute removeAppInstanceTargetToAppAdminRoleGivenToGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAppInstanceTargetToAppAdminRoleGivenToGroupWithHttpInfo(groupId, roleId, appName, applicationId);
        }

        /**
         * Execute removeAppInstanceTargetToAppAdminRoleGivenToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAppInstanceTargetToAppAdminRoleGivenToGroupAsync(groupId, roleId, appName, applicationId, _callback);
        }
    }

    /**
     * Remove App Instance Target to App Administrator Role given to a Group
     * Remove App Instance Target to App Administrator Role given to a Group
     * @param groupId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @param applicationId  (required)
     * @return RemoveAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder removeAppInstanceTargetToAppAdminRoleGivenToGroup(String groupId, String roleId, String appName, String applicationId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
            

        return new RemoveAppInstanceTargetToAppAdminRoleGivenToGroupRequestBuilder(groupId, roleId, appName, applicationId);
    }
    private okhttp3.Call removeOperationCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOperationValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeOperation(Async)");
        }

        return removeOperationCall(groupId, _callback);

    }


    private ApiResponse<Void> removeOperationWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = removeOperationValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeOperationAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOperationValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveOperationRequestBuilder {
        private final String groupId;

        private RemoveOperationRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for removeOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeOperationCall(groupId, _callback);
        }


        /**
         * Execute removeOperation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeOperationWithHttpInfo(groupId);
        }

        /**
         * Execute removeOperation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeOperationWithHttpInfo(groupId);
        }

        /**
         * Execute removeOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeOperationAsync(groupId, _callback);
        }
    }

    /**
     * Remove Group
     * Removes a group with &#x60;OKTA_GROUP&#x60; type from your organization.
     * @param groupId  (required)
     * @return RemoveOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveOperationRequestBuilder removeOperation(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveOperationRequestBuilder(groupId);
    }
    private okhttp3.Call removeRuleByIdCall(String ruleId, Boolean removeUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (removeUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeUsers", removeUsers));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRuleByIdValidateBeforeCall(String ruleId, Boolean removeUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling removeRuleById(Async)");
        }

        return removeRuleByIdCall(ruleId, removeUsers, _callback);

    }


    private ApiResponse<Void> removeRuleByIdWithHttpInfo(String ruleId, Boolean removeUsers) throws ApiException {
        okhttp3.Call localVarCall = removeRuleByIdValidateBeforeCall(ruleId, removeUsers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeRuleByIdAsync(String ruleId, Boolean removeUsers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRuleByIdValidateBeforeCall(ruleId, removeUsers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRuleByIdRequestBuilder {
        private final String ruleId;
        private Boolean removeUsers;

        private RemoveRuleByIdRequestBuilder(String ruleId) {
            this.ruleId = ruleId;
        }

        /**
         * Set removeUsers
         * @param removeUsers Indicates whether to keep or remove users from groups assigned by this rule. (optional)
         * @return RemoveRuleByIdRequestBuilder
         */
        public RemoveRuleByIdRequestBuilder removeUsers(Boolean removeUsers) {
            this.removeUsers = removeUsers;
            return this;
        }
        
        /**
         * Build call for removeRuleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeRuleByIdCall(ruleId, removeUsers, _callback);
        }


        /**
         * Execute removeRuleById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeRuleByIdWithHttpInfo(ruleId, removeUsers);
        }

        /**
         * Execute removeRuleById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeRuleByIdWithHttpInfo(ruleId, removeUsers);
        }

        /**
         * Execute removeRuleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeRuleByIdAsync(ruleId, removeUsers, _callback);
        }
    }

    /**
     * Delete a group Rule
     * Removes a specific group rule by id from your organization
     * @param ruleId  (required)
     * @return RemoveRuleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRuleByIdRequestBuilder removeRuleById(String ruleId) throws IllegalArgumentException {
        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new RemoveRuleByIdRequestBuilder(ruleId);
    }
    private okhttp3.Call removeTargetGroupCall(String groupId, String roleId, String targetGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "targetGroupId" + "}", localVarApiClient.escapeString(targetGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTargetGroupValidateBeforeCall(String groupId, String roleId, String targetGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeTargetGroup(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeTargetGroup(Async)");
        }

        // verify the required parameter 'targetGroupId' is set
        if (targetGroupId == null) {
            throw new ApiException("Missing the required parameter 'targetGroupId' when calling removeTargetGroup(Async)");
        }

        return removeTargetGroupCall(groupId, roleId, targetGroupId, _callback);

    }


    private ApiResponse<Void> removeTargetGroupWithHttpInfo(String groupId, String roleId, String targetGroupId) throws ApiException {
        okhttp3.Call localVarCall = removeTargetGroupValidateBeforeCall(groupId, roleId, targetGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTargetGroupAsync(String groupId, String roleId, String targetGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTargetGroupValidateBeforeCall(groupId, roleId, targetGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTargetGroupRequestBuilder {
        private final String groupId;
        private final String roleId;
        private final String targetGroupId;

        private RemoveTargetGroupRequestBuilder(String groupId, String roleId, String targetGroupId) {
            this.groupId = groupId;
            this.roleId = roleId;
            this.targetGroupId = targetGroupId;
        }

        /**
         * Build call for removeTargetGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTargetGroupCall(groupId, roleId, targetGroupId, _callback);
        }


        /**
         * Execute removeTargetGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTargetGroupWithHttpInfo(groupId, roleId, targetGroupId);
        }

        /**
         * Execute removeTargetGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTargetGroupWithHttpInfo(groupId, roleId, targetGroupId);
        }

        /**
         * Execute removeTargetGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTargetGroupAsync(groupId, roleId, targetGroupId, _callback);
        }
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param roleId  (required)
     * @param targetGroupId  (required)
     * @return RemoveTargetGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTargetGroupRequestBuilder removeTargetGroup(String groupId, String roleId, String targetGroupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (targetGroupId == null) throw new IllegalArgumentException("\"targetGroupId\" is required but got null");
            

        return new RemoveTargetGroupRequestBuilder(groupId, roleId, targetGroupId);
    }
    private okhttp3.Call removeUserFromCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/users/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeUserFrom(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFrom(Async)");
        }

        return removeUserFromCall(groupId, userId, _callback);

    }


    private ApiResponse<Void> removeUserFromWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUserFromAsync(String groupId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUserFromRequestBuilder {
        private final String groupId;
        private final String userId;

        private RemoveUserFromRequestBuilder(String groupId, String userId) {
            this.groupId = groupId;
            this.userId = userId;
        }

        /**
         * Build call for removeUserFrom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserFromCall(groupId, userId, _callback);
        }


        /**
         * Execute removeUserFrom request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUserFromWithHttpInfo(groupId, userId);
        }

        /**
         * Execute removeUserFrom request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUserFromWithHttpInfo(groupId, userId);
        }

        /**
         * Execute removeUserFrom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUserFromAsync(groupId, userId, _callback);
        }
    }

    /**
     * Remove User from Group
     * Removes a user from a group with &#39;OKTA_GROUP&#39; type.
     * @param groupId  (required)
     * @param userId  (required)
     * @return RemoveUserFromRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserFromRequestBuilder removeUserFrom(String groupId, String userId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveUserFromRequestBuilder(groupId, userId);
    }
    private okhttp3.Call unassignRoleCall(String groupId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignRoleValidateBeforeCall(String groupId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling unassignRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling unassignRole(Async)");
        }

        return unassignRoleCall(groupId, roleId, _callback);

    }


    private ApiResponse<Void> unassignRoleWithHttpInfo(String groupId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(groupId, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unassignRoleAsync(String groupId, String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(groupId, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnassignRoleRequestBuilder {
        private final String groupId;
        private final String roleId;

        private UnassignRoleRequestBuilder(String groupId, String roleId) {
            this.groupId = groupId;
            this.roleId = roleId;
        }

        /**
         * Build call for unassignRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unassignRoleCall(groupId, roleId, _callback);
        }


        /**
         * Execute unassignRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unassignRoleWithHttpInfo(groupId, roleId);
        }

        /**
         * Execute unassignRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unassignRoleWithHttpInfo(groupId, roleId);
        }

        /**
         * Execute unassignRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unassignRoleAsync(groupId, roleId, _callback);
        }
    }

    /**
     * 
     * Unassigns a Role from a Group
     * @param groupId  (required)
     * @param roleId  (required)
     * @return UnassignRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public UnassignRoleRequestBuilder unassignRole(String groupId, String roleId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new UnassignRoleRequestBuilder(groupId, roleId);
    }
    private okhttp3.Call updateProfileCall(String groupId, Group group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = group;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileValidateBeforeCall(String groupId, Group group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateProfile(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling updateProfile(Async)");
        }

        return updateProfileCall(groupId, group, _callback);

    }


    private ApiResponse<Group> updateProfileWithHttpInfo(String groupId, Group group) throws ApiException {
        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(groupId, group, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProfileAsync(String groupId, Group group, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(groupId, group, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProfileRequestBuilder {
        private final String groupId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastMembershipUpdated;
        private OffsetDateTime lastUpdated;
        private List<String> objectClass;
        private GroupProfile profile;
        private GroupType type;

        private UpdateProfileRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastMembershipUpdated
         * @param lastMembershipUpdated  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder lastMembershipUpdated(OffsetDateTime lastMembershipUpdated) {
            this.lastMembershipUpdated = lastMembershipUpdated;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set objectClass
         * @param objectClass  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder objectClass(List<String> objectClass) {
            this.objectClass = objectClass;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder profile(GroupProfile profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder type(GroupType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Group group = buildBodyParams();
            return updateProfileCall(groupId, group, _callback);
        }

        private Group buildBodyParams() {
            Group group = new Group();
            group.embedded(this.embedded);
            group.links(this.links);
            group.created(this.created);
            group.id(this.id);
            group.lastMembershipUpdated(this.lastMembershipUpdated);
            group.lastUpdated(this.lastUpdated);
            group.objectClass(this.objectClass);
            group.profile(this.profile);
            group.type(this.type);
            return group;
        }

        /**
         * Execute updateProfile request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Group execute() throws ApiException {
            Group group = buildBodyParams();
            ApiResponse<Group> localVarResp = updateProfileWithHttpInfo(groupId, group);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProfile request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            Group group = buildBodyParams();
            return updateProfileWithHttpInfo(groupId, group);
        }

        /**
         * Execute updateProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            Group group = buildBodyParams();
            return updateProfileAsync(groupId, group, _callback);
        }
    }

    /**
     * Update Group
     * Updates the profile for a group with &#x60;OKTA_GROUP&#x60; type from your organization.
     * @param groupId  (required)
     * @param group  (required)
     * @return UpdateProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProfileRequestBuilder updateProfile(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateProfileRequestBuilder(groupId);
    }
    private okhttp3.Call updateRolesCatalogAppsCall(String groupId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRolesCatalogAppsValidateBeforeCall(String groupId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateRolesCatalogApps(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRolesCatalogApps(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling updateRolesCatalogApps(Async)");
        }

        return updateRolesCatalogAppsCall(groupId, roleId, appName, _callback);

    }


    private ApiResponse<Void> updateRolesCatalogAppsWithHttpInfo(String groupId, String roleId, String appName) throws ApiException {
        okhttp3.Call localVarCall = updateRolesCatalogAppsValidateBeforeCall(groupId, roleId, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRolesCatalogAppsAsync(String groupId, String roleId, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRolesCatalogAppsValidateBeforeCall(groupId, roleId, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRolesCatalogAppsRequestBuilder {
        private final String groupId;
        private final String roleId;
        private final String appName;

        private UpdateRolesCatalogAppsRequestBuilder(String groupId, String roleId, String appName) {
            this.groupId = groupId;
            this.roleId = roleId;
            this.appName = appName;
        }

        /**
         * Build call for updateRolesCatalogApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRolesCatalogAppsCall(groupId, roleId, appName, _callback);
        }


        /**
         * Execute updateRolesCatalogApps request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateRolesCatalogAppsWithHttpInfo(groupId, roleId, appName);
        }

        /**
         * Execute updateRolesCatalogApps request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateRolesCatalogAppsWithHttpInfo(groupId, roleId, appName);
        }

        /**
         * Execute updateRolesCatalogApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateRolesCatalogAppsAsync(groupId, roleId, appName, _callback);
        }
    }

    /**
     * 
     * Success
     * @param groupId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @return UpdateRolesCatalogAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRolesCatalogAppsRequestBuilder updateRolesCatalogApps(String groupId, String roleId, String appName) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new UpdateRolesCatalogAppsRequestBuilder(groupId, roleId, appName);
    }
    private okhttp3.Call updateRuleCall(String ruleId, GroupRule groupRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRule;

        // create path and map variables
        String localVarPath = "/api/v1/groups/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleValidateBeforeCall(String ruleId, GroupRule groupRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }

        // verify the required parameter 'groupRule' is set
        if (groupRule == null) {
            throw new ApiException("Missing the required parameter 'groupRule' when calling updateRule(Async)");
        }

        return updateRuleCall(ruleId, groupRule, _callback);

    }


    private ApiResponse<GroupRule> updateRuleWithHttpInfo(String ruleId, GroupRule groupRule) throws ApiException {
        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(ruleId, groupRule, null);
        Type localVarReturnType = new TypeToken<GroupRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRuleAsync(String ruleId, GroupRule groupRule, final ApiCallback<GroupRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(ruleId, groupRule, _callback);
        Type localVarReturnType = new TypeToken<GroupRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRuleRequestBuilder {
        private final String ruleId;
        private GroupRuleAction actions;
        private GroupRuleConditions conditions;
        private OffsetDateTime created;
        private String id;
        private OffsetDateTime lastUpdated;
        private String name;
        private GroupRuleStatus status;
        private String type;

        private UpdateRuleRequestBuilder(String ruleId) {
            this.ruleId = ruleId;
        }

        /**
         * Set actions
         * @param actions  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder actions(GroupRuleAction actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set conditions
         * @param conditions  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder conditions(GroupRuleConditions conditions) {
            this.conditions = conditions;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder status(GroupRuleStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateRuleRequestBuilder
         */
        public UpdateRuleRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupRule groupRule = buildBodyParams();
            return updateRuleCall(ruleId, groupRule, _callback);
        }

        private GroupRule buildBodyParams() {
            GroupRule groupRule = new GroupRule();
            groupRule.actions(this.actions);
            groupRule.conditions(this.conditions);
            groupRule.created(this.created);
            groupRule.id(this.id);
            groupRule.lastUpdated(this.lastUpdated);
            groupRule.name(this.name);
            groupRule.status(this.status);
            groupRule.type(this.type);
            return groupRule;
        }

        /**
         * Execute updateRule request
         * @return GroupRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public GroupRule execute() throws ApiException {
            GroupRule groupRule = buildBodyParams();
            ApiResponse<GroupRule> localVarResp = updateRuleWithHttpInfo(ruleId, groupRule);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRule request with HTTP info returned
         * @return ApiResponse&lt;GroupRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupRule> executeWithHttpInfo() throws ApiException {
            GroupRule groupRule = buildBodyParams();
            return updateRuleWithHttpInfo(ruleId, groupRule);
        }

        /**
         * Execute updateRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupRule> _callback) throws ApiException {
            GroupRule groupRule = buildBodyParams();
            return updateRuleAsync(ruleId, groupRule, _callback);
        }
    }

    /**
     * 
     * Updates a group rule. Only &#x60;INACTIVE&#x60; rules can be updated.
     * @param ruleId  (required)
     * @param groupRule  (required)
     * @return UpdateRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRuleRequestBuilder updateRule(String ruleId) throws IllegalArgumentException {
        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new UpdateRuleRequestBuilder(ruleId);
    }
    private okhttp3.Call updateTargetGroupsRoleCall(String groupId, String roleId, String targetGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "targetGroupId" + "}", localVarApiClient.escapeString(targetGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetGroupsRoleValidateBeforeCall(String groupId, String roleId, String targetGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateTargetGroupsRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateTargetGroupsRole(Async)");
        }

        // verify the required parameter 'targetGroupId' is set
        if (targetGroupId == null) {
            throw new ApiException("Missing the required parameter 'targetGroupId' when calling updateTargetGroupsRole(Async)");
        }

        return updateTargetGroupsRoleCall(groupId, roleId, targetGroupId, _callback);

    }


    private ApiResponse<Void> updateTargetGroupsRoleWithHttpInfo(String groupId, String roleId, String targetGroupId) throws ApiException {
        okhttp3.Call localVarCall = updateTargetGroupsRoleValidateBeforeCall(groupId, roleId, targetGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTargetGroupsRoleAsync(String groupId, String roleId, String targetGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetGroupsRoleValidateBeforeCall(groupId, roleId, targetGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTargetGroupsRoleRequestBuilder {
        private final String groupId;
        private final String roleId;
        private final String targetGroupId;

        private UpdateTargetGroupsRoleRequestBuilder(String groupId, String roleId, String targetGroupId) {
            this.groupId = groupId;
            this.roleId = roleId;
            this.targetGroupId = targetGroupId;
        }

        /**
         * Build call for updateTargetGroupsRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTargetGroupsRoleCall(groupId, roleId, targetGroupId, _callback);
        }


        /**
         * Execute updateTargetGroupsRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateTargetGroupsRoleWithHttpInfo(groupId, roleId, targetGroupId);
        }

        /**
         * Execute updateTargetGroupsRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateTargetGroupsRoleWithHttpInfo(groupId, roleId, targetGroupId);
        }

        /**
         * Execute updateTargetGroupsRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateTargetGroupsRoleAsync(groupId, roleId, targetGroupId, _callback);
        }
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param roleId  (required)
     * @param targetGroupId  (required)
     * @return UpdateTargetGroupsRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetGroupsRoleRequestBuilder updateTargetGroupsRole(String groupId, String roleId, String targetGroupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (targetGroupId == null) throw new IllegalArgumentException("\"targetGroupId\" is required but got null");
            

        return new UpdateTargetGroupsRoleRequestBuilder(groupId, roleId, targetGroupId);
    }
}
