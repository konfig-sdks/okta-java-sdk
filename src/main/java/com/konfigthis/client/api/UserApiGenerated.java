/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppLink;
import com.konfigthis.client.model.AssignRoleRequest;
import com.konfigthis.client.model.AuthenticationProvider;
import com.konfigthis.client.model.CatalogApplication;
import com.konfigthis.client.model.ChangePasswordRequest;
import com.konfigthis.client.model.CreateUserRequest;
import com.konfigthis.client.model.ForgotPasswordResponse;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.IdentityProvider;
import com.konfigthis.client.model.OAuth2Client;
import com.konfigthis.client.model.OAuth2RefreshToken;
import com.konfigthis.client.model.OAuth2ScopeConsentGrant;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PasswordCredential;
import com.konfigthis.client.model.RecoveryQuestionCredential;
import com.konfigthis.client.model.ResetPasswordToken;
import com.konfigthis.client.model.ResponseLinks;
import com.konfigthis.client.model.Role;
import com.konfigthis.client.model.RoleType;
import com.konfigthis.client.model.Subscription;
import com.konfigthis.client.model.TempPassword;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserActivationToken;
import com.konfigthis.client.model.UserCredentials;
import com.konfigthis.client.model.UserProfile;
import com.konfigthis.client.model.UserStatus;
import com.konfigthis.client.model.UserType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/activate"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmail", sendEmail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleValidateBeforeCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling activateLifecycle(Async)");
        }

        // verify the required parameter 'sendEmail' is set
        if (sendEmail == null) {
            throw new ApiException("Missing the required parameter 'sendEmail' when calling activateLifecycle(Async)");
        }

        return activateLifecycleCall(userId, sendEmail, _callback);

    }


    private ApiResponse<UserActivationToken> activateLifecycleWithHttpInfo(String userId, Boolean sendEmail) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(userId, sendEmail, null);
        Type localVarReturnType = new TypeToken<UserActivationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateLifecycleAsync(String userId, Boolean sendEmail, final ApiCallback<UserActivationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleValidateBeforeCall(userId, sendEmail, _callback);
        Type localVarReturnType = new TypeToken<UserActivationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleRequestBuilder {
        private final String userId;
        private final Boolean sendEmail;

        private ActivateLifecycleRequestBuilder(String userId, Boolean sendEmail) {
            this.userId = userId;
            this.sendEmail = sendEmail;
        }

        /**
         * Build call for activateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleCall(userId, sendEmail, _callback);
        }


        /**
         * Execute activateLifecycle request
         * @return UserActivationToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserActivationToken execute() throws ApiException {
            ApiResponse<UserActivationToken> localVarResp = activateLifecycleWithHttpInfo(userId, sendEmail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;UserActivationToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserActivationToken> executeWithHttpInfo() throws ApiException {
            return activateLifecycleWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute activateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserActivationToken> _callback) throws ApiException {
            return activateLifecycleAsync(userId, sendEmail, _callback);
        }
    }

    /**
     * Activate User
     * Activates a user.  This operation can only be performed on users with a &#x60;STAGED&#x60; status.  Activation of a user is an asynchronous operation. The user will have the &#x60;transitioningToStatus&#x60; property with a value of &#x60;ACTIVE&#x60; during activation to indicate that the user hasn&#39;t completed the asynchronous operation.  The user will have a status of &#x60;ACTIVE&#x60; when the activation process is complete.
     * @param userId  (required)
     * @param sendEmail Sends an activation email to the user if true (required)
     * @return ActivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleRequestBuilder activateLifecycle(String userId, Boolean sendEmail) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (sendEmail == null) throw new IllegalArgumentException("\"sendEmail\" is required but got null");
        return new ActivateLifecycleRequestBuilder(userId, sendEmail);
    }
    private okhttp3.Call addAppInstanceTargetToAppAdministratorRoleGivenToUserCall(String userId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAppInstanceTargetToAppAdministratorRoleGivenToUserValidateBeforeCall(String userId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addAppInstanceTargetToAppAdministratorRoleGivenToUser(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addAppInstanceTargetToAppAdministratorRoleGivenToUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling addAppInstanceTargetToAppAdministratorRoleGivenToUser(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling addAppInstanceTargetToAppAdministratorRoleGivenToUser(Async)");
        }

        return addAppInstanceTargetToAppAdministratorRoleGivenToUserCall(userId, roleId, appName, applicationId, _callback);

    }


    private ApiResponse<Void> addAppInstanceTargetToAppAdministratorRoleGivenToUserWithHttpInfo(String userId, String roleId, String appName, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = addAppInstanceTargetToAppAdministratorRoleGivenToUserValidateBeforeCall(userId, roleId, appName, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addAppInstanceTargetToAppAdministratorRoleGivenToUserAsync(String userId, String roleId, String appName, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAppInstanceTargetToAppAdministratorRoleGivenToUserValidateBeforeCall(userId, roleId, appName, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddAppInstanceTargetToAppAdministratorRoleGivenToUserRequestBuilder {
        private final String userId;
        private final String roleId;
        private final String appName;
        private final String applicationId;

        private AddAppInstanceTargetToAppAdministratorRoleGivenToUserRequestBuilder(String userId, String roleId, String appName, String applicationId) {
            this.userId = userId;
            this.roleId = roleId;
            this.appName = appName;
            this.applicationId = applicationId;
        }

        /**
         * Build call for addAppInstanceTargetToAppAdministratorRoleGivenToUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addAppInstanceTargetToAppAdministratorRoleGivenToUserCall(userId, roleId, appName, applicationId, _callback);
        }


        /**
         * Execute addAppInstanceTargetToAppAdministratorRoleGivenToUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addAppInstanceTargetToAppAdministratorRoleGivenToUserWithHttpInfo(userId, roleId, appName, applicationId);
        }

        /**
         * Execute addAppInstanceTargetToAppAdministratorRoleGivenToUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addAppInstanceTargetToAppAdministratorRoleGivenToUserWithHttpInfo(userId, roleId, appName, applicationId);
        }

        /**
         * Execute addAppInstanceTargetToAppAdministratorRoleGivenToUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addAppInstanceTargetToAppAdministratorRoleGivenToUserAsync(userId, roleId, appName, applicationId, _callback);
        }
    }

    /**
     * Add App Instance Target to App Administrator Role given to a User
     * Add App Instance Target to App Administrator Role given to a User
     * @param userId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @param applicationId  (required)
     * @return AddAppInstanceTargetToAppAdministratorRoleGivenToUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public AddAppInstanceTargetToAppAdministratorRoleGivenToUserRequestBuilder addAppInstanceTargetToAppAdministratorRoleGivenToUser(String userId, String roleId, String appName, String applicationId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
            

        return new AddAppInstanceTargetToAppAdministratorRoleGivenToUserRequestBuilder(userId, roleId, appName, applicationId);
    }
    private okhttp3.Call assignRoleCall(String userId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignRoleRequest;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disableNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disableNotifications", disableNotifications));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignRoleValidateBeforeCall(String userId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling assignRole(Async)");
        }

        // verify the required parameter 'assignRoleRequest' is set
        if (assignRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'assignRoleRequest' when calling assignRole(Async)");
        }

        return assignRoleCall(userId, assignRoleRequest, disableNotifications, _callback);

    }


    private ApiResponse<Role> assignRoleWithHttpInfo(String userId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications) throws ApiException {
        okhttp3.Call localVarCall = assignRoleValidateBeforeCall(userId, assignRoleRequest, disableNotifications, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignRoleAsync(String userId, AssignRoleRequest assignRoleRequest, Boolean disableNotifications, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignRoleValidateBeforeCall(userId, assignRoleRequest, disableNotifications, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignRoleRequestBuilder {
        private final String userId;
        private RoleType type;
        private Boolean disableNotifications;

        private AssignRoleRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return AssignRoleRequestBuilder
         */
        public AssignRoleRequestBuilder type(RoleType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set disableNotifications
         * @param disableNotifications  (optional)
         * @return AssignRoleRequestBuilder
         */
        public AssignRoleRequestBuilder disableNotifications(Boolean disableNotifications) {
            this.disableNotifications = disableNotifications;
            return this;
        }
        
        /**
         * Build call for assignRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            return assignRoleCall(userId, assignRoleRequest, disableNotifications, _callback);
        }

        private AssignRoleRequest buildBodyParams() {
            AssignRoleRequest assignRoleRequest = new AssignRoleRequest();
            assignRoleRequest.type(this.type);
            return assignRoleRequest;
        }

        /**
         * Execute assignRole request
         * @return Role
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public Role execute() throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            ApiResponse<Role> localVarResp = assignRoleWithHttpInfo(userId, assignRoleRequest, disableNotifications);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignRole request with HTTP info returned
         * @return ApiResponse&lt;Role&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Role> executeWithHttpInfo() throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            return assignRoleWithHttpInfo(userId, assignRoleRequest, disableNotifications);
        }

        /**
         * Execute assignRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Role> _callback) throws ApiException {
            AssignRoleRequest assignRoleRequest = buildBodyParams();
            return assignRoleAsync(userId, assignRoleRequest, disableNotifications, _callback);
        }
    }

    /**
     * 
     * Assigns a role to a user.
     * @param userId  (required)
     * @param assignRoleRequest  (required)
     * @return AssignRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AssignRoleRequestBuilder assignRole(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new AssignRoleRequestBuilder(userId);
    }
    private okhttp3.Call changePasswordValidationCall(String userId, ChangePasswordRequest changePasswordRequest, Boolean strict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/credentials/change_password"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (strict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("strict", strict));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidationValidateBeforeCall(String userId, ChangePasswordRequest changePasswordRequest, Boolean strict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling changePasswordValidation(Async)");
        }

        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changePasswordValidation(Async)");
        }

        return changePasswordValidationCall(userId, changePasswordRequest, strict, _callback);

    }


    private ApiResponse<UserCredentials> changePasswordValidationWithHttpInfo(String userId, ChangePasswordRequest changePasswordRequest, Boolean strict) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidationValidateBeforeCall(userId, changePasswordRequest, strict, null);
        Type localVarReturnType = new TypeToken<UserCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changePasswordValidationAsync(String userId, ChangePasswordRequest changePasswordRequest, Boolean strict, final ApiCallback<UserCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidationValidateBeforeCall(userId, changePasswordRequest, strict, _callback);
        Type localVarReturnType = new TypeToken<UserCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangePasswordValidationRequestBuilder {
        private final String userId;
        private PasswordCredential newPassword;
        private PasswordCredential oldPassword;
        private Boolean strict;

        private ChangePasswordValidationRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set newPassword
         * @param newPassword  (optional)
         * @return ChangePasswordValidationRequestBuilder
         */
        public ChangePasswordValidationRequestBuilder newPassword(PasswordCredential newPassword) {
            this.newPassword = newPassword;
            return this;
        }
        
        /**
         * Set oldPassword
         * @param oldPassword  (optional)
         * @return ChangePasswordValidationRequestBuilder
         */
        public ChangePasswordValidationRequestBuilder oldPassword(PasswordCredential oldPassword) {
            this.oldPassword = oldPassword;
            return this;
        }
        
        /**
         * Set strict
         * @param strict  (optional)
         * @return ChangePasswordValidationRequestBuilder
         */
        public ChangePasswordValidationRequestBuilder strict(Boolean strict) {
            this.strict = strict;
            return this;
        }
        
        /**
         * Build call for changePasswordValidation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangePasswordRequest changePasswordRequest = buildBodyParams();
            return changePasswordValidationCall(userId, changePasswordRequest, strict, _callback);
        }

        private ChangePasswordRequest buildBodyParams() {
            ChangePasswordRequest changePasswordRequest = new ChangePasswordRequest();
            changePasswordRequest.newPassword(this.newPassword);
            changePasswordRequest.oldPassword(this.oldPassword);
            return changePasswordRequest;
        }

        /**
         * Execute changePasswordValidation request
         * @return UserCredentials
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserCredentials execute() throws ApiException {
            ChangePasswordRequest changePasswordRequest = buildBodyParams();
            ApiResponse<UserCredentials> localVarResp = changePasswordValidationWithHttpInfo(userId, changePasswordRequest, strict);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changePasswordValidation request with HTTP info returned
         * @return ApiResponse&lt;UserCredentials&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserCredentials> executeWithHttpInfo() throws ApiException {
            ChangePasswordRequest changePasswordRequest = buildBodyParams();
            return changePasswordValidationWithHttpInfo(userId, changePasswordRequest, strict);
        }

        /**
         * Execute changePasswordValidation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserCredentials> _callback) throws ApiException {
            ChangePasswordRequest changePasswordRequest = buildBodyParams();
            return changePasswordValidationAsync(userId, changePasswordRequest, strict, _callback);
        }
    }

    /**
     * Change Password
     * Changes a user&#39;s password by validating the user&#39;s current password. This operation can only be performed on users in &#x60;STAGED&#x60;, &#x60;ACTIVE&#x60;, &#x60;PASSWORD_EXPIRED&#x60;, or &#x60;RECOVERY&#x60; status that have a valid password credential
     * @param userId  (required)
     * @param changePasswordRequest  (required)
     * @return ChangePasswordValidationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ChangePasswordValidationRequestBuilder changePasswordValidation(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ChangePasswordValidationRequestBuilder(userId);
    }
    private okhttp3.Call createNewUserCall(CreateUserRequest createUserRequest, Boolean activate, Boolean provider, String nextLogin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/api/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (nextLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextLogin", nextLogin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewUserValidateBeforeCall(CreateUserRequest createUserRequest, Boolean activate, Boolean provider, String nextLogin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling createNewUser(Async)");
        }

        return createNewUserCall(createUserRequest, activate, provider, nextLogin, _callback);

    }


    private ApiResponse<User> createNewUserWithHttpInfo(CreateUserRequest createUserRequest, Boolean activate, Boolean provider, String nextLogin) throws ApiException {
        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(createUserRequest, activate, provider, nextLogin, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewUserAsync(CreateUserRequest createUserRequest, Boolean activate, Boolean provider, String nextLogin, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(createUserRequest, activate, provider, nextLogin, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewUserRequestBuilder {
        private UserCredentials credentials;
        private List<String> groupIds;
        private UserProfile profile;
        private UserType type;
        private Boolean activate;
        private Boolean provider;
        private String nextLogin;

        private CreateNewUserRequestBuilder() {
        }

        /**
         * Set credentials
         * @param credentials  (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder credentials(UserCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set groupIds
         * @param groupIds  (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder groupIds(List<String> groupIds) {
            this.groupIds = groupIds;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder profile(UserProfile profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder type(UserType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set activate
         * @param activate Executes activation lifecycle operation when creating the user (optional, default to true)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder activate(Boolean activate) {
            this.activate = activate;
            return this;
        }
        
        /**
         * Set provider
         * @param provider Indicates whether to create a user with a specified authentication provider (optional, default to false)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder provider(Boolean provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set nextLogin
         * @param nextLogin With activate&#x3D;true, set nextLogin to \&quot;changePassword\&quot; to have the password be EXPIRED, so user must change it the next time they log in. (optional, default to )
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder nextLogin(String nextLogin) {
            this.nextLogin = nextLogin;
            return this;
        }
        
        /**
         * Build call for createNewUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            return createNewUserCall(createUserRequest, activate, provider, nextLogin, _callback);
        }

        private CreateUserRequest buildBodyParams() {
            CreateUserRequest createUserRequest = new CreateUserRequest();
            createUserRequest.credentials(this.credentials);
            createUserRequest.groupIds(this.groupIds);
            createUserRequest.profile(this.profile);
            createUserRequest.type(this.type);
            return createUserRequest;
        }

        /**
         * Execute createNewUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            ApiResponse<User> localVarResp = createNewUserWithHttpInfo(createUserRequest, activate, provider, nextLogin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            return createNewUserWithHttpInfo(createUserRequest, activate, provider, nextLogin);
        }

        /**
         * Execute createNewUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            return createNewUserAsync(createUserRequest, activate, provider, nextLogin, _callback);
        }
    }

    /**
     * Create User
     * Creates a new user in your Okta organization with or without credentials.
     * @param createUserRequest  (required)
     * @return CreateNewUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewUserRequestBuilder createNewUser() throws IllegalArgumentException {
        return new CreateNewUserRequestBuilder();
    }
    private okhttp3.Call deactivateLifecycleCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/deactivate"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmail", sendEmail));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleValidateBeforeCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deactivateLifecycle(Async)");
        }

        return deactivateLifecycleCall(userId, sendEmail, _callback);

    }


    private ApiResponse<Void> deactivateLifecycleWithHttpInfo(String userId, Boolean sendEmail) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(userId, sendEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateLifecycleAsync(String userId, Boolean sendEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleValidateBeforeCall(userId, sendEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleRequestBuilder {
        private final String userId;
        private Boolean sendEmail;

        private DeactivateLifecycleRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set sendEmail
         * @param sendEmail  (optional, default to false)
         * @return DeactivateLifecycleRequestBuilder
         */
        public DeactivateLifecycleRequestBuilder sendEmail(Boolean sendEmail) {
            this.sendEmail = sendEmail;
            return this;
        }
        
        /**
         * Build call for deactivateLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleCall(userId, sendEmail, _callback);
        }


        /**
         * Execute deactivateLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateLifecycleWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute deactivateLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute deactivateLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateLifecycleAsync(userId, sendEmail, _callback);
        }
    }

    /**
     * Deactivate User
     * Deactivates a user. This operation can only be performed on users that do not have a &#x60;DEPROVISIONED&#x60; status. While the asynchronous operation (triggered by HTTP header &#x60;Prefer: respond-async&#x60;) is proceeding the user&#39;s &#x60;transitioningToStatus&#x60; property is &#x60;DEPROVISIONED&#x60;. The user&#39;s status is &#x60;DEPROVISIONED&#x60; when the deactivation process is complete.
     * @param userId  (required)
     * @return DeactivateLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleRequestBuilder deactivateLifecycle(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new DeactivateLifecycleRequestBuilder(userId);
    }
    private okhttp3.Call deleteLinkedObjectsCall(String userId, String relationshipName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/linkedObjects/{relationshipName}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "relationshipName" + "}", localVarApiClient.escapeString(relationshipName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLinkedObjectsValidateBeforeCall(String userId, String relationshipName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteLinkedObjects(Async)");
        }

        // verify the required parameter 'relationshipName' is set
        if (relationshipName == null) {
            throw new ApiException("Missing the required parameter 'relationshipName' when calling deleteLinkedObjects(Async)");
        }

        return deleteLinkedObjectsCall(userId, relationshipName, _callback);

    }


    private ApiResponse<Void> deleteLinkedObjectsWithHttpInfo(String userId, String relationshipName) throws ApiException {
        okhttp3.Call localVarCall = deleteLinkedObjectsValidateBeforeCall(userId, relationshipName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLinkedObjectsAsync(String userId, String relationshipName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLinkedObjectsValidateBeforeCall(userId, relationshipName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteLinkedObjectsRequestBuilder {
        private final String userId;
        private final String relationshipName;

        private DeleteLinkedObjectsRequestBuilder(String userId, String relationshipName) {
            this.userId = userId;
            this.relationshipName = relationshipName;
        }

        /**
         * Build call for deleteLinkedObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLinkedObjectsCall(userId, relationshipName, _callback);
        }


        /**
         * Execute deleteLinkedObjects request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLinkedObjectsWithHttpInfo(userId, relationshipName);
        }

        /**
         * Execute deleteLinkedObjects request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLinkedObjectsWithHttpInfo(userId, relationshipName);
        }

        /**
         * Execute deleteLinkedObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLinkedObjectsAsync(userId, relationshipName, _callback);
        }
    }

    /**
     * 
     * Delete linked objects for a user, relationshipName can be ONLY a primary relationship name
     * @param userId  (required)
     * @param relationshipName  (required)
     * @return DeleteLinkedObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLinkedObjectsRequestBuilder deleteLinkedObjects(String userId, String relationshipName) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (relationshipName == null) throw new IllegalArgumentException("\"relationshipName\" is required but got null");
            

        return new DeleteLinkedObjectsRequestBuilder(userId, relationshipName);
    }
    private okhttp3.Call deletePermanentlyCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmail", sendEmail));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermanentlyValidateBeforeCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deletePermanently(Async)");
        }

        return deletePermanentlyCall(userId, sendEmail, _callback);

    }


    private ApiResponse<Void> deletePermanentlyWithHttpInfo(String userId, Boolean sendEmail) throws ApiException {
        okhttp3.Call localVarCall = deletePermanentlyValidateBeforeCall(userId, sendEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePermanentlyAsync(String userId, Boolean sendEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermanentlyValidateBeforeCall(userId, sendEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePermanentlyRequestBuilder {
        private final String userId;
        private Boolean sendEmail;

        private DeletePermanentlyRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set sendEmail
         * @param sendEmail  (optional, default to false)
         * @return DeletePermanentlyRequestBuilder
         */
        public DeletePermanentlyRequestBuilder sendEmail(Boolean sendEmail) {
            this.sendEmail = sendEmail;
            return this;
        }
        
        /**
         * Build call for deletePermanently
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePermanentlyCall(userId, sendEmail, _callback);
        }


        /**
         * Execute deletePermanently request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePermanentlyWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute deletePermanently request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePermanentlyWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute deletePermanently request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePermanentlyAsync(userId, sendEmail, _callback);
        }
    }

    /**
     * Delete User
     * Deletes a user permanently.  This operation can only be performed on users that have a &#x60;DEPROVISIONED&#x60; status.  **This action cannot be recovered!**
     * @param userId  (required)
     * @return DeletePermanentlyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public DeletePermanentlyRequestBuilder deletePermanently(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new DeletePermanentlyRequestBuilder(userId);
    }
    private okhttp3.Call deleteTargetAppCall(String userId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetAppValidateBeforeCall(String userId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteTargetApp(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteTargetApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling deleteTargetApp(Async)");
        }

        return deleteTargetAppCall(userId, roleId, appName, _callback);

    }


    private ApiResponse<Void> deleteTargetAppWithHttpInfo(String userId, String roleId, String appName) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetAppValidateBeforeCall(userId, roleId, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTargetAppAsync(String userId, String roleId, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetAppValidateBeforeCall(userId, roleId, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTargetAppRequestBuilder {
        private final String userId;
        private final String roleId;
        private final String appName;

        private DeleteTargetAppRequestBuilder(String userId, String roleId, String appName) {
            this.userId = userId;
            this.roleId = roleId;
            this.appName = appName;
        }

        /**
         * Build call for deleteTargetApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTargetAppCall(userId, roleId, appName, _callback);
        }


        /**
         * Execute deleteTargetApp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTargetAppWithHttpInfo(userId, roleId, appName);
        }

        /**
         * Execute deleteTargetApp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTargetAppWithHttpInfo(userId, roleId, appName);
        }

        /**
         * Execute deleteTargetApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTargetAppAsync(userId, roleId, appName, _callback);
        }
    }

    /**
     * 
     * Success
     * @param userId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @return DeleteTargetAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTargetAppRequestBuilder deleteTargetApp(String userId, String roleId, String appName) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new DeleteTargetAppRequestBuilder(userId, roleId, appName);
    }
    private okhttp3.Call expirePasswordAndGetTemporaryPasswordCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/expire_password?tempPassword=false"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirePasswordAndGetTemporaryPasswordValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling expirePasswordAndGetTemporaryPassword(Async)");
        }

        return expirePasswordAndGetTemporaryPasswordCall(userId, _callback);

    }


    private ApiResponse<User> expirePasswordAndGetTemporaryPasswordWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = expirePasswordAndGetTemporaryPasswordValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call expirePasswordAndGetTemporaryPasswordAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirePasswordAndGetTemporaryPasswordValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExpirePasswordAndGetTemporaryPasswordRequestBuilder {
        private final String userId;

        private ExpirePasswordAndGetTemporaryPasswordRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for expirePasswordAndGetTemporaryPassword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return expirePasswordAndGetTemporaryPasswordCall(userId, _callback);
        }


        /**
         * Execute expirePasswordAndGetTemporaryPassword request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = expirePasswordAndGetTemporaryPasswordWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute expirePasswordAndGetTemporaryPassword request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return expirePasswordAndGetTemporaryPasswordWithHttpInfo(userId);
        }

        /**
         * Execute expirePasswordAndGetTemporaryPassword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return expirePasswordAndGetTemporaryPasswordAsync(userId, _callback);
        }
    }

    /**
     * Expire Password
     * This operation transitions the user to the status of &#x60;PASSWORD_EXPIRED&#x60; so that the user is required to change their password at their next login.
     * @param userId  (required)
     * @return ExpirePasswordAndGetTemporaryPasswordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExpirePasswordAndGetTemporaryPasswordRequestBuilder expirePasswordAndGetTemporaryPassword(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ExpirePasswordAndGetTemporaryPasswordRequestBuilder(userId);
    }
    private okhttp3.Call expirePasswordAndTemporaryPasswordCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/expire_password?tempPassword=true"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirePasswordAndTemporaryPasswordValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling expirePasswordAndTemporaryPassword(Async)");
        }

        return expirePasswordAndTemporaryPasswordCall(userId, _callback);

    }


    private ApiResponse<TempPassword> expirePasswordAndTemporaryPasswordWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = expirePasswordAndTemporaryPasswordValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<TempPassword>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call expirePasswordAndTemporaryPasswordAsync(String userId, final ApiCallback<TempPassword> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirePasswordAndTemporaryPasswordValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<TempPassword>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExpirePasswordAndTemporaryPasswordRequestBuilder {
        private final String userId;

        private ExpirePasswordAndTemporaryPasswordRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for expirePasswordAndTemporaryPassword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return expirePasswordAndTemporaryPasswordCall(userId, _callback);
        }


        /**
         * Execute expirePasswordAndTemporaryPassword request
         * @return TempPassword
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TempPassword execute() throws ApiException {
            ApiResponse<TempPassword> localVarResp = expirePasswordAndTemporaryPasswordWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute expirePasswordAndTemporaryPassword request with HTTP info returned
         * @return ApiResponse&lt;TempPassword&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TempPassword> executeWithHttpInfo() throws ApiException {
            return expirePasswordAndTemporaryPasswordWithHttpInfo(userId);
        }

        /**
         * Execute expirePasswordAndTemporaryPassword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TempPassword> _callback) throws ApiException {
            return expirePasswordAndTemporaryPasswordAsync(userId, _callback);
        }
    }

    /**
     * Expire Password
     * This operation transitions the user to the status of &#x60;PASSWORD_EXPIRED&#x60; and the user&#39;s password is reset to a temporary password that is returned.
     * @param userId  (required)
     * @return ExpirePasswordAndTemporaryPasswordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExpirePasswordAndTemporaryPasswordRequestBuilder expirePasswordAndTemporaryPassword(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ExpirePasswordAndTemporaryPasswordRequestBuilder(userId);
    }
    private okhttp3.Call forgotPasswordCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/credentials/forgot_password"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forgotPasswordValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling forgotPassword(Async)");
        }

        return forgotPasswordCall(userId, _callback);

    }


    private ApiResponse<ForgotPasswordResponse> forgotPasswordWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = forgotPasswordValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ForgotPasswordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call forgotPasswordAsync(String userId, final ApiCallback<ForgotPasswordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forgotPasswordValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ForgotPasswordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ForgotPasswordRequestBuilder {
        private final String userId;

        private ForgotPasswordRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for forgotPassword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return forgotPasswordCall(userId, _callback);
        }


        /**
         * Execute forgotPassword request
         * @return ForgotPasswordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ForgotPasswordResponse execute() throws ApiException {
            ApiResponse<ForgotPasswordResponse> localVarResp = forgotPasswordWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute forgotPassword request with HTTP info returned
         * @return ApiResponse&lt;ForgotPasswordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ForgotPasswordResponse> executeWithHttpInfo() throws ApiException {
            return forgotPasswordWithHttpInfo(userId);
        }

        /**
         * Execute forgotPassword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ForgotPasswordResponse> _callback) throws ApiException {
            return forgotPasswordAsync(userId, _callback);
        }
    }

    /**
     * Forgot Password
     * 
     * @param userId  (required)
     * @return ForgotPasswordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ForgotPasswordRequestBuilder forgotPassword(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ForgotPasswordRequestBuilder(userId);
    }
    private okhttp3.Call generatePasswordResetTokenCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/reset_password"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmail", sendEmail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePasswordResetTokenValidateBeforeCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling generatePasswordResetToken(Async)");
        }

        // verify the required parameter 'sendEmail' is set
        if (sendEmail == null) {
            throw new ApiException("Missing the required parameter 'sendEmail' when calling generatePasswordResetToken(Async)");
        }

        return generatePasswordResetTokenCall(userId, sendEmail, _callback);

    }


    private ApiResponse<ResetPasswordToken> generatePasswordResetTokenWithHttpInfo(String userId, Boolean sendEmail) throws ApiException {
        okhttp3.Call localVarCall = generatePasswordResetTokenValidateBeforeCall(userId, sendEmail, null);
        Type localVarReturnType = new TypeToken<ResetPasswordToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePasswordResetTokenAsync(String userId, Boolean sendEmail, final ApiCallback<ResetPasswordToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePasswordResetTokenValidateBeforeCall(userId, sendEmail, _callback);
        Type localVarReturnType = new TypeToken<ResetPasswordToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePasswordResetTokenRequestBuilder {
        private final String userId;
        private final Boolean sendEmail;

        private GeneratePasswordResetTokenRequestBuilder(String userId, Boolean sendEmail) {
            this.userId = userId;
            this.sendEmail = sendEmail;
        }

        /**
         * Build call for generatePasswordResetToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generatePasswordResetTokenCall(userId, sendEmail, _callback);
        }


        /**
         * Execute generatePasswordResetToken request
         * @return ResetPasswordToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ResetPasswordToken execute() throws ApiException {
            ApiResponse<ResetPasswordToken> localVarResp = generatePasswordResetTokenWithHttpInfo(userId, sendEmail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePasswordResetToken request with HTTP info returned
         * @return ApiResponse&lt;ResetPasswordToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResetPasswordToken> executeWithHttpInfo() throws ApiException {
            return generatePasswordResetTokenWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute generatePasswordResetToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResetPasswordToken> _callback) throws ApiException {
            return generatePasswordResetTokenAsync(userId, sendEmail, _callback);
        }
    }

    /**
     * Reset Password
     * Generates a one-time token (OTT) that can be used to reset a user&#39;s password.  The OTT link can be automatically emailed to the user or returned to the API caller and distributed using a custom flow.
     * @param userId  (required)
     * @param sendEmail  (required)
     * @return GeneratePasswordResetTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePasswordResetTokenRequestBuilder generatePasswordResetToken(String userId, Boolean sendEmail) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (sendEmail == null) throw new IllegalArgumentException("\"sendEmail\" is required but got null");
        return new GeneratePasswordResetTokenRequestBuilder(userId, sendEmail);
    }
    private okhttp3.Call getAssignedRoleCall(String userId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignedRoleValidateBeforeCall(String userId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAssignedRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getAssignedRole(Async)");
        }

        return getAssignedRoleCall(userId, roleId, _callback);

    }


    private ApiResponse<Role> getAssignedRoleWithHttpInfo(String userId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = getAssignedRoleValidateBeforeCall(userId, roleId, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignedRoleAsync(String userId, String roleId, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignedRoleValidateBeforeCall(userId, roleId, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignedRoleRequestBuilder {
        private final String userId;
        private final String roleId;

        private GetAssignedRoleRequestBuilder(String userId, String roleId) {
            this.userId = userId;
            this.roleId = roleId;
        }

        /**
         * Build call for getAssignedRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignedRoleCall(userId, roleId, _callback);
        }


        /**
         * Execute getAssignedRole request
         * @return Role
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Role execute() throws ApiException {
            ApiResponse<Role> localVarResp = getAssignedRoleWithHttpInfo(userId, roleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignedRole request with HTTP info returned
         * @return ApiResponse&lt;Role&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Role> executeWithHttpInfo() throws ApiException {
            return getAssignedRoleWithHttpInfo(userId, roleId);
        }

        /**
         * Execute getAssignedRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Role> _callback) throws ApiException {
            return getAssignedRoleAsync(userId, roleId, _callback);
        }
    }

    /**
     * 
     * Gets role that is assigne to user.
     * @param userId  (required)
     * @param roleId  (required)
     * @return GetAssignedRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignedRoleRequestBuilder getAssignedRole(String userId, String roleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new GetAssignedRoleRequestBuilder(userId, roleId);
    }
    private okhttp3.Call getClientRefreshTokenCall(String userId, String clientId, String tokenId, String expand, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientRefreshTokenValidateBeforeCall(String userId, String clientId, String tokenId, String expand, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getClientRefreshToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientRefreshToken(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getClientRefreshToken(Async)");
        }

        return getClientRefreshTokenCall(userId, clientId, tokenId, expand, limit, after, _callback);

    }


    private ApiResponse<OAuth2RefreshToken> getClientRefreshTokenWithHttpInfo(String userId, String clientId, String tokenId, String expand, Integer limit, String after) throws ApiException {
        okhttp3.Call localVarCall = getClientRefreshTokenValidateBeforeCall(userId, clientId, tokenId, expand, limit, after, null);
        Type localVarReturnType = new TypeToken<OAuth2RefreshToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientRefreshTokenAsync(String userId, String clientId, String tokenId, String expand, Integer limit, String after, final ApiCallback<OAuth2RefreshToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientRefreshTokenValidateBeforeCall(userId, clientId, tokenId, expand, limit, after, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RefreshToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClientRefreshTokenRequestBuilder {
        private final String userId;
        private final String clientId;
        private final String tokenId;
        private String expand;
        private Integer limit;
        private String after;

        private GetClientRefreshTokenRequestBuilder(String userId, String clientId, String tokenId) {
            this.userId = userId;
            this.clientId = clientId;
            this.tokenId = tokenId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetClientRefreshTokenRequestBuilder
         */
        public GetClientRefreshTokenRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetClientRefreshTokenRequestBuilder
         */
        public GetClientRefreshTokenRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return GetClientRefreshTokenRequestBuilder
         */
        public GetClientRefreshTokenRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for getClientRefreshToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientRefreshTokenCall(userId, clientId, tokenId, expand, limit, after, _callback);
        }


        /**
         * Execute getClientRefreshToken request
         * @return OAuth2RefreshToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2RefreshToken execute() throws ApiException {
            ApiResponse<OAuth2RefreshToken> localVarResp = getClientRefreshTokenWithHttpInfo(userId, clientId, tokenId, expand, limit, after);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClientRefreshToken request with HTTP info returned
         * @return ApiResponse&lt;OAuth2RefreshToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2RefreshToken> executeWithHttpInfo() throws ApiException {
            return getClientRefreshTokenWithHttpInfo(userId, clientId, tokenId, expand, limit, after);
        }

        /**
         * Execute getClientRefreshToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2RefreshToken> _callback) throws ApiException {
            return getClientRefreshTokenAsync(userId, clientId, tokenId, expand, limit, after, _callback);
        }
    }

    /**
     * 
     * Gets a refresh token issued for the specified User and Client.
     * @param userId  (required)
     * @param clientId  (required)
     * @param tokenId  (required)
     * @return GetClientRefreshTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClientRefreshTokenRequestBuilder getClientRefreshToken(String userId, String clientId, String tokenId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (tokenId == null) throw new IllegalArgumentException("\"tokenId\" is required but got null");
            

        return new GetClientRefreshTokenRequestBuilder(userId, clientId, tokenId);
    }
    private okhttp3.Call getGrantByIdCall(String userId, String grantId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/grants/{grantId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "grantId" + "}", localVarApiClient.escapeString(grantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrantByIdValidateBeforeCall(String userId, String grantId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getGrantById(Async)");
        }

        // verify the required parameter 'grantId' is set
        if (grantId == null) {
            throw new ApiException("Missing the required parameter 'grantId' when calling getGrantById(Async)");
        }

        return getGrantByIdCall(userId, grantId, expand, _callback);

    }


    private ApiResponse<OAuth2ScopeConsentGrant> getGrantByIdWithHttpInfo(String userId, String grantId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getGrantByIdValidateBeforeCall(userId, grantId, expand, null);
        Type localVarReturnType = new TypeToken<OAuth2ScopeConsentGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrantByIdAsync(String userId, String grantId, String expand, final ApiCallback<OAuth2ScopeConsentGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrantByIdValidateBeforeCall(userId, grantId, expand, _callback);
        Type localVarReturnType = new TypeToken<OAuth2ScopeConsentGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGrantByIdRequestBuilder {
        private final String userId;
        private final String grantId;
        private String expand;

        private GetGrantByIdRequestBuilder(String userId, String grantId) {
            this.userId = userId;
            this.grantId = grantId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return GetGrantByIdRequestBuilder
         */
        public GetGrantByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getGrantById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrantByIdCall(userId, grantId, expand, _callback);
        }


        /**
         * Execute getGrantById request
         * @return OAuth2ScopeConsentGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OAuth2ScopeConsentGrant execute() throws ApiException {
            ApiResponse<OAuth2ScopeConsentGrant> localVarResp = getGrantByIdWithHttpInfo(userId, grantId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGrantById request with HTTP info returned
         * @return ApiResponse&lt;OAuth2ScopeConsentGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OAuth2ScopeConsentGrant> executeWithHttpInfo() throws ApiException {
            return getGrantByIdWithHttpInfo(userId, grantId, expand);
        }

        /**
         * Execute getGrantById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OAuth2ScopeConsentGrant> _callback) throws ApiException {
            return getGrantByIdAsync(userId, grantId, expand, _callback);
        }
    }

    /**
     * 
     * Gets a grant for the specified user
     * @param userId  (required)
     * @param grantId  (required)
     * @return GetGrantByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetGrantByIdRequestBuilder getGrantById(String userId, String grantId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (grantId == null) throw new IllegalArgumentException("\"grantId\" is required but got null");
            

        return new GetGrantByIdRequestBuilder(userId, grantId);
    }
    private okhttp3.Call getLinkedObjectsCall(String userId, String relationshipName, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/linkedObjects/{relationshipName}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "relationshipName" + "}", localVarApiClient.escapeString(relationshipName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkedObjectsValidateBeforeCall(String userId, String relationshipName, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getLinkedObjects(Async)");
        }

        // verify the required parameter 'relationshipName' is set
        if (relationshipName == null) {
            throw new ApiException("Missing the required parameter 'relationshipName' when calling getLinkedObjects(Async)");
        }

        return getLinkedObjectsCall(userId, relationshipName, after, limit, _callback);

    }


    private ApiResponse<List<ResponseLinks>> getLinkedObjectsWithHttpInfo(String userId, String relationshipName, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getLinkedObjectsValidateBeforeCall(userId, relationshipName, after, limit, null);
        Type localVarReturnType = new TypeToken<List<ResponseLinks>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLinkedObjectsAsync(String userId, String relationshipName, String after, Integer limit, final ApiCallback<List<ResponseLinks>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkedObjectsValidateBeforeCall(userId, relationshipName, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<ResponseLinks>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLinkedObjectsRequestBuilder {
        private final String userId;
        private final String relationshipName;
        private String after;
        private Integer limit;

        private GetLinkedObjectsRequestBuilder(String userId, String relationshipName) {
            this.userId = userId;
            this.relationshipName = relationshipName;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return GetLinkedObjectsRequestBuilder
         */
        public GetLinkedObjectsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to -1)
         * @return GetLinkedObjectsRequestBuilder
         */
        public GetLinkedObjectsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getLinkedObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLinkedObjectsCall(userId, relationshipName, after, limit, _callback);
        }


        /**
         * Execute getLinkedObjects request
         * @return List&lt;ResponseLinks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<ResponseLinks> execute() throws ApiException {
            ApiResponse<List<ResponseLinks>> localVarResp = getLinkedObjectsWithHttpInfo(userId, relationshipName, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLinkedObjects request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ResponseLinks&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ResponseLinks>> executeWithHttpInfo() throws ApiException {
            return getLinkedObjectsWithHttpInfo(userId, relationshipName, after, limit);
        }

        /**
         * Execute getLinkedObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ResponseLinks>> _callback) throws ApiException {
            return getLinkedObjectsAsync(userId, relationshipName, after, limit, _callback);
        }
    }

    /**
     * 
     * Get linked objects for a user, relationshipName can be a primary or associated relationship name
     * @param userId  (required)
     * @param relationshipName  (required)
     * @return GetLinkedObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkedObjectsRequestBuilder getLinkedObjects(String userId, String relationshipName) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (relationshipName == null) throw new IllegalArgumentException("\"relationshipName\" is required but got null");
            

        return new GetLinkedObjectsRequestBuilder(userId, relationshipName);
    }
    private okhttp3.Call getMemberGroupsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/groups"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberGroupsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getMemberGroups(Async)");
        }

        return getMemberGroupsCall(userId, _callback);

    }


    private ApiResponse<List<Group>> getMemberGroupsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getMemberGroupsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberGroupsAsync(String userId, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberGroupsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberGroupsRequestBuilder {
        private final String userId;

        private GetMemberGroupsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for getMemberGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberGroupsCall(userId, _callback);
        }


        /**
         * Execute getMemberGroups request
         * @return List&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Group> execute() throws ApiException {
            ApiResponse<List<Group>> localVarResp = getMemberGroupsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberGroups request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Group&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Group>> executeWithHttpInfo() throws ApiException {
            return getMemberGroupsWithHttpInfo(userId);
        }

        /**
         * Execute getMemberGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Group>> _callback) throws ApiException {
            return getMemberGroupsAsync(userId, _callback);
        }
    }

    /**
     * Get Member Groups
     * Fetches the groups of which the user is a member.
     * @param userId  (required)
     * @return GetMemberGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberGroupsRequestBuilder getMemberGroups(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetMemberGroupsRequestBuilder(userId);
    }
    private okhttp3.Call getOktaUserCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOktaUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getOktaUser(Async)");
        }

        return getOktaUserCall(userId, _callback);

    }


    private ApiResponse<User> getOktaUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getOktaUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOktaUserAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOktaUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOktaUserRequestBuilder {
        private final String userId;

        private GetOktaUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for getOktaUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOktaUserCall(userId, _callback);
        }


        /**
         * Execute getOktaUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getOktaUserWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOktaUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getOktaUserWithHttpInfo(userId);
        }

        /**
         * Execute getOktaUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getOktaUserAsync(userId, _callback);
        }
    }

    /**
     * Get User
     * Fetches a user from your Okta organization.
     * @param userId  (required)
     * @return GetOktaUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetOktaUserRequestBuilder getOktaUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetOktaUserRequestBuilder(userId);
    }
    private okhttp3.Call getSubscriptionByNotificationCall(String userId, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/subscriptions/{notificationType}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "notificationType" + "}", localVarApiClient.escapeString(notificationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionByNotificationValidateBeforeCall(String userId, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSubscriptionByNotification(Async)");
        }

        // verify the required parameter 'notificationType' is set
        if (notificationType == null) {
            throw new ApiException("Missing the required parameter 'notificationType' when calling getSubscriptionByNotification(Async)");
        }

        return getSubscriptionByNotificationCall(userId, notificationType, _callback);

    }


    private ApiResponse<Subscription> getSubscriptionByNotificationWithHttpInfo(String userId, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionByNotificationValidateBeforeCall(userId, notificationType, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriptionByNotificationAsync(String userId, String notificationType, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionByNotificationValidateBeforeCall(userId, notificationType, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubscriptionByNotificationRequestBuilder {
        private final String userId;
        private final String notificationType;

        private GetSubscriptionByNotificationRequestBuilder(String userId, String notificationType) {
            this.userId = userId;
            this.notificationType = notificationType;
        }

        /**
         * Build call for getSubscriptionByNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriptionByNotificationCall(userId, notificationType, _callback);
        }


        /**
         * Execute getSubscriptionByNotification request
         * @return Subscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Subscription execute() throws ApiException {
            ApiResponse<Subscription> localVarResp = getSubscriptionByNotificationWithHttpInfo(userId, notificationType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubscriptionByNotification request with HTTP info returned
         * @return ApiResponse&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Subscription> executeWithHttpInfo() throws ApiException {
            return getSubscriptionByNotificationWithHttpInfo(userId, notificationType);
        }

        /**
         * Execute getSubscriptionByNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Subscription> _callback) throws ApiException {
            return getSubscriptionByNotificationAsync(userId, notificationType, _callback);
        }
    }

    /**
     * Get the subscription of a User with a specific notification type
     * Get the subscriptions of a User with a specific notification type. Only gets subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.
     * @param userId  (required)
     * @param notificationType  (required)
     * @return GetSubscriptionByNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionByNotificationRequestBuilder getSubscriptionByNotification(String userId, String notificationType) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (notificationType == null) throw new IllegalArgumentException("\"notificationType\" is required but got null");
            

        return new GetSubscriptionByNotificationRequestBuilder(userId, notificationType);
    }
    private okhttp3.Call listActiveUsersCall(String q, String after, Integer limit, String filter, String search, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActiveUsersValidateBeforeCall(String q, String after, Integer limit, String filter, String search, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listActiveUsersCall(q, after, limit, filter, search, sortBy, sortOrder, _callback);

    }


    private ApiResponse<List<User>> listActiveUsersWithHttpInfo(String q, String after, Integer limit, String filter, String search, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listActiveUsersValidateBeforeCall(q, after, limit, filter, search, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listActiveUsersAsync(String q, String after, Integer limit, String filter, String search, String sortBy, String sortOrder, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActiveUsersValidateBeforeCall(q, after, limit, filter, search, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListActiveUsersRequestBuilder {
        private String q;
        private String after;
        private Integer limit;
        private String filter;
        private String search;
        private String sortBy;
        private String sortOrder;

        private ListActiveUsersRequestBuilder() {
        }

        /**
         * Set q
         * @param q Finds a user that matches firstName, lastName, and email properties (optional)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set after
         * @param after Specifies the pagination cursor for the next page of users (optional)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specifies the number of results returned (optional, default to 10)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Filters users with a supported expression for a subset of properties (optional)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set search
         * @param search Searches for users with a supported filtering  expression for most properties (optional)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder  (optional)
         * @return ListActiveUsersRequestBuilder
         */
        public ListActiveUsersRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listActiveUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActiveUsersCall(q, after, limit, filter, search, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listActiveUsers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = listActiveUsersWithHttpInfo(q, after, limit, filter, search, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listActiveUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return listActiveUsersWithHttpInfo(q, after, limit, filter, search, sortBy, sortOrder);
        }

        /**
         * Execute listActiveUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return listActiveUsersAsync(q, after, limit, filter, search, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List Users
     * Lists users that do not have a status of &#39;DEPROVISIONED&#39; (by default), up to the maximum (200 for most orgs), with pagination in most cases. A subset of users can be returned that match a supported filter expression or search criteria.
     * @return ListActiveUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListActiveUsersRequestBuilder listActiveUsers() throws IllegalArgumentException {
        return new ListActiveUsersRequestBuilder();
    }
    private okhttp3.Call listAppTargetsForRoleCall(String userId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppTargetsForRoleValidateBeforeCall(String userId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAppTargetsForRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling listAppTargetsForRole(Async)");
        }

        return listAppTargetsForRoleCall(userId, roleId, after, limit, _callback);

    }


    private ApiResponse<List<CatalogApplication>> listAppTargetsForRoleWithHttpInfo(String userId, String roleId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAppTargetsForRoleValidateBeforeCall(userId, roleId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<CatalogApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAppTargetsForRoleAsync(String userId, String roleId, String after, Integer limit, final ApiCallback<List<CatalogApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppTargetsForRoleValidateBeforeCall(userId, roleId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<CatalogApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAppTargetsForRoleRequestBuilder {
        private final String userId;
        private final String roleId;
        private String after;
        private Integer limit;

        private ListAppTargetsForRoleRequestBuilder(String userId, String roleId) {
            this.userId = userId;
            this.roleId = roleId;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return ListAppTargetsForRoleRequestBuilder
         */
        public ListAppTargetsForRoleRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListAppTargetsForRoleRequestBuilder
         */
        public ListAppTargetsForRoleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAppTargetsForRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAppTargetsForRoleCall(userId, roleId, after, limit, _callback);
        }


        /**
         * Execute listAppTargetsForRole request
         * @return List&lt;CatalogApplication&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<CatalogApplication> execute() throws ApiException {
            ApiResponse<List<CatalogApplication>> localVarResp = listAppTargetsForRoleWithHttpInfo(userId, roleId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAppTargetsForRole request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CatalogApplication&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CatalogApplication>> executeWithHttpInfo() throws ApiException {
            return listAppTargetsForRoleWithHttpInfo(userId, roleId, after, limit);
        }

        /**
         * Execute listAppTargetsForRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CatalogApplication>> _callback) throws ApiException {
            return listAppTargetsForRoleAsync(userId, roleId, after, limit, _callback);
        }
    }

    /**
     * 
     * Lists all App targets for an &#x60;APP_ADMIN&#x60; Role assigned to a User. This methods return list may include full Applications or Instances. The response for an instance will have an &#x60;ID&#x60; value, while Application will not have an ID.
     * @param userId  (required)
     * @param roleId  (required)
     * @return ListAppTargetsForRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAppTargetsForRoleRequestBuilder listAppTargetsForRole(String userId, String roleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new ListAppTargetsForRoleRequestBuilder(userId, roleId);
    }
    private okhttp3.Call listAssignedAppLinksCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/appLinks"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignedAppLinksValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAssignedAppLinks(Async)");
        }

        return listAssignedAppLinksCall(userId, _callback);

    }


    private ApiResponse<List<AppLink>> listAssignedAppLinksWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listAssignedAppLinksValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<AppLink>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignedAppLinksAsync(String userId, final ApiCallback<List<AppLink>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignedAppLinksValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<AppLink>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignedAppLinksRequestBuilder {
        private final String userId;

        private ListAssignedAppLinksRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listAssignedAppLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignedAppLinksCall(userId, _callback);
        }


        /**
         * Execute listAssignedAppLinks request
         * @return List&lt;AppLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<AppLink> execute() throws ApiException {
            ApiResponse<List<AppLink>> localVarResp = listAssignedAppLinksWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignedAppLinks request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AppLink&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AppLink>> executeWithHttpInfo() throws ApiException {
            return listAssignedAppLinksWithHttpInfo(userId);
        }

        /**
         * Execute listAssignedAppLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AppLink>> _callback) throws ApiException {
            return listAssignedAppLinksAsync(userId, _callback);
        }
    }

    /**
     * Get Assigned App Links
     * Fetches appLinks for all direct or indirect (via group membership) assigned applications.
     * @param userId  (required)
     * @return ListAssignedAppLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignedAppLinksRequestBuilder listAssignedAppLinks(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListAssignedAppLinksRequestBuilder(userId);
    }
    private okhttp3.Call listAssignedRolesCall(String userId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignedRolesValidateBeforeCall(String userId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAssignedRoles(Async)");
        }

        return listAssignedRolesCall(userId, expand, _callback);

    }


    private ApiResponse<List<Role>> listAssignedRolesWithHttpInfo(String userId, String expand) throws ApiException {
        okhttp3.Call localVarCall = listAssignedRolesValidateBeforeCall(userId, expand, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignedRolesAsync(String userId, String expand, final ApiCallback<List<Role>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignedRolesValidateBeforeCall(userId, expand, _callback);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignedRolesRequestBuilder {
        private final String userId;
        private String expand;

        private ListAssignedRolesRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return ListAssignedRolesRequestBuilder
         */
        public ListAssignedRolesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listAssignedRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignedRolesCall(userId, expand, _callback);
        }


        /**
         * Execute listAssignedRoles request
         * @return List&lt;Role&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Role> execute() throws ApiException {
            ApiResponse<List<Role>> localVarResp = listAssignedRolesWithHttpInfo(userId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignedRoles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Role&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Role>> executeWithHttpInfo() throws ApiException {
            return listAssignedRolesWithHttpInfo(userId, expand);
        }

        /**
         * Execute listAssignedRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Role>> _callback) throws ApiException {
            return listAssignedRolesAsync(userId, expand, _callback);
        }
    }

    /**
     * 
     * Lists all roles assigned to a user.
     * @param userId  (required)
     * @return ListAssignedRolesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignedRolesRequestBuilder listAssignedRoles(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListAssignedRolesRequestBuilder(userId);
    }
    private okhttp3.Call listClientsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClientsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listClients(Async)");
        }

        return listClientsCall(userId, _callback);

    }


    private ApiResponse<List<OAuth2Client>> listClientsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listClientsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listClientsAsync(String userId, final ApiCallback<List<OAuth2Client>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClientsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListClientsRequestBuilder {
        private final String userId;

        private ListClientsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listClients
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listClientsCall(userId, _callback);
        }


        /**
         * Execute listClients request
         * @return List&lt;OAuth2Client&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2Client> execute() throws ApiException {
            ApiResponse<List<OAuth2Client>> localVarResp = listClientsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listClients request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2Client&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2Client>> executeWithHttpInfo() throws ApiException {
            return listClientsWithHttpInfo(userId);
        }

        /**
         * Execute listClients request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2Client>> _callback) throws ApiException {
            return listClientsAsync(userId, _callback);
        }
    }

    /**
     * 
     * Lists all client resources for which the specified user has grants or tokens.
     * @param userId  (required)
     * @return ListClientsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListClientsRequestBuilder listClients(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListClientsRequestBuilder(userId);
    }
    private okhttp3.Call listGrantsCall(String userId, String scopeId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/grants"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scopeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopeId", scopeId));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGrantsValidateBeforeCall(String userId, String scopeId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listGrants(Async)");
        }

        return listGrantsCall(userId, scopeId, expand, after, limit, _callback);

    }


    private ApiResponse<List<OAuth2ScopeConsentGrant>> listGrantsWithHttpInfo(String userId, String scopeId, String expand, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listGrantsValidateBeforeCall(userId, scopeId, expand, after, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2ScopeConsentGrant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGrantsAsync(String userId, String scopeId, String expand, String after, Integer limit, final ApiCallback<List<OAuth2ScopeConsentGrant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGrantsValidateBeforeCall(userId, scopeId, expand, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2ScopeConsentGrant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGrantsRequestBuilder {
        private final String userId;
        private String scopeId;
        private String expand;
        private String after;
        private Integer limit;

        private ListGrantsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set scopeId
         * @param scopeId  (optional)
         * @return ListGrantsRequestBuilder
         */
        public ListGrantsRequestBuilder scopeId(String scopeId) {
            this.scopeId = scopeId;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional)
         * @return ListGrantsRequestBuilder
         */
        public ListGrantsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return ListGrantsRequestBuilder
         */
        public ListGrantsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListGrantsRequestBuilder
         */
        public ListGrantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGrantsCall(userId, scopeId, expand, after, limit, _callback);
        }


        /**
         * Execute listGrants request
         * @return List&lt;OAuth2ScopeConsentGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2ScopeConsentGrant> execute() throws ApiException {
            ApiResponse<List<OAuth2ScopeConsentGrant>> localVarResp = listGrantsWithHttpInfo(userId, scopeId, expand, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGrants request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2ScopeConsentGrant&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2ScopeConsentGrant>> executeWithHttpInfo() throws ApiException {
            return listGrantsWithHttpInfo(userId, scopeId, expand, after, limit);
        }

        /**
         * Execute listGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2ScopeConsentGrant>> _callback) throws ApiException {
            return listGrantsAsync(userId, scopeId, expand, after, limit, _callback);
        }
    }

    /**
     * 
     * Lists all grants for the specified user
     * @param userId  (required)
     * @return ListGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListGrantsRequestBuilder listGrants(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListGrantsRequestBuilder(userId);
    }
    private okhttp3.Call listGrantsForClientCall(String userId, String clientId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients/{clientId}/grants"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGrantsForClientValidateBeforeCall(String userId, String clientId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listGrantsForClient(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling listGrantsForClient(Async)");
        }

        return listGrantsForClientCall(userId, clientId, expand, after, limit, _callback);

    }


    private ApiResponse<List<OAuth2ScopeConsentGrant>> listGrantsForClientWithHttpInfo(String userId, String clientId, String expand, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listGrantsForClientValidateBeforeCall(userId, clientId, expand, after, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2ScopeConsentGrant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGrantsForClientAsync(String userId, String clientId, String expand, String after, Integer limit, final ApiCallback<List<OAuth2ScopeConsentGrant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGrantsForClientValidateBeforeCall(userId, clientId, expand, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2ScopeConsentGrant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGrantsForClientRequestBuilder {
        private final String userId;
        private final String clientId;
        private String expand;
        private String after;
        private Integer limit;

        private ListGrantsForClientRequestBuilder(String userId, String clientId) {
            this.userId = userId;
            this.clientId = clientId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return ListGrantsForClientRequestBuilder
         */
        public ListGrantsForClientRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return ListGrantsForClientRequestBuilder
         */
        public ListGrantsForClientRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListGrantsForClientRequestBuilder
         */
        public ListGrantsForClientRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGrantsForClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGrantsForClientCall(userId, clientId, expand, after, limit, _callback);
        }


        /**
         * Execute listGrantsForClient request
         * @return List&lt;OAuth2ScopeConsentGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2ScopeConsentGrant> execute() throws ApiException {
            ApiResponse<List<OAuth2ScopeConsentGrant>> localVarResp = listGrantsForClientWithHttpInfo(userId, clientId, expand, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGrantsForClient request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2ScopeConsentGrant&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2ScopeConsentGrant>> executeWithHttpInfo() throws ApiException {
            return listGrantsForClientWithHttpInfo(userId, clientId, expand, after, limit);
        }

        /**
         * Execute listGrantsForClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2ScopeConsentGrant>> _callback) throws ApiException {
            return listGrantsForClientAsync(userId, clientId, expand, after, limit, _callback);
        }
    }

    /**
     * 
     * Lists all grants for a specified user and client
     * @param userId  (required)
     * @param clientId  (required)
     * @return ListGrantsForClientRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListGrantsForClientRequestBuilder listGrantsForClient(String userId, String clientId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new ListGrantsForClientRequestBuilder(userId, clientId);
    }
    private okhttp3.Call listIdpsForUserCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/idps"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIdpsForUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listIdpsForUser(Async)");
        }

        return listIdpsForUserCall(userId, _callback);

    }


    private ApiResponse<List<IdentityProvider>> listIdpsForUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listIdpsForUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<IdentityProvider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listIdpsForUserAsync(String userId, final ApiCallback<List<IdentityProvider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIdpsForUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProvider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListIdpsForUserRequestBuilder {
        private final String userId;

        private ListIdpsForUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listIdpsForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listIdpsForUserCall(userId, _callback);
        }


        /**
         * Execute listIdpsForUser request
         * @return List&lt;IdentityProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<IdentityProvider> execute() throws ApiException {
            ApiResponse<List<IdentityProvider>> localVarResp = listIdpsForUserWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listIdpsForUser request with HTTP info returned
         * @return ApiResponse&lt;List&lt;IdentityProvider&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<IdentityProvider>> executeWithHttpInfo() throws ApiException {
            return listIdpsForUserWithHttpInfo(userId);
        }

        /**
         * Execute listIdpsForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<IdentityProvider>> _callback) throws ApiException {
            return listIdpsForUserAsync(userId, _callback);
        }
    }

    /**
     * Listing IdPs associated with a user
     * Lists the IdPs associated with the user.
     * @param userId  (required)
     * @return ListIdpsForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListIdpsForUserRequestBuilder listIdpsForUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListIdpsForUserRequestBuilder(userId);
    }
    private okhttp3.Call listRefreshTokensForUserAndClientCall(String userId, String clientId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients/{clientId}/tokens"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRefreshTokensForUserAndClientValidateBeforeCall(String userId, String clientId, String expand, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listRefreshTokensForUserAndClient(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling listRefreshTokensForUserAndClient(Async)");
        }

        return listRefreshTokensForUserAndClientCall(userId, clientId, expand, after, limit, _callback);

    }


    private ApiResponse<List<OAuth2RefreshToken>> listRefreshTokensForUserAndClientWithHttpInfo(String userId, String clientId, String expand, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listRefreshTokensForUserAndClientValidateBeforeCall(userId, clientId, expand, after, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2RefreshToken>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRefreshTokensForUserAndClientAsync(String userId, String clientId, String expand, String after, Integer limit, final ApiCallback<List<OAuth2RefreshToken>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRefreshTokensForUserAndClientValidateBeforeCall(userId, clientId, expand, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2RefreshToken>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRefreshTokensForUserAndClientRequestBuilder {
        private final String userId;
        private final String clientId;
        private String expand;
        private String after;
        private Integer limit;

        private ListRefreshTokensForUserAndClientRequestBuilder(String userId, String clientId) {
            this.userId = userId;
            this.clientId = clientId;
        }

        /**
         * Set expand
         * @param expand  (optional)
         * @return ListRefreshTokensForUserAndClientRequestBuilder
         */
        public ListRefreshTokensForUserAndClientRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return ListRefreshTokensForUserAndClientRequestBuilder
         */
        public ListRefreshTokensForUserAndClientRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListRefreshTokensForUserAndClientRequestBuilder
         */
        public ListRefreshTokensForUserAndClientRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listRefreshTokensForUserAndClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRefreshTokensForUserAndClientCall(userId, clientId, expand, after, limit, _callback);
        }


        /**
         * Execute listRefreshTokensForUserAndClient request
         * @return List&lt;OAuth2RefreshToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<OAuth2RefreshToken> execute() throws ApiException {
            ApiResponse<List<OAuth2RefreshToken>> localVarResp = listRefreshTokensForUserAndClientWithHttpInfo(userId, clientId, expand, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRefreshTokensForUserAndClient request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OAuth2RefreshToken&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OAuth2RefreshToken>> executeWithHttpInfo() throws ApiException {
            return listRefreshTokensForUserAndClientWithHttpInfo(userId, clientId, expand, after, limit);
        }

        /**
         * Execute listRefreshTokensForUserAndClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OAuth2RefreshToken>> _callback) throws ApiException {
            return listRefreshTokensForUserAndClientAsync(userId, clientId, expand, after, limit, _callback);
        }
    }

    /**
     * 
     * Lists all refresh tokens issued for the specified User and Client.
     * @param userId  (required)
     * @param clientId  (required)
     * @return ListRefreshTokensForUserAndClientRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRefreshTokensForUserAndClientRequestBuilder listRefreshTokensForUserAndClient(String userId, String clientId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new ListRefreshTokensForUserAndClientRequestBuilder(userId, clientId);
    }
    private okhttp3.Call listRoleTargetsGroupsCall(String userId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/groups"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoleTargetsGroupsValidateBeforeCall(String userId, String roleId, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listRoleTargetsGroups(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling listRoleTargetsGroups(Async)");
        }

        return listRoleTargetsGroupsCall(userId, roleId, after, limit, _callback);

    }


    private ApiResponse<List<Group>> listRoleTargetsGroupsWithHttpInfo(String userId, String roleId, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listRoleTargetsGroupsValidateBeforeCall(userId, roleId, after, limit, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRoleTargetsGroupsAsync(String userId, String roleId, String after, Integer limit, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoleTargetsGroupsValidateBeforeCall(userId, roleId, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRoleTargetsGroupsRequestBuilder {
        private final String userId;
        private final String roleId;
        private String after;
        private Integer limit;

        private ListRoleTargetsGroupsRequestBuilder(String userId, String roleId) {
            this.userId = userId;
            this.roleId = roleId;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return ListRoleTargetsGroupsRequestBuilder
         */
        public ListRoleTargetsGroupsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListRoleTargetsGroupsRequestBuilder
         */
        public ListRoleTargetsGroupsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listRoleTargetsGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRoleTargetsGroupsCall(userId, roleId, after, limit, _callback);
        }


        /**
         * Execute listRoleTargetsGroups request
         * @return List&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Group> execute() throws ApiException {
            ApiResponse<List<Group>> localVarResp = listRoleTargetsGroupsWithHttpInfo(userId, roleId, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRoleTargetsGroups request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Group&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Group>> executeWithHttpInfo() throws ApiException {
            return listRoleTargetsGroupsWithHttpInfo(userId, roleId, after, limit);
        }

        /**
         * Execute listRoleTargetsGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Group>> _callback) throws ApiException {
            return listRoleTargetsGroupsAsync(userId, roleId, after, limit, _callback);
        }
    }

    /**
     * 
     * Success
     * @param userId  (required)
     * @param roleId  (required)
     * @return ListRoleTargetsGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRoleTargetsGroupsRequestBuilder listRoleTargetsGroups(String userId, String roleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new ListRoleTargetsGroupsRequestBuilder(userId, roleId);
    }
    private okhttp3.Call listSubscriptionsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/subscriptions"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscriptionsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listSubscriptions(Async)");
        }

        return listSubscriptionsCall(userId, _callback);

    }


    private ApiResponse<List<Subscription>> listSubscriptionsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubscriptionsAsync(String userId, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSubscriptionsRequestBuilder {
        private final String userId;

        private ListSubscriptionsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubscriptionsCall(userId, _callback);
        }


        /**
         * Execute listSubscriptions request
         * @return List&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public List<Subscription> execute() throws ApiException {
            ApiResponse<List<Subscription>> localVarResp = listSubscriptionsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Subscription>> executeWithHttpInfo() throws ApiException {
            return listSubscriptionsWithHttpInfo(userId);
        }

        /**
         * Execute listSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Subscription>> _callback) throws ApiException {
            return listSubscriptionsAsync(userId, _callback);
        }
    }

    /**
     * List subscriptions of a User
     * List subscriptions of a User. Only lists subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.
     * @param userId  (required)
     * @return ListSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsRequestBuilder listSubscriptions(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListSubscriptionsRequestBuilder(userId);
    }
    private okhttp3.Call reactivateUserCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/reactivate"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmail", sendEmail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactivateUserValidateBeforeCall(String userId, Boolean sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling reactivateUser(Async)");
        }

        return reactivateUserCall(userId, sendEmail, _callback);

    }


    private ApiResponse<UserActivationToken> reactivateUserWithHttpInfo(String userId, Boolean sendEmail) throws ApiException {
        okhttp3.Call localVarCall = reactivateUserValidateBeforeCall(userId, sendEmail, null);
        Type localVarReturnType = new TypeToken<UserActivationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reactivateUserAsync(String userId, Boolean sendEmail, final ApiCallback<UserActivationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactivateUserValidateBeforeCall(userId, sendEmail, _callback);
        Type localVarReturnType = new TypeToken<UserActivationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReactivateUserRequestBuilder {
        private final String userId;
        private Boolean sendEmail;

        private ReactivateUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set sendEmail
         * @param sendEmail Sends an activation email to the user if true (optional, default to false)
         * @return ReactivateUserRequestBuilder
         */
        public ReactivateUserRequestBuilder sendEmail(Boolean sendEmail) {
            this.sendEmail = sendEmail;
            return this;
        }
        
        /**
         * Build call for reactivateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reactivateUserCall(userId, sendEmail, _callback);
        }


        /**
         * Execute reactivateUser request
         * @return UserActivationToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserActivationToken execute() throws ApiException {
            ApiResponse<UserActivationToken> localVarResp = reactivateUserWithHttpInfo(userId, sendEmail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reactivateUser request with HTTP info returned
         * @return ApiResponse&lt;UserActivationToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserActivationToken> executeWithHttpInfo() throws ApiException {
            return reactivateUserWithHttpInfo(userId, sendEmail);
        }

        /**
         * Execute reactivateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserActivationToken> _callback) throws ApiException {
            return reactivateUserAsync(userId, sendEmail, _callback);
        }
    }

    /**
     * Reactivate User
     * Reactivates a user.  This operation can only be performed on users with a &#x60;PROVISIONED&#x60; status.  This operation restarts the activation workflow if for some reason the user activation was not completed when using the activationToken from [Activate User](https://raw.githubusercontent.com).
     * @param userId  (required)
     * @return ReactivateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReactivateUserRequestBuilder reactivateUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ReactivateUserRequestBuilder(userId);
    }
    private okhttp3.Call removeAppInstanceTargetToAppAdministratorRoleGivenToCall(String userId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAppInstanceTargetToAppAdministratorRoleGivenToValidateBeforeCall(String userId, String roleId, String appName, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeAppInstanceTargetToAppAdministratorRoleGivenTo(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeAppInstanceTargetToAppAdministratorRoleGivenTo(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling removeAppInstanceTargetToAppAdministratorRoleGivenTo(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling removeAppInstanceTargetToAppAdministratorRoleGivenTo(Async)");
        }

        return removeAppInstanceTargetToAppAdministratorRoleGivenToCall(userId, roleId, appName, applicationId, _callback);

    }


    private ApiResponse<Void> removeAppInstanceTargetToAppAdministratorRoleGivenToWithHttpInfo(String userId, String roleId, String appName, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = removeAppInstanceTargetToAppAdministratorRoleGivenToValidateBeforeCall(userId, roleId, appName, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAppInstanceTargetToAppAdministratorRoleGivenToAsync(String userId, String roleId, String appName, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAppInstanceTargetToAppAdministratorRoleGivenToValidateBeforeCall(userId, roleId, appName, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAppInstanceTargetToAppAdministratorRoleGivenToRequestBuilder {
        private final String userId;
        private final String roleId;
        private final String appName;
        private final String applicationId;

        private RemoveAppInstanceTargetToAppAdministratorRoleGivenToRequestBuilder(String userId, String roleId, String appName, String applicationId) {
            this.userId = userId;
            this.roleId = roleId;
            this.appName = appName;
            this.applicationId = applicationId;
        }

        /**
         * Build call for removeAppInstanceTargetToAppAdministratorRoleGivenTo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAppInstanceTargetToAppAdministratorRoleGivenToCall(userId, roleId, appName, applicationId, _callback);
        }


        /**
         * Execute removeAppInstanceTargetToAppAdministratorRoleGivenTo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAppInstanceTargetToAppAdministratorRoleGivenToWithHttpInfo(userId, roleId, appName, applicationId);
        }

        /**
         * Execute removeAppInstanceTargetToAppAdministratorRoleGivenTo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAppInstanceTargetToAppAdministratorRoleGivenToWithHttpInfo(userId, roleId, appName, applicationId);
        }

        /**
         * Execute removeAppInstanceTargetToAppAdministratorRoleGivenTo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAppInstanceTargetToAppAdministratorRoleGivenToAsync(userId, roleId, appName, applicationId, _callback);
        }
    }

    /**
     * Remove App Instance Target to App Administrator Role given to a User
     * Remove App Instance Target to App Administrator Role given to a User
     * @param userId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @param applicationId  (required)
     * @return RemoveAppInstanceTargetToAppAdministratorRoleGivenToRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAppInstanceTargetToAppAdministratorRoleGivenToRequestBuilder removeAppInstanceTargetToAppAdministratorRoleGivenTo(String userId, String roleId, String appName, String applicationId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
            

        return new RemoveAppInstanceTargetToAppAdministratorRoleGivenToRequestBuilder(userId, roleId, appName, applicationId);
    }
    private okhttp3.Call removeTargetGroupCall(String userId, String roleId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTargetGroupValidateBeforeCall(String userId, String roleId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeTargetGroup(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeTargetGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeTargetGroup(Async)");
        }

        return removeTargetGroupCall(userId, roleId, groupId, _callback);

    }


    private ApiResponse<Void> removeTargetGroupWithHttpInfo(String userId, String roleId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = removeTargetGroupValidateBeforeCall(userId, roleId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTargetGroupAsync(String userId, String roleId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTargetGroupValidateBeforeCall(userId, roleId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTargetGroupRequestBuilder {
        private final String userId;
        private final String roleId;
        private final String groupId;

        private RemoveTargetGroupRequestBuilder(String userId, String roleId, String groupId) {
            this.userId = userId;
            this.roleId = roleId;
            this.groupId = groupId;
        }

        /**
         * Build call for removeTargetGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTargetGroupCall(userId, roleId, groupId, _callback);
        }


        /**
         * Execute removeTargetGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTargetGroupWithHttpInfo(userId, roleId, groupId);
        }

        /**
         * Execute removeTargetGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTargetGroupWithHttpInfo(userId, roleId, groupId);
        }

        /**
         * Execute removeTargetGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTargetGroupAsync(userId, roleId, groupId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param userId  (required)
     * @param roleId  (required)
     * @param groupId  (required)
     * @return RemoveTargetGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTargetGroupRequestBuilder removeTargetGroup(String userId, String roleId, String groupId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveTargetGroupRequestBuilder(userId, roleId, groupId);
    }
    private okhttp3.Call resetFactorsOperationCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/reset_factors"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetFactorsOperationValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resetFactorsOperation(Async)");
        }

        return resetFactorsOperationCall(userId, _callback);

    }


    private ApiResponse<Void> resetFactorsOperationWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = resetFactorsOperationValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resetFactorsOperationAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetFactorsOperationValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResetFactorsOperationRequestBuilder {
        private final String userId;

        private ResetFactorsOperationRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for resetFactorsOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetFactorsOperationCall(userId, _callback);
        }


        /**
         * Execute resetFactorsOperation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resetFactorsOperationWithHttpInfo(userId);
        }

        /**
         * Execute resetFactorsOperation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resetFactorsOperationWithHttpInfo(userId);
        }

        /**
         * Execute resetFactorsOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resetFactorsOperationAsync(userId, _callback);
        }
    }

    /**
     * Reset Factors
     * This operation resets all factors for the specified user. All MFA factor enrollments returned to the unenrolled state. The user&#39;s status remains ACTIVE. This link is present only if the user is currently enrolled in one or more MFA factors.
     * @param userId  (required)
     * @return ResetFactorsOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResetFactorsOperationRequestBuilder resetFactorsOperation(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ResetFactorsOperationRequestBuilder(userId);
    }
    private okhttp3.Call revokeAllSessionsCall(String userId, Boolean oauthTokens, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/sessions"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthTokens != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauthTokens", oauthTokens));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAllSessionsValidateBeforeCall(String userId, Boolean oauthTokens, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling revokeAllSessions(Async)");
        }

        return revokeAllSessionsCall(userId, oauthTokens, _callback);

    }


    private ApiResponse<Void> revokeAllSessionsWithHttpInfo(String userId, Boolean oauthTokens) throws ApiException {
        okhttp3.Call localVarCall = revokeAllSessionsValidateBeforeCall(userId, oauthTokens, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeAllSessionsAsync(String userId, Boolean oauthTokens, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAllSessionsValidateBeforeCall(userId, oauthTokens, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeAllSessionsRequestBuilder {
        private final String userId;
        private Boolean oauthTokens;

        private RevokeAllSessionsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set oauthTokens
         * @param oauthTokens Revoke issued OpenID Connect and OAuth refresh and access tokens (optional, default to false)
         * @return RevokeAllSessionsRequestBuilder
         */
        public RevokeAllSessionsRequestBuilder oauthTokens(Boolean oauthTokens) {
            this.oauthTokens = oauthTokens;
            return this;
        }
        
        /**
         * Build call for revokeAllSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAllSessionsCall(userId, oauthTokens, _callback);
        }


        /**
         * Execute revokeAllSessions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeAllSessionsWithHttpInfo(userId, oauthTokens);
        }

        /**
         * Execute revokeAllSessions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeAllSessionsWithHttpInfo(userId, oauthTokens);
        }

        /**
         * Execute revokeAllSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeAllSessionsAsync(userId, oauthTokens, _callback);
        }
    }

    /**
     * 
     * Removes all active identity provider sessions. This forces the user to authenticate on the next operation. Optionally revokes OpenID Connect and OAuth refresh and access tokens issued to the user.
     * @param userId  (required)
     * @return RevokeAllSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAllSessionsRequestBuilder revokeAllSessions(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RevokeAllSessionsRequestBuilder(userId);
    }
    private okhttp3.Call revokeAllTokensCall(String userId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients/{clientId}/tokens"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAllTokensValidateBeforeCall(String userId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling revokeAllTokens(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling revokeAllTokens(Async)");
        }

        return revokeAllTokensCall(userId, clientId, _callback);

    }


    private ApiResponse<Void> revokeAllTokensWithHttpInfo(String userId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = revokeAllTokensValidateBeforeCall(userId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeAllTokensAsync(String userId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAllTokensValidateBeforeCall(userId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeAllTokensRequestBuilder {
        private final String userId;
        private final String clientId;

        private RevokeAllTokensRequestBuilder(String userId, String clientId) {
            this.userId = userId;
            this.clientId = clientId;
        }

        /**
         * Build call for revokeAllTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAllTokensCall(userId, clientId, _callback);
        }


        /**
         * Execute revokeAllTokens request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeAllTokensWithHttpInfo(userId, clientId);
        }

        /**
         * Execute revokeAllTokens request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeAllTokensWithHttpInfo(userId, clientId);
        }

        /**
         * Execute revokeAllTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeAllTokensAsync(userId, clientId, _callback);
        }
    }

    /**
     * 
     * Revokes all refresh tokens issued for the specified User and Client.
     * @param userId  (required)
     * @param clientId  (required)
     * @return RevokeAllTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAllTokensRequestBuilder revokeAllTokens(String userId, String clientId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new RevokeAllTokensRequestBuilder(userId, clientId);
    }
    private okhttp3.Call revokeGrantCall(String userId, String grantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/grants/{grantId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "grantId" + "}", localVarApiClient.escapeString(grantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeGrantValidateBeforeCall(String userId, String grantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling revokeGrant(Async)");
        }

        // verify the required parameter 'grantId' is set
        if (grantId == null) {
            throw new ApiException("Missing the required parameter 'grantId' when calling revokeGrant(Async)");
        }

        return revokeGrantCall(userId, grantId, _callback);

    }


    private ApiResponse<Void> revokeGrantWithHttpInfo(String userId, String grantId) throws ApiException {
        okhttp3.Call localVarCall = revokeGrantValidateBeforeCall(userId, grantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeGrantAsync(String userId, String grantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeGrantValidateBeforeCall(userId, grantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeGrantRequestBuilder {
        private final String userId;
        private final String grantId;

        private RevokeGrantRequestBuilder(String userId, String grantId) {
            this.userId = userId;
            this.grantId = grantId;
        }

        /**
         * Build call for revokeGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeGrantCall(userId, grantId, _callback);
        }


        /**
         * Execute revokeGrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeGrantWithHttpInfo(userId, grantId);
        }

        /**
         * Execute revokeGrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeGrantWithHttpInfo(userId, grantId);
        }

        /**
         * Execute revokeGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeGrantAsync(userId, grantId, _callback);
        }
    }

    /**
     * 
     * Revokes one grant for a specified user
     * @param userId  (required)
     * @param grantId  (required)
     * @return RevokeGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeGrantRequestBuilder revokeGrant(String userId, String grantId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (grantId == null) throw new IllegalArgumentException("\"grantId\" is required but got null");
            

        return new RevokeGrantRequestBuilder(userId, grantId);
    }
    private okhttp3.Call revokeGrantsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/grants"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeGrantsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling revokeGrants(Async)");
        }

        return revokeGrantsCall(userId, _callback);

    }


    private ApiResponse<Void> revokeGrantsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = revokeGrantsValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeGrantsAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeGrantsValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeGrantsRequestBuilder {
        private final String userId;

        private RevokeGrantsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for revokeGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeGrantsCall(userId, _callback);
        }


        /**
         * Execute revokeGrants request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeGrantsWithHttpInfo(userId);
        }

        /**
         * Execute revokeGrants request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeGrantsWithHttpInfo(userId);
        }

        /**
         * Execute revokeGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeGrantsAsync(userId, _callback);
        }
    }

    /**
     * 
     * Revokes all grants for a specified user
     * @param userId  (required)
     * @return RevokeGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeGrantsRequestBuilder revokeGrants(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RevokeGrantsRequestBuilder(userId);
    }
    private okhttp3.Call revokeGrantsForUserAndClientCall(String userId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients/{clientId}/grants"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeGrantsForUserAndClientValidateBeforeCall(String userId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling revokeGrantsForUserAndClient(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling revokeGrantsForUserAndClient(Async)");
        }

        return revokeGrantsForUserAndClientCall(userId, clientId, _callback);

    }


    private ApiResponse<Void> revokeGrantsForUserAndClientWithHttpInfo(String userId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = revokeGrantsForUserAndClientValidateBeforeCall(userId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeGrantsForUserAndClientAsync(String userId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeGrantsForUserAndClientValidateBeforeCall(userId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeGrantsForUserAndClientRequestBuilder {
        private final String userId;
        private final String clientId;

        private RevokeGrantsForUserAndClientRequestBuilder(String userId, String clientId) {
            this.userId = userId;
            this.clientId = clientId;
        }

        /**
         * Build call for revokeGrantsForUserAndClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeGrantsForUserAndClientCall(userId, clientId, _callback);
        }


        /**
         * Execute revokeGrantsForUserAndClient request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeGrantsForUserAndClientWithHttpInfo(userId, clientId);
        }

        /**
         * Execute revokeGrantsForUserAndClient request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeGrantsForUserAndClientWithHttpInfo(userId, clientId);
        }

        /**
         * Execute revokeGrantsForUserAndClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeGrantsForUserAndClientAsync(userId, clientId, _callback);
        }
    }

    /**
     * 
     * Revokes all grants for the specified user and client
     * @param userId  (required)
     * @param clientId  (required)
     * @return RevokeGrantsForUserAndClientRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeGrantsForUserAndClientRequestBuilder revokeGrantsForUserAndClient(String userId, String clientId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new RevokeGrantsForUserAndClientRequestBuilder(userId, clientId);
    }
    private okhttp3.Call revokeTokenForClientCall(String userId, String clientId, String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenForClientValidateBeforeCall(String userId, String clientId, String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling revokeTokenForClient(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling revokeTokenForClient(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling revokeTokenForClient(Async)");
        }

        return revokeTokenForClientCall(userId, clientId, tokenId, _callback);

    }


    private ApiResponse<Void> revokeTokenForClientWithHttpInfo(String userId, String clientId, String tokenId) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenForClientValidateBeforeCall(userId, clientId, tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeTokenForClientAsync(String userId, String clientId, String tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenForClientValidateBeforeCall(userId, clientId, tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeTokenForClientRequestBuilder {
        private final String userId;
        private final String clientId;
        private final String tokenId;

        private RevokeTokenForClientRequestBuilder(String userId, String clientId, String tokenId) {
            this.userId = userId;
            this.clientId = clientId;
            this.tokenId = tokenId;
        }

        /**
         * Build call for revokeTokenForClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeTokenForClientCall(userId, clientId, tokenId, _callback);
        }


        /**
         * Execute revokeTokenForClient request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeTokenForClientWithHttpInfo(userId, clientId, tokenId);
        }

        /**
         * Execute revokeTokenForClient request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeTokenForClientWithHttpInfo(userId, clientId, tokenId);
        }

        /**
         * Execute revokeTokenForClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeTokenForClientAsync(userId, clientId, tokenId, _callback);
        }
    }

    /**
     * 
     * Revokes the specified refresh token.
     * @param userId  (required)
     * @param clientId  (required)
     * @param tokenId  (required)
     * @return RevokeTokenForClientRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeTokenForClientRequestBuilder revokeTokenForClient(String userId, String clientId, String tokenId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (tokenId == null) throw new IllegalArgumentException("\"tokenId\" is required but got null");
            

        return new RevokeTokenForClientRequestBuilder(userId, clientId, tokenId);
    }
    private okhttp3.Call suspendLifecycleCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/suspend"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendLifecycleValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling suspendLifecycle(Async)");
        }

        return suspendLifecycleCall(userId, _callback);

    }


    private ApiResponse<Void> suspendLifecycleWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = suspendLifecycleValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call suspendLifecycleAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendLifecycleValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SuspendLifecycleRequestBuilder {
        private final String userId;

        private SuspendLifecycleRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for suspendLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return suspendLifecycleCall(userId, _callback);
        }


        /**
         * Execute suspendLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            suspendLifecycleWithHttpInfo(userId);
        }

        /**
         * Execute suspendLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return suspendLifecycleWithHttpInfo(userId);
        }

        /**
         * Execute suspendLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return suspendLifecycleAsync(userId, _callback);
        }
    }

    /**
     * Suspend User
     * Suspends a user.  This operation can only be performed on users with an &#x60;ACTIVE&#x60; status.  The user will have a status of &#x60;SUSPENDED&#x60; when the process is complete.
     * @param userId  (required)
     * @return SuspendLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuspendLifecycleRequestBuilder suspendLifecycle(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SuspendLifecycleRequestBuilder(userId);
    }
    private okhttp3.Call unassignRoleCall(String userId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignRoleValidateBeforeCall(String userId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unassignRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling unassignRole(Async)");
        }

        return unassignRoleCall(userId, roleId, _callback);

    }


    private ApiResponse<Void> unassignRoleWithHttpInfo(String userId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(userId, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unassignRoleAsync(String userId, String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(userId, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnassignRoleRequestBuilder {
        private final String userId;
        private final String roleId;

        private UnassignRoleRequestBuilder(String userId, String roleId) {
            this.userId = userId;
            this.roleId = roleId;
        }

        /**
         * Build call for unassignRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unassignRoleCall(userId, roleId, _callback);
        }


        /**
         * Execute unassignRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unassignRoleWithHttpInfo(userId, roleId);
        }

        /**
         * Execute unassignRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unassignRoleWithHttpInfo(userId, roleId);
        }

        /**
         * Execute unassignRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unassignRoleAsync(userId, roleId, _callback);
        }
    }

    /**
     * 
     * Unassigns a role from a user.
     * @param userId  (required)
     * @param roleId  (required)
     * @return UnassignRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public UnassignRoleRequestBuilder unassignRole(String userId, String roleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new UnassignRoleRequestBuilder(userId, roleId);
    }
    private okhttp3.Call unlockUserStatusCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/unlock"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockUserStatusValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unlockUserStatus(Async)");
        }

        return unlockUserStatusCall(userId, _callback);

    }


    private ApiResponse<Void> unlockUserStatusWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = unlockUserStatusValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unlockUserStatusAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockUserStatusValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnlockUserStatusRequestBuilder {
        private final String userId;

        private UnlockUserStatusRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for unlockUserStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unlockUserStatusCall(userId, _callback);
        }


        /**
         * Execute unlockUserStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unlockUserStatusWithHttpInfo(userId);
        }

        /**
         * Execute unlockUserStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unlockUserStatusWithHttpInfo(userId);
        }

        /**
         * Execute unlockUserStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unlockUserStatusAsync(userId, _callback);
        }
    }

    /**
     * Unlock User
     * Unlocks a user with a &#x60;LOCKED_OUT&#x60; status and returns them to &#x60;ACTIVE&#x60; status.  Users will be able to login with their current password.
     * @param userId  (required)
     * @return UnlockUserStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UnlockUserStatusRequestBuilder unlockUserStatus(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UnlockUserStatusRequestBuilder(userId);
    }
    private okhttp3.Call unsuspendLifecycleCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/lifecycle/unsuspend"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsuspendLifecycleValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unsuspendLifecycle(Async)");
        }

        return unsuspendLifecycleCall(userId, _callback);

    }


    private ApiResponse<Void> unsuspendLifecycleWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = unsuspendLifecycleValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unsuspendLifecycleAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsuspendLifecycleValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnsuspendLifecycleRequestBuilder {
        private final String userId;

        private UnsuspendLifecycleRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for unsuspendLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unsuspendLifecycleCall(userId, _callback);
        }


        /**
         * Execute unsuspendLifecycle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unsuspendLifecycleWithHttpInfo(userId);
        }

        /**
         * Execute unsuspendLifecycle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unsuspendLifecycleWithHttpInfo(userId);
        }

        /**
         * Execute unsuspendLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unsuspendLifecycleAsync(userId, _callback);
        }
    }

    /**
     * Unsuspend User
     * Unsuspends a user and returns them to the &#x60;ACTIVE&#x60; state.  This operation can only be performed on users that have a &#x60;SUSPENDED&#x60; status.
     * @param userId  (required)
     * @return UnsuspendLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UnsuspendLifecycleRequestBuilder unsuspendLifecycle(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UnsuspendLifecycleRequestBuilder(userId);
    }
    private okhttp3.Call updateLinkedObjectCall(String associatedUserId, String primaryRelationshipName, String primaryUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{associatedUserId}/linkedObjects/{primaryRelationshipName}/{primaryUserId}"
            .replace("{" + "associatedUserId" + "}", localVarApiClient.escapeString(associatedUserId.toString()))
            .replace("{" + "primaryRelationshipName" + "}", localVarApiClient.escapeString(primaryRelationshipName.toString()))
            .replace("{" + "primaryUserId" + "}", localVarApiClient.escapeString(primaryUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLinkedObjectValidateBeforeCall(String associatedUserId, String primaryRelationshipName, String primaryUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'associatedUserId' is set
        if (associatedUserId == null) {
            throw new ApiException("Missing the required parameter 'associatedUserId' when calling updateLinkedObject(Async)");
        }

        // verify the required parameter 'primaryRelationshipName' is set
        if (primaryRelationshipName == null) {
            throw new ApiException("Missing the required parameter 'primaryRelationshipName' when calling updateLinkedObject(Async)");
        }

        // verify the required parameter 'primaryUserId' is set
        if (primaryUserId == null) {
            throw new ApiException("Missing the required parameter 'primaryUserId' when calling updateLinkedObject(Async)");
        }

        return updateLinkedObjectCall(associatedUserId, primaryRelationshipName, primaryUserId, _callback);

    }


    private ApiResponse<Void> updateLinkedObjectWithHttpInfo(String associatedUserId, String primaryRelationshipName, String primaryUserId) throws ApiException {
        okhttp3.Call localVarCall = updateLinkedObjectValidateBeforeCall(associatedUserId, primaryRelationshipName, primaryUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLinkedObjectAsync(String associatedUserId, String primaryRelationshipName, String primaryUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLinkedObjectValidateBeforeCall(associatedUserId, primaryRelationshipName, primaryUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLinkedObjectRequestBuilder {
        private final String associatedUserId;
        private final String primaryRelationshipName;
        private final String primaryUserId;

        private UpdateLinkedObjectRequestBuilder(String associatedUserId, String primaryRelationshipName, String primaryUserId) {
            this.associatedUserId = associatedUserId;
            this.primaryRelationshipName = primaryRelationshipName;
            this.primaryUserId = primaryUserId;
        }

        /**
         * Build call for updateLinkedObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateLinkedObjectCall(associatedUserId, primaryRelationshipName, primaryUserId, _callback);
        }


        /**
         * Execute updateLinkedObject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateLinkedObjectWithHttpInfo(associatedUserId, primaryRelationshipName, primaryUserId);
        }

        /**
         * Execute updateLinkedObject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateLinkedObjectWithHttpInfo(associatedUserId, primaryRelationshipName, primaryUserId);
        }

        /**
         * Execute updateLinkedObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateLinkedObjectAsync(associatedUserId, primaryRelationshipName, primaryUserId, _callback);
        }
    }

    /**
     * 
     * 
     * @param associatedUserId  (required)
     * @param primaryRelationshipName  (required)
     * @param primaryUserId  (required)
     * @return UpdateLinkedObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLinkedObjectRequestBuilder updateLinkedObject(String associatedUserId, String primaryRelationshipName, String primaryUserId) throws IllegalArgumentException {
        if (associatedUserId == null) throw new IllegalArgumentException("\"associatedUserId\" is required but got null");
            

        if (primaryRelationshipName == null) throw new IllegalArgumentException("\"primaryRelationshipName\" is required but got null");
            

        if (primaryUserId == null) throw new IllegalArgumentException("\"primaryUserId\" is required but got null");
            

        return new UpdateLinkedObjectRequestBuilder(associatedUserId, primaryRelationshipName, primaryUserId);
    }
    private okhttp3.Call updateProfileCall(String userId, User user, Boolean strict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (strict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("strict", strict));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileValidateBeforeCall(String userId, User user, Boolean strict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateProfile(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateProfile(Async)");
        }

        return updateProfileCall(userId, user, strict, _callback);

    }


    private ApiResponse<User> updateProfileWithHttpInfo(String userId, User user, Boolean strict) throws ApiException {
        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(userId, user, strict, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProfileAsync(String userId, User user, Boolean strict, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(userId, user, strict, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProfileRequestBuilder {
        private final String userId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime activated;
        private OffsetDateTime created;
        private UserCredentials credentials;
        private String id;
        private OffsetDateTime lastLogin;
        private OffsetDateTime lastUpdated;
        private OffsetDateTime passwordChanged;
        private UserProfile profile;
        private UserStatus status;
        private OffsetDateTime statusChanged;
        private UserStatus transitioningToStatus;
        private UserType type;
        private Boolean strict;

        private UpdateProfileRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set activated
         * @param activated  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder activated(OffsetDateTime activated) {
            this.activated = activated;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder credentials(UserCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastLogin
         * @param lastLogin  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder lastLogin(OffsetDateTime lastLogin) {
            this.lastLogin = lastLogin;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set passwordChanged
         * @param passwordChanged  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder passwordChanged(OffsetDateTime passwordChanged) {
            this.passwordChanged = passwordChanged;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder profile(UserProfile profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder status(UserStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set statusChanged
         * @param statusChanged  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder statusChanged(OffsetDateTime statusChanged) {
            this.statusChanged = statusChanged;
            return this;
        }
        
        /**
         * Set transitioningToStatus
         * @param transitioningToStatus  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder transitioningToStatus(UserStatus transitioningToStatus) {
            this.transitioningToStatus = transitioningToStatus;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder type(UserType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set strict
         * @param strict  (optional)
         * @return UpdateProfileRequestBuilder
         */
        public UpdateProfileRequestBuilder strict(Boolean strict) {
            this.strict = strict;
            return this;
        }
        
        /**
         * Build call for updateProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            User user = buildBodyParams();
            return updateProfileCall(userId, user, strict, _callback);
        }

        private User buildBodyParams() {
            User user = new User();
            user.embedded(this.embedded);
            user.links(this.links);
            user.activated(this.activated);
            user.created(this.created);
            user.credentials(this.credentials);
            user.id(this.id);
            user.lastLogin(this.lastLogin);
            user.lastUpdated(this.lastUpdated);
            user.passwordChanged(this.passwordChanged);
            user.profile(this.profile);
            user.status(this.status);
            user.statusChanged(this.statusChanged);
            user.transitioningToStatus(this.transitioningToStatus);
            user.type(this.type);
            return user;
        }

        /**
         * Execute updateProfile request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            User user = buildBodyParams();
            ApiResponse<User> localVarResp = updateProfileWithHttpInfo(userId, user, strict);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProfile request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            User user = buildBodyParams();
            return updateProfileWithHttpInfo(userId, user, strict);
        }

        /**
         * Execute updateProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            User user = buildBodyParams();
            return updateProfileAsync(userId, user, strict, _callback);
        }
    }

    /**
     * Update User
     * Update a user&#39;s profile and/or credentials using strict-update semantics.
     * @param userId  (required)
     * @param user  (required)
     * @return UpdateProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProfileRequestBuilder updateProfile(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateProfileRequestBuilder(userId);
    }
    private okhttp3.Call updateProfile_0Call(String userId, User user, Boolean strict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (strict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("strict", strict));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfile_0ValidateBeforeCall(String userId, User user, Boolean strict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateProfile_0(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateProfile_0(Async)");
        }

        return updateProfile_0Call(userId, user, strict, _callback);

    }


    private ApiResponse<User> updateProfile_0WithHttpInfo(String userId, User user, Boolean strict) throws ApiException {
        okhttp3.Call localVarCall = updateProfile_0ValidateBeforeCall(userId, user, strict, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProfile_0Async(String userId, User user, Boolean strict, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfile_0ValidateBeforeCall(userId, user, strict, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProfile0RequestBuilder {
        private final String userId;
        private Map<String, Object> embedded;
        private Map<String, Object> links;
        private OffsetDateTime activated;
        private OffsetDateTime created;
        private UserCredentials credentials;
        private String id;
        private OffsetDateTime lastLogin;
        private OffsetDateTime lastUpdated;
        private OffsetDateTime passwordChanged;
        private UserProfile profile;
        private UserStatus status;
        private OffsetDateTime statusChanged;
        private UserStatus transitioningToStatus;
        private UserType type;
        private Boolean strict;

        private UpdateProfile0RequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set embedded
         * @param embedded  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder embedded(Map<String, Object> embedded) {
            this.embedded = embedded;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set activated
         * @param activated  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder activated(OffsetDateTime activated) {
            this.activated = activated;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder credentials(UserCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastLogin
         * @param lastLogin  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder lastLogin(OffsetDateTime lastLogin) {
            this.lastLogin = lastLogin;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set passwordChanged
         * @param passwordChanged  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder passwordChanged(OffsetDateTime passwordChanged) {
            this.passwordChanged = passwordChanged;
            return this;
        }
        
        /**
         * Set profile
         * @param profile  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder profile(UserProfile profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder status(UserStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set statusChanged
         * @param statusChanged  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder statusChanged(OffsetDateTime statusChanged) {
            this.statusChanged = statusChanged;
            return this;
        }
        
        /**
         * Set transitioningToStatus
         * @param transitioningToStatus  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder transitioningToStatus(UserStatus transitioningToStatus) {
            this.transitioningToStatus = transitioningToStatus;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder type(UserType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set strict
         * @param strict  (optional)
         * @return UpdateProfile0RequestBuilder
         */
        public UpdateProfile0RequestBuilder strict(Boolean strict) {
            this.strict = strict;
            return this;
        }
        
        /**
         * Build call for updateProfile_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            User user = buildBodyParams();
            return updateProfile_0Call(userId, user, strict, _callback);
        }

        private User buildBodyParams() {
            User user = new User();
            user.embedded(this.embedded);
            user.links(this.links);
            user.activated(this.activated);
            user.created(this.created);
            user.credentials(this.credentials);
            user.id(this.id);
            user.lastLogin(this.lastLogin);
            user.lastUpdated(this.lastUpdated);
            user.passwordChanged(this.passwordChanged);
            user.profile(this.profile);
            user.status(this.status);
            user.statusChanged(this.statusChanged);
            user.transitioningToStatus(this.transitioningToStatus);
            user.type(this.type);
            return user;
        }

        /**
         * Execute updateProfile_0 request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            User user = buildBodyParams();
            ApiResponse<User> localVarResp = updateProfile_0WithHttpInfo(userId, user, strict);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProfile_0 request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            User user = buildBodyParams();
            return updateProfile_0WithHttpInfo(userId, user, strict);
        }

        /**
         * Execute updateProfile_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            User user = buildBodyParams();
            return updateProfile_0Async(userId, user, strict, _callback);
        }
    }

    /**
     * 
     * Update a user&#39;s profile or credentials with partial update semantics.
     * @param userId  (required)
     * @param user  (required)
     * @return UpdateProfile0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProfile0RequestBuilder updateProfile_0(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateProfile0RequestBuilder(userId);
    }
    private okhttp3.Call updateRecoveryQuestionCall(String userId, UserCredentials userCredentials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCredentials;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/credentials/change_recovery_question"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecoveryQuestionValidateBeforeCall(String userId, UserCredentials userCredentials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateRecoveryQuestion(Async)");
        }

        // verify the required parameter 'userCredentials' is set
        if (userCredentials == null) {
            throw new ApiException("Missing the required parameter 'userCredentials' when calling updateRecoveryQuestion(Async)");
        }

        return updateRecoveryQuestionCall(userId, userCredentials, _callback);

    }


    private ApiResponse<UserCredentials> updateRecoveryQuestionWithHttpInfo(String userId, UserCredentials userCredentials) throws ApiException {
        okhttp3.Call localVarCall = updateRecoveryQuestionValidateBeforeCall(userId, userCredentials, null);
        Type localVarReturnType = new TypeToken<UserCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecoveryQuestionAsync(String userId, UserCredentials userCredentials, final ApiCallback<UserCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecoveryQuestionValidateBeforeCall(userId, userCredentials, _callback);
        Type localVarReturnType = new TypeToken<UserCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecoveryQuestionRequestBuilder {
        private final String userId;
        private PasswordCredential password;
        private AuthenticationProvider provider;
        private RecoveryQuestionCredential recoveryQuestion;

        private UpdateRecoveryQuestionRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set password
         * @param password  (optional)
         * @return UpdateRecoveryQuestionRequestBuilder
         */
        public UpdateRecoveryQuestionRequestBuilder password(PasswordCredential password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return UpdateRecoveryQuestionRequestBuilder
         */
        public UpdateRecoveryQuestionRequestBuilder provider(AuthenticationProvider provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set recoveryQuestion
         * @param recoveryQuestion  (optional)
         * @return UpdateRecoveryQuestionRequestBuilder
         */
        public UpdateRecoveryQuestionRequestBuilder recoveryQuestion(RecoveryQuestionCredential recoveryQuestion) {
            this.recoveryQuestion = recoveryQuestion;
            return this;
        }
        
        /**
         * Build call for updateRecoveryQuestion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserCredentials userCredentials = buildBodyParams();
            return updateRecoveryQuestionCall(userId, userCredentials, _callback);
        }

        private UserCredentials buildBodyParams() {
            UserCredentials userCredentials = new UserCredentials();
            userCredentials.password(this.password);
            userCredentials.provider(this.provider);
            userCredentials.recoveryQuestion(this.recoveryQuestion);
            return userCredentials;
        }

        /**
         * Execute updateRecoveryQuestion request
         * @return UserCredentials
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UserCredentials execute() throws ApiException {
            UserCredentials userCredentials = buildBodyParams();
            ApiResponse<UserCredentials> localVarResp = updateRecoveryQuestionWithHttpInfo(userId, userCredentials);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecoveryQuestion request with HTTP info returned
         * @return ApiResponse&lt;UserCredentials&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserCredentials> executeWithHttpInfo() throws ApiException {
            UserCredentials userCredentials = buildBodyParams();
            return updateRecoveryQuestionWithHttpInfo(userId, userCredentials);
        }

        /**
         * Execute updateRecoveryQuestion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserCredentials> _callback) throws ApiException {
            UserCredentials userCredentials = buildBodyParams();
            return updateRecoveryQuestionAsync(userId, userCredentials, _callback);
        }
    }

    /**
     * Change Recovery Question
     * Changes a user&#39;s recovery question &amp; answer credential by validating the user&#39;s current password.  This operation can only be performed on users in **STAGED**, **ACTIVE** or **RECOVERY** &#x60;status&#x60; that have a valid password credential
     * @param userId  (required)
     * @param userCredentials  (required)
     * @return UpdateRecoveryQuestionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecoveryQuestionRequestBuilder updateRecoveryQuestion(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateRecoveryQuestionRequestBuilder(userId);
    }
    private okhttp3.Call updateRolesCatalogAppsCall(String userId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRolesCatalogAppsValidateBeforeCall(String userId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateRolesCatalogApps(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRolesCatalogApps(Async)");
        }

        return updateRolesCatalogAppsCall(userId, roleId, _callback);

    }


    private ApiResponse<Void> updateRolesCatalogAppsWithHttpInfo(String userId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = updateRolesCatalogAppsValidateBeforeCall(userId, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRolesCatalogAppsAsync(String userId, String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRolesCatalogAppsValidateBeforeCall(userId, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRolesCatalogAppsRequestBuilder {
        private final String userId;
        private final String roleId;

        private UpdateRolesCatalogAppsRequestBuilder(String userId, String roleId) {
            this.userId = userId;
            this.roleId = roleId;
        }

        /**
         * Build call for updateRolesCatalogApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRolesCatalogAppsCall(userId, roleId, _callback);
        }


        /**
         * Execute updateRolesCatalogApps request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateRolesCatalogAppsWithHttpInfo(userId, roleId);
        }

        /**
         * Execute updateRolesCatalogApps request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateRolesCatalogAppsWithHttpInfo(userId, roleId);
        }

        /**
         * Execute updateRolesCatalogApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateRolesCatalogAppsAsync(userId, roleId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param userId  (required)
     * @param roleId  (required)
     * @return UpdateRolesCatalogAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRolesCatalogAppsRequestBuilder updateRolesCatalogApps(String userId, String roleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        return new UpdateRolesCatalogAppsRequestBuilder(userId, roleId);
    }
    private okhttp3.Call updateRolesCatalogApps_0Call(String userId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRolesCatalogApps_0ValidateBeforeCall(String userId, String roleId, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateRolesCatalogApps_0(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRolesCatalogApps_0(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling updateRolesCatalogApps_0(Async)");
        }

        return updateRolesCatalogApps_0Call(userId, roleId, appName, _callback);

    }


    private ApiResponse<Void> updateRolesCatalogApps_0WithHttpInfo(String userId, String roleId, String appName) throws ApiException {
        okhttp3.Call localVarCall = updateRolesCatalogApps_0ValidateBeforeCall(userId, roleId, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRolesCatalogApps_0Async(String userId, String roleId, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRolesCatalogApps_0ValidateBeforeCall(userId, roleId, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRolesCatalogApps0RequestBuilder {
        private final String userId;
        private final String roleId;
        private final String appName;

        private UpdateRolesCatalogApps0RequestBuilder(String userId, String roleId, String appName) {
            this.userId = userId;
            this.roleId = roleId;
            this.appName = appName;
        }

        /**
         * Build call for updateRolesCatalogApps_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRolesCatalogApps_0Call(userId, roleId, appName, _callback);
        }


        /**
         * Execute updateRolesCatalogApps_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateRolesCatalogApps_0WithHttpInfo(userId, roleId, appName);
        }

        /**
         * Execute updateRolesCatalogApps_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateRolesCatalogApps_0WithHttpInfo(userId, roleId, appName);
        }

        /**
         * Execute updateRolesCatalogApps_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateRolesCatalogApps_0Async(userId, roleId, appName, _callback);
        }
    }

    /**
     * 
     * Success
     * @param userId  (required)
     * @param roleId  (required)
     * @param appName  (required)
     * @return UpdateRolesCatalogApps0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRolesCatalogApps0RequestBuilder updateRolesCatalogApps_0(String userId, String roleId, String appName) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new UpdateRolesCatalogApps0RequestBuilder(userId, roleId, appName);
    }
    private okhttp3.Call updateRolesCatalogApps_1Call(String userId, String roleId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRolesCatalogApps_1ValidateBeforeCall(String userId, String roleId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateRolesCatalogApps_1(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRolesCatalogApps_1(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateRolesCatalogApps_1(Async)");
        }

        return updateRolesCatalogApps_1Call(userId, roleId, groupId, _callback);

    }


    private ApiResponse<Void> updateRolesCatalogApps_1WithHttpInfo(String userId, String roleId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = updateRolesCatalogApps_1ValidateBeforeCall(userId, roleId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRolesCatalogApps_1Async(String userId, String roleId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRolesCatalogApps_1ValidateBeforeCall(userId, roleId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRolesCatalogApps1RequestBuilder {
        private final String userId;
        private final String roleId;
        private final String groupId;

        private UpdateRolesCatalogApps1RequestBuilder(String userId, String roleId, String groupId) {
            this.userId = userId;
            this.roleId = roleId;
            this.groupId = groupId;
        }

        /**
         * Build call for updateRolesCatalogApps_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRolesCatalogApps_1Call(userId, roleId, groupId, _callback);
        }


        /**
         * Execute updateRolesCatalogApps_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateRolesCatalogApps_1WithHttpInfo(userId, roleId, groupId);
        }

        /**
         * Execute updateRolesCatalogApps_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateRolesCatalogApps_1WithHttpInfo(userId, roleId, groupId);
        }

        /**
         * Execute updateRolesCatalogApps_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateRolesCatalogApps_1Async(userId, roleId, groupId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param userId  (required)
     * @param roleId  (required)
     * @param groupId  (required)
     * @return UpdateRolesCatalogApps1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRolesCatalogApps1RequestBuilder updateRolesCatalogApps_1(String userId, String roleId, String groupId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateRolesCatalogApps1RequestBuilder(userId, roleId, groupId);
    }
}
