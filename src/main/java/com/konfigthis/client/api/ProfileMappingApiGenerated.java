/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProfileMapping;
import com.konfigthis.client.model.ProfileMappingProperty;
import com.konfigthis.client.model.ProfileMappingSource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProfileMappingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileMappingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileMappingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String mappingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/mappings/{mappingId}"
            .replace("{" + "mappingId" + "}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String mappingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling getById(Async)");
        }

        return getByIdCall(mappingId, _callback);

    }


    private ApiResponse<ProfileMapping> getByIdWithHttpInfo(String mappingId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(mappingId, null);
        Type localVarReturnType = new TypeToken<ProfileMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String mappingId, final ApiCallback<ProfileMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(mappingId, _callback);
        Type localVarReturnType = new TypeToken<ProfileMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String mappingId;

        private GetByIdRequestBuilder(String mappingId) {
            this.mappingId = mappingId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(mappingId, _callback);
        }


        /**
         * Execute getById request
         * @return ProfileMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ProfileMapping execute() throws ApiException {
            ApiResponse<ProfileMapping> localVarResp = getByIdWithHttpInfo(mappingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ProfileMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileMapping> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(mappingId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileMapping> _callback) throws ApiException {
            return getByIdAsync(mappingId, _callback);
        }
    }

    /**
     * Get Profile Mapping
     * Fetches a single Profile Mapping referenced by its ID.
     * @param mappingId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String mappingId) throws IllegalArgumentException {
        if (mappingId == null) throw new IllegalArgumentException("\"mappingId\" is required but got null");
            

        return new GetByIdRequestBuilder(mappingId);
    }
    private okhttp3.Call listWithPaginationCall(String after, Integer limit, String sourceId, String targetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWithPaginationValidateBeforeCall(String after, Integer limit, String sourceId, String targetId, final ApiCallback _callback) throws ApiException {
        return listWithPaginationCall(after, limit, sourceId, targetId, _callback);

    }


    private ApiResponse<List<ProfileMapping>> listWithPaginationWithHttpInfo(String after, Integer limit, String sourceId, String targetId) throws ApiException {
        okhttp3.Call localVarCall = listWithPaginationValidateBeforeCall(after, limit, sourceId, targetId, null);
        Type localVarReturnType = new TypeToken<List<ProfileMapping>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWithPaginationAsync(String after, Integer limit, String sourceId, String targetId, final ApiCallback<List<ProfileMapping>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWithPaginationValidateBeforeCall(after, limit, sourceId, targetId, _callback);
        Type localVarReturnType = new TypeToken<List<ProfileMapping>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWithPaginationRequestBuilder {
        private String after;
        private Integer limit;
        private String sourceId;
        private String targetId;

        private ListWithPaginationRequestBuilder() {
        }

        /**
         * Set after
         * @param after  (optional)
         * @return ListWithPaginationRequestBuilder
         */
        public ListWithPaginationRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to -1)
         * @return ListWithPaginationRequestBuilder
         */
        public ListWithPaginationRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set sourceId
         * @param sourceId  (optional)
         * @return ListWithPaginationRequestBuilder
         */
        public ListWithPaginationRequestBuilder sourceId(String sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId  (optional, default to )
         * @return ListWithPaginationRequestBuilder
         */
        public ListWithPaginationRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Build call for listWithPagination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWithPaginationCall(after, limit, sourceId, targetId, _callback);
        }


        /**
         * Execute listWithPagination request
         * @return List&lt;ProfileMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<ProfileMapping> execute() throws ApiException {
            ApiResponse<List<ProfileMapping>> localVarResp = listWithPaginationWithHttpInfo(after, limit, sourceId, targetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWithPagination request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProfileMapping&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProfileMapping>> executeWithHttpInfo() throws ApiException {
            return listWithPaginationWithHttpInfo(after, limit, sourceId, targetId);
        }

        /**
         * Execute listWithPagination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProfileMapping>> _callback) throws ApiException {
            return listWithPaginationAsync(after, limit, sourceId, targetId, _callback);
        }
    }

    /**
     * 
     * Enumerates Profile Mappings in your organization with pagination.
     * @return ListWithPaginationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListWithPaginationRequestBuilder listWithPagination() throws IllegalArgumentException {
        return new ListWithPaginationRequestBuilder();
    }
    private okhttp3.Call updatePropertyMappingsCall(String mappingId, ProfileMapping profileMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profileMapping;

        // create path and map variables
        String localVarPath = "/api/v1/mappings/{mappingId}"
            .replace("{" + "mappingId" + "}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyMappingsValidateBeforeCall(String mappingId, ProfileMapping profileMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling updatePropertyMappings(Async)");
        }

        // verify the required parameter 'profileMapping' is set
        if (profileMapping == null) {
            throw new ApiException("Missing the required parameter 'profileMapping' when calling updatePropertyMappings(Async)");
        }

        return updatePropertyMappingsCall(mappingId, profileMapping, _callback);

    }


    private ApiResponse<ProfileMapping> updatePropertyMappingsWithHttpInfo(String mappingId, ProfileMapping profileMapping) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyMappingsValidateBeforeCall(mappingId, profileMapping, null);
        Type localVarReturnType = new TypeToken<ProfileMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePropertyMappingsAsync(String mappingId, ProfileMapping profileMapping, final ApiCallback<ProfileMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyMappingsValidateBeforeCall(mappingId, profileMapping, _callback);
        Type localVarReturnType = new TypeToken<ProfileMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePropertyMappingsRequestBuilder {
        private final String mappingId;
        private Map<String, Object> links;
        private String id;
        private Map<String, ProfileMappingProperty> properties;
        private ProfileMappingSource source;
        private ProfileMappingSource target;

        private UpdatePropertyMappingsRequestBuilder(String mappingId) {
            this.mappingId = mappingId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdatePropertyMappingsRequestBuilder
         */
        public UpdatePropertyMappingsRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdatePropertyMappingsRequestBuilder
         */
        public UpdatePropertyMappingsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set properties
         * @param properties  (optional)
         * @return UpdatePropertyMappingsRequestBuilder
         */
        public UpdatePropertyMappingsRequestBuilder properties(Map<String, ProfileMappingProperty> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return UpdatePropertyMappingsRequestBuilder
         */
        public UpdatePropertyMappingsRequestBuilder source(ProfileMappingSource source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set target
         * @param target  (optional)
         * @return UpdatePropertyMappingsRequestBuilder
         */
        public UpdatePropertyMappingsRequestBuilder target(ProfileMappingSource target) {
            this.target = target;
            return this;
        }
        
        /**
         * Build call for updatePropertyMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProfileMapping profileMapping = buildBodyParams();
            return updatePropertyMappingsCall(mappingId, profileMapping, _callback);
        }

        private ProfileMapping buildBodyParams() {
            ProfileMapping profileMapping = new ProfileMapping();
            profileMapping.links(this.links);
            profileMapping.id(this.id);
            profileMapping.properties(this.properties);
            profileMapping.source(this.source);
            profileMapping.target(this.target);
            return profileMapping;
        }

        /**
         * Execute updatePropertyMappings request
         * @return ProfileMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ProfileMapping execute() throws ApiException {
            ProfileMapping profileMapping = buildBodyParams();
            ApiResponse<ProfileMapping> localVarResp = updatePropertyMappingsWithHttpInfo(mappingId, profileMapping);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePropertyMappings request with HTTP info returned
         * @return ApiResponse&lt;ProfileMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileMapping> executeWithHttpInfo() throws ApiException {
            ProfileMapping profileMapping = buildBodyParams();
            return updatePropertyMappingsWithHttpInfo(mappingId, profileMapping);
        }

        /**
         * Execute updatePropertyMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileMapping> _callback) throws ApiException {
            ProfileMapping profileMapping = buildBodyParams();
            return updatePropertyMappingsAsync(mappingId, profileMapping, _callback);
        }
    }

    /**
     * Update Profile Mapping
     * Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
     * @param mappingId  (required)
     * @param profileMapping  (required)
     * @return UpdatePropertyMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePropertyMappingsRequestBuilder updatePropertyMappings(String mappingId) throws IllegalArgumentException {
        if (mappingId == null) throw new IllegalArgumentException("\"mappingId\" is required but got null");
            

        return new UpdatePropertyMappingsRequestBuilder(mappingId);
    }
}
