/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DNSRecord;
import com.konfigthis.client.model.Domain;
import com.konfigthis.client.model.DomainCertificate;
import com.konfigthis.client.model.DomainCertificateMetadata;
import com.konfigthis.client.model.DomainCertificateSourceType;
import com.konfigthis.client.model.DomainCertificateType;
import com.konfigthis.client.model.DomainListResponse;
import com.konfigthis.client.model.DomainValidationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DomainApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DomainApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCertificateCall(String domainId, DomainCertificate domainCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainCertificate;

        // create path and map variables
        String localVarPath = "/api/v1/domains/{domainId}/certificate"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCertificateValidateBeforeCall(String domainId, DomainCertificate domainCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling createCertificate(Async)");
        }

        // verify the required parameter 'domainCertificate' is set
        if (domainCertificate == null) {
            throw new ApiException("Missing the required parameter 'domainCertificate' when calling createCertificate(Async)");
        }

        return createCertificateCall(domainId, domainCertificate, _callback);

    }


    private ApiResponse<Void> createCertificateWithHttpInfo(String domainId, DomainCertificate domainCertificate) throws ApiException {
        okhttp3.Call localVarCall = createCertificateValidateBeforeCall(domainId, domainCertificate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCertificateAsync(String domainId, DomainCertificate domainCertificate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCertificateValidateBeforeCall(domainId, domainCertificate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCertificateRequestBuilder {
        private final String domainId;
        private String certificate;
        private String certificateChain;
        private String privateKey;
        private DomainCertificateType type;

        private CreateCertificateRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Set certificate
         * @param certificate  (optional)
         * @return CreateCertificateRequestBuilder
         */
        public CreateCertificateRequestBuilder certificate(String certificate) {
            this.certificate = certificate;
            return this;
        }
        
        /**
         * Set certificateChain
         * @param certificateChain  (optional)
         * @return CreateCertificateRequestBuilder
         */
        public CreateCertificateRequestBuilder certificateChain(String certificateChain) {
            this.certificateChain = certificateChain;
            return this;
        }
        
        /**
         * Set privateKey
         * @param privateKey  (optional)
         * @return CreateCertificateRequestBuilder
         */
        public CreateCertificateRequestBuilder privateKey(String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateCertificateRequestBuilder
         */
        public CreateCertificateRequestBuilder type(DomainCertificateType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createCertificate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainCertificate domainCertificate = buildBodyParams();
            return createCertificateCall(domainId, domainCertificate, _callback);
        }

        private DomainCertificate buildBodyParams() {
            DomainCertificate domainCertificate = new DomainCertificate();
            domainCertificate.certificate(this.certificate);
            domainCertificate.certificateChain(this.certificateChain);
            domainCertificate.privateKey(this.privateKey);
            domainCertificate.type(this.type);
            return domainCertificate;
        }

        /**
         * Execute createCertificate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainCertificate domainCertificate = buildBodyParams();
            createCertificateWithHttpInfo(domainId, domainCertificate);
        }

        /**
         * Execute createCertificate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainCertificate domainCertificate = buildBodyParams();
            return createCertificateWithHttpInfo(domainId, domainCertificate);
        }

        /**
         * Execute createCertificate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainCertificate domainCertificate = buildBodyParams();
            return createCertificateAsync(domainId, domainCertificate, _callback);
        }
    }

    /**
     * Create Certificate
     * Creates the Certificate for the Domain.
     * @param domainId  (required)
     * @param domainCertificate  (required)
     * @return CreateCertificateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public CreateCertificateRequestBuilder createCertificate(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new CreateCertificateRequestBuilder(domainId);
    }
    private okhttp3.Call createNewDomainCall(Domain domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domain;

        // create path and map variables
        String localVarPath = "/api/v1/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDomainValidateBeforeCall(Domain domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createNewDomain(Async)");
        }

        return createNewDomainCall(domain, _callback);

    }


    private ApiResponse<Domain> createNewDomainWithHttpInfo(Domain domain) throws ApiException {
        okhttp3.Call localVarCall = createNewDomainValidateBeforeCall(domain, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDomainAsync(Domain domain, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDomainValidateBeforeCall(domain, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDomainRequestBuilder {
        private DomainCertificateSourceType certificateSourceType;
        private List<DNSRecord> dnsRecords;
        private String domain;
        private String id;
        private DomainCertificateMetadata publicCertificate;
        private DomainValidationStatus validationStatus;

        private CreateNewDomainRequestBuilder() {
        }

        /**
         * Set certificateSourceType
         * @param certificateSourceType  (optional)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder certificateSourceType(DomainCertificateSourceType certificateSourceType) {
            this.certificateSourceType = certificateSourceType;
            return this;
        }
        
        /**
         * Set dnsRecords
         * @param dnsRecords  (optional)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder dnsRecords(List<DNSRecord> dnsRecords) {
            this.dnsRecords = dnsRecords;
            return this;
        }
        
        /**
         * Set domain
         * @param domain  (optional)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set publicCertificate
         * @param publicCertificate  (optional)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder publicCertificate(DomainCertificateMetadata publicCertificate) {
            this.publicCertificate = publicCertificate;
            return this;
        }
        
        /**
         * Set validationStatus
         * @param validationStatus  (optional)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder validationStatus(DomainValidationStatus validationStatus) {
            this.validationStatus = validationStatus;
            return this;
        }
        
        /**
         * Build call for createNewDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Domain domain = buildBodyParams();
            return createNewDomainCall(domain, _callback);
        }

        private Domain buildBodyParams() {
            Domain domain = new Domain();
            domain.certificateSourceType(this.certificateSourceType);
            domain.dnsRecords(this.dnsRecords);
            domain.domain(this.domain);
            domain.id(this.id);
            domain.publicCertificate(this.publicCertificate);
            domain.validationStatus(this.validationStatus);
            return domain;
        }

        /**
         * Execute createNewDomain request
         * @return Domain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Domain execute() throws ApiException {
            Domain domain = buildBodyParams();
            ApiResponse<Domain> localVarResp = createNewDomainWithHttpInfo(domain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDomain request with HTTP info returned
         * @return ApiResponse&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Domain> executeWithHttpInfo() throws ApiException {
            Domain domain = buildBodyParams();
            return createNewDomainWithHttpInfo(domain);
        }

        /**
         * Execute createNewDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Domain> _callback) throws ApiException {
            Domain domain = buildBodyParams();
            return createNewDomainAsync(domain, _callback);
        }
    }

    /**
     * Create Domain
     * Creates your domain.
     * @param domain  (required)
     * @return CreateNewDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDomainRequestBuilder createNewDomain() throws IllegalArgumentException {
        return new CreateNewDomainRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domains/{domainId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getById(Async)");
        }

        return getByIdCall(domainId, _callback);

    }


    private ApiResponse<Domain> getByIdWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String domainId, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String domainId;

        private GetByIdRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(domainId, _callback);
        }


        /**
         * Execute getById request
         * @return Domain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Domain execute() throws ApiException {
            ApiResponse<Domain> localVarResp = getByIdWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Domain> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(domainId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Domain> _callback) throws ApiException {
            return getByIdAsync(domainId, _callback);
        }
    }

    /**
     * Get Domain
     * Fetches a Domain by &#x60;id&#x60;.
     * @param domainId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new GetByIdRequestBuilder(domainId);
    }
    private okhttp3.Call listVerifiedCustomCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVerifiedCustomValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listVerifiedCustomCall(_callback);

    }


    private ApiResponse<DomainListResponse> listVerifiedCustomWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listVerifiedCustomValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVerifiedCustomAsync(final ApiCallback<DomainListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVerifiedCustomValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVerifiedCustomRequestBuilder {

        private ListVerifiedCustomRequestBuilder() {
        }

        /**
         * Build call for listVerifiedCustom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVerifiedCustomCall(_callback);
        }


        /**
         * Execute listVerifiedCustom request
         * @return DomainListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DomainListResponse execute() throws ApiException {
            ApiResponse<DomainListResponse> localVarResp = listVerifiedCustomWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVerifiedCustom request with HTTP info returned
         * @return ApiResponse&lt;DomainListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainListResponse> executeWithHttpInfo() throws ApiException {
            return listVerifiedCustomWithHttpInfo();
        }

        /**
         * Execute listVerifiedCustom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainListResponse> _callback) throws ApiException {
            return listVerifiedCustomAsync(_callback);
        }
    }

    /**
     * List Domains
     * List all verified custom Domains for the org.
     * @return ListVerifiedCustomRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListVerifiedCustomRequestBuilder listVerifiedCustom() throws IllegalArgumentException {
        return new ListVerifiedCustomRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domains/{domainId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling removeById(Async)");
        }

        return removeByIdCall(domainId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(domainId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String domainId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(domainId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String domainId;

        private RemoveByIdRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(domainId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(domainId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(domainId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(domainId, _callback);
        }
    }

    /**
     * Delete Domain
     * Deletes a Domain by &#x60;id&#x60;.
     * @param domainId  (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(domainId);
    }
    private okhttp3.Call verifyByIdCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domains/{domainId}/verify"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyByIdValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling verifyById(Async)");
        }

        return verifyByIdCall(domainId, _callback);

    }


    private ApiResponse<Domain> verifyByIdWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = verifyByIdValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyByIdAsync(String domainId, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyByIdValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyByIdRequestBuilder {
        private final String domainId;

        private VerifyByIdRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for verifyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyByIdCall(domainId, _callback);
        }


        /**
         * Execute verifyById request
         * @return Domain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Domain execute() throws ApiException {
            ApiResponse<Domain> localVarResp = verifyByIdWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyById request with HTTP info returned
         * @return ApiResponse&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Domain> executeWithHttpInfo() throws ApiException {
            return verifyByIdWithHttpInfo(domainId);
        }

        /**
         * Execute verifyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Domain> _callback) throws ApiException {
            return verifyByIdAsync(domainId, _callback);
        }
    }

    /**
     * Verify Domain
     * Verifies the Domain by &#x60;id&#x60;.
     * @param domainId  (required)
     * @return VerifyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyByIdRequestBuilder verifyById(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new VerifyByIdRequestBuilder(domainId);
    }
}
