/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.Scope;
import com.konfigthis.client.model.TrustedOrigin;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TrustedOriginApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrustedOriginApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TrustedOriginApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateLifecycleSuccessCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate"
            .replace("{" + "trustedOriginId" + "}", localVarApiClient.escapeString(trustedOriginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLifecycleSuccessValidateBeforeCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustedOriginId' is set
        if (trustedOriginId == null) {
            throw new ApiException("Missing the required parameter 'trustedOriginId' when calling activateLifecycleSuccess(Async)");
        }

        return activateLifecycleSuccessCall(trustedOriginId, _callback);

    }


    private ApiResponse<TrustedOrigin> activateLifecycleSuccessWithHttpInfo(String trustedOriginId) throws ApiException {
        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(trustedOriginId, null);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateLifecycleSuccessAsync(String trustedOriginId, final ApiCallback<TrustedOrigin> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLifecycleSuccessValidateBeforeCall(trustedOriginId, _callback);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateLifecycleSuccessRequestBuilder {
        private final String trustedOriginId;

        private ActivateLifecycleSuccessRequestBuilder(String trustedOriginId) {
            this.trustedOriginId = trustedOriginId;
        }

        /**
         * Build call for activateLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateLifecycleSuccessCall(trustedOriginId, _callback);
        }


        /**
         * Execute activateLifecycleSuccess request
         * @return TrustedOrigin
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TrustedOrigin execute() throws ApiException {
            ApiResponse<TrustedOrigin> localVarResp = activateLifecycleSuccessWithHttpInfo(trustedOriginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;TrustedOrigin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrustedOrigin> executeWithHttpInfo() throws ApiException {
            return activateLifecycleSuccessWithHttpInfo(trustedOriginId);
        }

        /**
         * Execute activateLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrustedOrigin> _callback) throws ApiException {
            return activateLifecycleSuccessAsync(trustedOriginId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param trustedOriginId  (required)
     * @return ActivateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActivateLifecycleSuccessRequestBuilder activateLifecycleSuccess(String trustedOriginId) throws IllegalArgumentException {
        if (trustedOriginId == null) throw new IllegalArgumentException("\"trustedOriginId\" is required but got null");
            

        return new ActivateLifecycleSuccessRequestBuilder(trustedOriginId);
    }
    private okhttp3.Call createSuccessCall(TrustedOrigin trustedOrigin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trustedOrigin;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSuccessValidateBeforeCall(TrustedOrigin trustedOrigin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustedOrigin' is set
        if (trustedOrigin == null) {
            throw new ApiException("Missing the required parameter 'trustedOrigin' when calling createSuccess(Async)");
        }

        return createSuccessCall(trustedOrigin, _callback);

    }


    private ApiResponse<TrustedOrigin> createSuccessWithHttpInfo(TrustedOrigin trustedOrigin) throws ApiException {
        okhttp3.Call localVarCall = createSuccessValidateBeforeCall(trustedOrigin, null);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSuccessAsync(TrustedOrigin trustedOrigin, final ApiCallback<TrustedOrigin> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSuccessValidateBeforeCall(trustedOrigin, _callback);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSuccessRequestBuilder {
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String createdBy;
        private String id;
        private OffsetDateTime lastUpdated;
        private String lastUpdatedBy;
        private String name;
        private String origin;
        private List<Scope> scopes;
        private String status;

        private CreateSuccessRequestBuilder() {
        }

        /**
         * Set links
         * @param links  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set lastUpdatedBy
         * @param lastUpdatedBy  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder lastUpdatedBy(String lastUpdatedBy) {
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set origin
         * @param origin  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder origin(String origin) {
            this.origin = origin;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder scopes(List<Scope> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateSuccessRequestBuilder
         */
        public CreateSuccessRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            return createSuccessCall(trustedOrigin, _callback);
        }

        private TrustedOrigin buildBodyParams() {
            TrustedOrigin trustedOrigin = new TrustedOrigin();
            trustedOrigin.links(this.links);
            trustedOrigin.created(this.created);
            trustedOrigin.createdBy(this.createdBy);
            trustedOrigin.id(this.id);
            trustedOrigin.lastUpdated(this.lastUpdated);
            trustedOrigin.lastUpdatedBy(this.lastUpdatedBy);
            trustedOrigin.name(this.name);
            trustedOrigin.origin(this.origin);
            trustedOrigin.scopes(this.scopes);
            trustedOrigin.status(this.status);
            return trustedOrigin;
        }

        /**
         * Execute createSuccess request
         * @return TrustedOrigin
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TrustedOrigin execute() throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            ApiResponse<TrustedOrigin> localVarResp = createSuccessWithHttpInfo(trustedOrigin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSuccess request with HTTP info returned
         * @return ApiResponse&lt;TrustedOrigin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrustedOrigin> executeWithHttpInfo() throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            return createSuccessWithHttpInfo(trustedOrigin);
        }

        /**
         * Execute createSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrustedOrigin> _callback) throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            return createSuccessAsync(trustedOrigin, _callback);
        }
    }

    /**
     * 
     * Success
     * @param trustedOrigin  (required)
     * @return CreateSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateSuccessRequestBuilder createSuccess() throws IllegalArgumentException {
        return new CreateSuccessRequestBuilder();
    }
    private okhttp3.Call deactivateLifecycleSuccessCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate"
            .replace("{" + "trustedOriginId" + "}", localVarApiClient.escapeString(trustedOriginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateLifecycleSuccessValidateBeforeCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustedOriginId' is set
        if (trustedOriginId == null) {
            throw new ApiException("Missing the required parameter 'trustedOriginId' when calling deactivateLifecycleSuccess(Async)");
        }

        return deactivateLifecycleSuccessCall(trustedOriginId, _callback);

    }


    private ApiResponse<TrustedOrigin> deactivateLifecycleSuccessWithHttpInfo(String trustedOriginId) throws ApiException {
        okhttp3.Call localVarCall = deactivateLifecycleSuccessValidateBeforeCall(trustedOriginId, null);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateLifecycleSuccessAsync(String trustedOriginId, final ApiCallback<TrustedOrigin> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateLifecycleSuccessValidateBeforeCall(trustedOriginId, _callback);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateLifecycleSuccessRequestBuilder {
        private final String trustedOriginId;

        private DeactivateLifecycleSuccessRequestBuilder(String trustedOriginId) {
            this.trustedOriginId = trustedOriginId;
        }

        /**
         * Build call for deactivateLifecycleSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateLifecycleSuccessCall(trustedOriginId, _callback);
        }


        /**
         * Execute deactivateLifecycleSuccess request
         * @return TrustedOrigin
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TrustedOrigin execute() throws ApiException {
            ApiResponse<TrustedOrigin> localVarResp = deactivateLifecycleSuccessWithHttpInfo(trustedOriginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateLifecycleSuccess request with HTTP info returned
         * @return ApiResponse&lt;TrustedOrigin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrustedOrigin> executeWithHttpInfo() throws ApiException {
            return deactivateLifecycleSuccessWithHttpInfo(trustedOriginId);
        }

        /**
         * Execute deactivateLifecycleSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrustedOrigin> _callback) throws ApiException {
            return deactivateLifecycleSuccessAsync(trustedOriginId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param trustedOriginId  (required)
     * @return DeactivateLifecycleSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateLifecycleSuccessRequestBuilder deactivateLifecycleSuccess(String trustedOriginId) throws IllegalArgumentException {
        if (trustedOriginId == null) throw new IllegalArgumentException("\"trustedOriginId\" is required but got null");
            

        return new DeactivateLifecycleSuccessRequestBuilder(trustedOriginId);
    }
    private okhttp3.Call deleteSuccessCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins/{trustedOriginId}"
            .replace("{" + "trustedOriginId" + "}", localVarApiClient.escapeString(trustedOriginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSuccessValidateBeforeCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustedOriginId' is set
        if (trustedOriginId == null) {
            throw new ApiException("Missing the required parameter 'trustedOriginId' when calling deleteSuccess(Async)");
        }

        return deleteSuccessCall(trustedOriginId, _callback);

    }


    private ApiResponse<Void> deleteSuccessWithHttpInfo(String trustedOriginId) throws ApiException {
        okhttp3.Call localVarCall = deleteSuccessValidateBeforeCall(trustedOriginId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSuccessAsync(String trustedOriginId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSuccessValidateBeforeCall(trustedOriginId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSuccessRequestBuilder {
        private final String trustedOriginId;

        private DeleteSuccessRequestBuilder(String trustedOriginId) {
            this.trustedOriginId = trustedOriginId;
        }

        /**
         * Build call for deleteSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSuccessCall(trustedOriginId, _callback);
        }


        /**
         * Execute deleteSuccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSuccessWithHttpInfo(trustedOriginId);
        }

        /**
         * Execute deleteSuccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSuccessWithHttpInfo(trustedOriginId);
        }

        /**
         * Execute deleteSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSuccessAsync(trustedOriginId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param trustedOriginId  (required)
     * @return DeleteSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSuccessRequestBuilder deleteSuccess(String trustedOriginId) throws IllegalArgumentException {
        if (trustedOriginId == null) throw new IllegalArgumentException("\"trustedOriginId\" is required but got null");
            

        return new DeleteSuccessRequestBuilder(trustedOriginId);
    }
    private okhttp3.Call getListCall(String q, String filter, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String q, String filter, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        return getListCall(q, filter, after, limit, _callback);

    }


    private ApiResponse<List<TrustedOrigin>> getListWithHttpInfo(String q, String filter, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(q, filter, after, limit, null);
        Type localVarReturnType = new TypeToken<List<TrustedOrigin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String q, String filter, String after, Integer limit, final ApiCallback<List<TrustedOrigin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(q, filter, after, limit, _callback);
        Type localVarReturnType = new TypeToken<List<TrustedOrigin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private String q;
        private String filter;
        private String after;
        private Integer limit;

        private GetListRequestBuilder() {
        }

        /**
         * Set q
         * @param q  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set filter
         * @param filter  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to -1)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(q, filter, after, limit, _callback);
        }


        /**
         * Execute getList request
         * @return List&lt;TrustedOrigin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<TrustedOrigin> execute() throws ApiException {
            ApiResponse<List<TrustedOrigin>> localVarResp = getListWithHttpInfo(q, filter, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TrustedOrigin&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TrustedOrigin>> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(q, filter, after, limit);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TrustedOrigin>> _callback) throws ApiException {
            return getListAsync(q, filter, after, limit, _callback);
        }
    }

    /**
     * 
     * Success
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getSuccessByIdCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins/{trustedOriginId}"
            .replace("{" + "trustedOriginId" + "}", localVarApiClient.escapeString(trustedOriginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuccessByIdValidateBeforeCall(String trustedOriginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustedOriginId' is set
        if (trustedOriginId == null) {
            throw new ApiException("Missing the required parameter 'trustedOriginId' when calling getSuccessById(Async)");
        }

        return getSuccessByIdCall(trustedOriginId, _callback);

    }


    private ApiResponse<TrustedOrigin> getSuccessByIdWithHttpInfo(String trustedOriginId) throws ApiException {
        okhttp3.Call localVarCall = getSuccessByIdValidateBeforeCall(trustedOriginId, null);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuccessByIdAsync(String trustedOriginId, final ApiCallback<TrustedOrigin> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuccessByIdValidateBeforeCall(trustedOriginId, _callback);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuccessByIdRequestBuilder {
        private final String trustedOriginId;

        private GetSuccessByIdRequestBuilder(String trustedOriginId) {
            this.trustedOriginId = trustedOriginId;
        }

        /**
         * Build call for getSuccessById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSuccessByIdCall(trustedOriginId, _callback);
        }


        /**
         * Execute getSuccessById request
         * @return TrustedOrigin
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TrustedOrigin execute() throws ApiException {
            ApiResponse<TrustedOrigin> localVarResp = getSuccessByIdWithHttpInfo(trustedOriginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuccessById request with HTTP info returned
         * @return ApiResponse&lt;TrustedOrigin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrustedOrigin> executeWithHttpInfo() throws ApiException {
            return getSuccessByIdWithHttpInfo(trustedOriginId);
        }

        /**
         * Execute getSuccessById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrustedOrigin> _callback) throws ApiException {
            return getSuccessByIdAsync(trustedOriginId, _callback);
        }
    }

    /**
     * 
     * Success
     * @param trustedOriginId  (required)
     * @return GetSuccessByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSuccessByIdRequestBuilder getSuccessById(String trustedOriginId) throws IllegalArgumentException {
        if (trustedOriginId == null) throw new IllegalArgumentException("\"trustedOriginId\" is required but got null");
            

        return new GetSuccessByIdRequestBuilder(trustedOriginId);
    }
    private okhttp3.Call updateSuccessCall(String trustedOriginId, TrustedOrigin trustedOrigin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trustedOrigin;

        // create path and map variables
        String localVarPath = "/api/v1/trustedOrigins/{trustedOriginId}"
            .replace("{" + "trustedOriginId" + "}", localVarApiClient.escapeString(trustedOriginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSuccessValidateBeforeCall(String trustedOriginId, TrustedOrigin trustedOrigin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustedOriginId' is set
        if (trustedOriginId == null) {
            throw new ApiException("Missing the required parameter 'trustedOriginId' when calling updateSuccess(Async)");
        }

        // verify the required parameter 'trustedOrigin' is set
        if (trustedOrigin == null) {
            throw new ApiException("Missing the required parameter 'trustedOrigin' when calling updateSuccess(Async)");
        }

        return updateSuccessCall(trustedOriginId, trustedOrigin, _callback);

    }


    private ApiResponse<TrustedOrigin> updateSuccessWithHttpInfo(String trustedOriginId, TrustedOrigin trustedOrigin) throws ApiException {
        okhttp3.Call localVarCall = updateSuccessValidateBeforeCall(trustedOriginId, trustedOrigin, null);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSuccessAsync(String trustedOriginId, TrustedOrigin trustedOrigin, final ApiCallback<TrustedOrigin> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSuccessValidateBeforeCall(trustedOriginId, trustedOrigin, _callback);
        Type localVarReturnType = new TypeToken<TrustedOrigin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSuccessRequestBuilder {
        private final String trustedOriginId;
        private Map<String, Object> links;
        private OffsetDateTime created;
        private String createdBy;
        private String id;
        private OffsetDateTime lastUpdated;
        private String lastUpdatedBy;
        private String name;
        private String origin;
        private List<Scope> scopes;
        private String status;

        private UpdateSuccessRequestBuilder(String trustedOriginId) {
            this.trustedOriginId = trustedOriginId;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder links(Map<String, Object> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set created
         * @param created  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set lastUpdated
         * @param lastUpdated  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }
        
        /**
         * Set lastUpdatedBy
         * @param lastUpdatedBy  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder lastUpdatedBy(String lastUpdatedBy) {
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set origin
         * @param origin  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder origin(String origin) {
            this.origin = origin;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder scopes(List<Scope> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateSuccessRequestBuilder
         */
        public UpdateSuccessRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateSuccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            return updateSuccessCall(trustedOriginId, trustedOrigin, _callback);
        }

        private TrustedOrigin buildBodyParams() {
            TrustedOrigin trustedOrigin = new TrustedOrigin();
            trustedOrigin.links(this.links);
            trustedOrigin.created(this.created);
            trustedOrigin.createdBy(this.createdBy);
            trustedOrigin.id(this.id);
            trustedOrigin.lastUpdated(this.lastUpdated);
            trustedOrigin.lastUpdatedBy(this.lastUpdatedBy);
            trustedOrigin.name(this.name);
            trustedOrigin.origin(this.origin);
            trustedOrigin.scopes(this.scopes);
            trustedOrigin.status(this.status);
            return trustedOrigin;
        }

        /**
         * Execute updateSuccess request
         * @return TrustedOrigin
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TrustedOrigin execute() throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            ApiResponse<TrustedOrigin> localVarResp = updateSuccessWithHttpInfo(trustedOriginId, trustedOrigin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSuccess request with HTTP info returned
         * @return ApiResponse&lt;TrustedOrigin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrustedOrigin> executeWithHttpInfo() throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            return updateSuccessWithHttpInfo(trustedOriginId, trustedOrigin);
        }

        /**
         * Execute updateSuccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrustedOrigin> _callback) throws ApiException {
            TrustedOrigin trustedOrigin = buildBodyParams();
            return updateSuccessAsync(trustedOriginId, trustedOrigin, _callback);
        }
    }

    /**
     * 
     * Success
     * @param trustedOriginId  (required)
     * @param trustedOrigin  (required)
     * @return UpdateSuccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSuccessRequestBuilder updateSuccess(String trustedOriginId) throws IllegalArgumentException {
        if (trustedOriginId == null) throw new IllegalArgumentException("\"trustedOriginId\" is required but got null");
            

        return new UpdateSuccessRequestBuilder(trustedOriginId);
    }
}
