/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AllowedForEnum;
import com.konfigthis.client.model.ChannelBinding;
import com.konfigthis.client.model.Compliance;
import com.konfigthis.client.model.UserVerificationEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AuthenticatorSettings
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AuthenticatorSettings {
  public static final String SERIALIZED_NAME_ALLOWED_FOR = "allowedFor";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FOR)
  private AllowedForEnum allowedFor;

  public static final String SERIALIZED_NAME_APP_INSTANCE_ID = "appInstanceId";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_ID)
  private String appInstanceId;

  public static final String SERIALIZED_NAME_CHANNEL_BINDING = "channelBinding";
  @SerializedName(SERIALIZED_NAME_CHANNEL_BINDING)
  private ChannelBinding channelBinding;

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private Compliance compliance;

  public static final String SERIALIZED_NAME_TOKEN_LIFETIME_IN_MINUTES = "tokenLifetimeInMinutes";
  @SerializedName(SERIALIZED_NAME_TOKEN_LIFETIME_IN_MINUTES)
  private Integer tokenLifetimeInMinutes;

  public static final String SERIALIZED_NAME_USER_VERIFICATION = "userVerification";
  @SerializedName(SERIALIZED_NAME_USER_VERIFICATION)
  private UserVerificationEnum userVerification;

  public AuthenticatorSettings() {
  }

  public AuthenticatorSettings allowedFor(AllowedForEnum allowedFor) {
    
    
    
    
    this.allowedFor = allowedFor;
    return this;
  }

   /**
   * Get allowedFor
   * @return allowedFor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AllowedForEnum getAllowedFor() {
    return allowedFor;
  }


  public void setAllowedFor(AllowedForEnum allowedFor) {
    
    
    
    this.allowedFor = allowedFor;
  }


  public AuthenticatorSettings appInstanceId(String appInstanceId) {
    
    
    
    
    this.appInstanceId = appInstanceId;
    return this;
  }

   /**
   * Get appInstanceId
   * @return appInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAppInstanceId() {
    return appInstanceId;
  }


  public void setAppInstanceId(String appInstanceId) {
    
    
    
    this.appInstanceId = appInstanceId;
  }


  public AuthenticatorSettings channelBinding(ChannelBinding channelBinding) {
    
    
    
    
    this.channelBinding = channelBinding;
    return this;
  }

   /**
   * Get channelBinding
   * @return channelBinding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChannelBinding getChannelBinding() {
    return channelBinding;
  }


  public void setChannelBinding(ChannelBinding channelBinding) {
    
    
    
    this.channelBinding = channelBinding;
  }


  public AuthenticatorSettings compliance(Compliance compliance) {
    
    
    
    
    this.compliance = compliance;
    return this;
  }

   /**
   * Get compliance
   * @return compliance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Compliance getCompliance() {
    return compliance;
  }


  public void setCompliance(Compliance compliance) {
    
    
    
    this.compliance = compliance;
  }


  public AuthenticatorSettings tokenLifetimeInMinutes(Integer tokenLifetimeInMinutes) {
    
    
    
    
    this.tokenLifetimeInMinutes = tokenLifetimeInMinutes;
    return this;
  }

   /**
   * Get tokenLifetimeInMinutes
   * @return tokenLifetimeInMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTokenLifetimeInMinutes() {
    return tokenLifetimeInMinutes;
  }


  public void setTokenLifetimeInMinutes(Integer tokenLifetimeInMinutes) {
    
    
    
    this.tokenLifetimeInMinutes = tokenLifetimeInMinutes;
  }


  public AuthenticatorSettings userVerification(UserVerificationEnum userVerification) {
    
    
    
    
    this.userVerification = userVerification;
    return this;
  }

   /**
   * Get userVerification
   * @return userVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserVerificationEnum getUserVerification() {
    return userVerification;
  }


  public void setUserVerification(UserVerificationEnum userVerification) {
    
    
    
    this.userVerification = userVerification;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuthenticatorSettings instance itself
   */
  public AuthenticatorSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatorSettings authenticatorSettings = (AuthenticatorSettings) o;
    return Objects.equals(this.allowedFor, authenticatorSettings.allowedFor) &&
        Objects.equals(this.appInstanceId, authenticatorSettings.appInstanceId) &&
        Objects.equals(this.channelBinding, authenticatorSettings.channelBinding) &&
        Objects.equals(this.compliance, authenticatorSettings.compliance) &&
        Objects.equals(this.tokenLifetimeInMinutes, authenticatorSettings.tokenLifetimeInMinutes) &&
        Objects.equals(this.userVerification, authenticatorSettings.userVerification)&&
        Objects.equals(this.additionalProperties, authenticatorSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedFor, appInstanceId, channelBinding, compliance, tokenLifetimeInMinutes, userVerification, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatorSettings {\n");
    sb.append("    allowedFor: ").append(toIndentedString(allowedFor)).append("\n");
    sb.append("    appInstanceId: ").append(toIndentedString(appInstanceId)).append("\n");
    sb.append("    channelBinding: ").append(toIndentedString(channelBinding)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    tokenLifetimeInMinutes: ").append(toIndentedString(tokenLifetimeInMinutes)).append("\n");
    sb.append("    userVerification: ").append(toIndentedString(userVerification)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedFor");
    openapiFields.add("appInstanceId");
    openapiFields.add("channelBinding");
    openapiFields.add("compliance");
    openapiFields.add("tokenLifetimeInMinutes");
    openapiFields.add("userVerification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthenticatorSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthenticatorSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticatorSettings is not found in the empty JSON string", AuthenticatorSettings.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("appInstanceId") != null && !jsonObj.get("appInstanceId").isJsonNull()) && !jsonObj.get("appInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appInstanceId").toString()));
      }
      // validate the optional field `channelBinding`
      if (jsonObj.get("channelBinding") != null && !jsonObj.get("channelBinding").isJsonNull()) {
        ChannelBinding.validateJsonObject(jsonObj.getAsJsonObject("channelBinding"));
      }
      // validate the optional field `compliance`
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull()) {
        Compliance.validateJsonObject(jsonObj.getAsJsonObject("compliance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticatorSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticatorSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticatorSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticatorSettings>() {
           @Override
           public void write(JsonWriter out, AuthenticatorSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticatorSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AuthenticatorSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthenticatorSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthenticatorSettings
  * @throws IOException if the JSON string is invalid with respect to AuthenticatorSettings
  */
  public static AuthenticatorSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticatorSettings.class);
  }

 /**
  * Convert an instance of AuthenticatorSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

