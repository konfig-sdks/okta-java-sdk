/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JsonWebKey
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JsonWebKey {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, Object> links = null;

  public static final String SERIALIZED_NAME_ALG = "alg";
  @SerializedName(SERIALIZED_NAME_ALG)
  private String alg;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_E = "e";
  @SerializedName(SERIALIZED_NAME_E)
  private String e;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_KEY_OPS = "key_ops";
  @SerializedName(SERIALIZED_NAME_KEY_OPS)
  private List<String> keyOps = null;

  public static final String SERIALIZED_NAME_KID = "kid";
  @SerializedName(SERIALIZED_NAME_KID)
  private String kid;

  public static final String SERIALIZED_NAME_KTY = "kty";
  @SerializedName(SERIALIZED_NAME_KTY)
  private String kty;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_N = "n";
  @SerializedName(SERIALIZED_NAME_N)
  private String n;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USE = "use";
  @SerializedName(SERIALIZED_NAME_USE)
  private String use;

  public static final String SERIALIZED_NAME_X5C = "x5c";
  @SerializedName(SERIALIZED_NAME_X5C)
  private List<String> x5c = null;

  public static final String SERIALIZED_NAME_X5T = "x5t";
  @SerializedName(SERIALIZED_NAME_X5T)
  private String x5t;

  public static final String SERIALIZED_NAME_X5T_HASH_S256 = "x5t#S256";
  @SerializedName(SERIALIZED_NAME_X5T_HASH_S256)
  private String x5tHashS256;

  public static final String SERIALIZED_NAME_X5U = "x5u";
  @SerializedName(SERIALIZED_NAME_X5U)
  private String x5u;

  public JsonWebKey() {
  }

  
  public JsonWebKey(
     Map<String, Object> links
  ) {
    this();
    this.links = links;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getLinks() {
    return links;
  }




  public JsonWebKey alg(String alg) {
    
    
    
    
    this.alg = alg;
    return this;
  }

   /**
   * Get alg
   * @return alg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAlg() {
    return alg;
  }


  public void setAlg(String alg) {
    
    
    
    this.alg = alg;
  }


  public JsonWebKey created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public JsonWebKey e(String e) {
    
    
    
    
    this.e = e;
    return this;
  }

   /**
   * Get e
   * @return e
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getE() {
    return e;
  }


  public void setE(String e) {
    
    
    
    this.e = e;
  }


  public JsonWebKey expiresAt(OffsetDateTime expiresAt) {
    
    
    
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Get expiresAt
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    
    
    
    this.expiresAt = expiresAt;
  }


  public JsonWebKey keyOps(List<String> keyOps) {
    
    
    
    
    this.keyOps = keyOps;
    return this;
  }

  public JsonWebKey addKeyOpsItem(String keyOpsItem) {
    if (this.keyOps == null) {
      this.keyOps = new ArrayList<>();
    }
    this.keyOps.add(keyOpsItem);
    return this;
  }

   /**
   * Get keyOps
   * @return keyOps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getKeyOps() {
    return keyOps;
  }


  public void setKeyOps(List<String> keyOps) {
    
    
    
    this.keyOps = keyOps;
  }


  public JsonWebKey kid(String kid) {
    
    
    
    
    this.kid = kid;
    return this;
  }

   /**
   * Get kid
   * @return kid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKid() {
    return kid;
  }


  public void setKid(String kid) {
    
    
    
    this.kid = kid;
  }


  public JsonWebKey kty(String kty) {
    
    
    
    
    this.kty = kty;
    return this;
  }

   /**
   * Get kty
   * @return kty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKty() {
    return kty;
  }


  public void setKty(String kty) {
    
    
    
    this.kty = kty;
  }


  public JsonWebKey lastUpdated(OffsetDateTime lastUpdated) {
    
    
    
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(OffsetDateTime lastUpdated) {
    
    
    
    this.lastUpdated = lastUpdated;
  }


  public JsonWebKey n(String n) {
    
    
    
    
    this.n = n;
    return this;
  }

   /**
   * Get n
   * @return n
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getN() {
    return n;
  }


  public void setN(String n) {
    
    
    
    this.n = n;
  }


  public JsonWebKey status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public JsonWebKey use(String use) {
    
    
    
    
    this.use = use;
    return this;
  }

   /**
   * Get use
   * @return use
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUse() {
    return use;
  }


  public void setUse(String use) {
    
    
    
    this.use = use;
  }


  public JsonWebKey x5c(List<String> x5c) {
    
    
    
    
    this.x5c = x5c;
    return this;
  }

  public JsonWebKey addX5cItem(String x5cItem) {
    if (this.x5c == null) {
      this.x5c = new ArrayList<>();
    }
    this.x5c.add(x5cItem);
    return this;
  }

   /**
   * Get x5c
   * @return x5c
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getX5c() {
    return x5c;
  }


  public void setX5c(List<String> x5c) {
    
    
    
    this.x5c = x5c;
  }


  public JsonWebKey x5t(String x5t) {
    
    
    
    
    this.x5t = x5t;
    return this;
  }

   /**
   * Get x5t
   * @return x5t
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getX5t() {
    return x5t;
  }


  public void setX5t(String x5t) {
    
    
    
    this.x5t = x5t;
  }


  public JsonWebKey x5tHashS256(String x5tHashS256) {
    
    
    
    
    this.x5tHashS256 = x5tHashS256;
    return this;
  }

   /**
   * Get x5tHashS256
   * @return x5tHashS256
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getX5tHashS256() {
    return x5tHashS256;
  }


  public void setX5tHashS256(String x5tHashS256) {
    
    
    
    this.x5tHashS256 = x5tHashS256;
  }


  public JsonWebKey x5u(String x5u) {
    
    
    
    
    this.x5u = x5u;
    return this;
  }

   /**
   * Get x5u
   * @return x5u
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getX5u() {
    return x5u;
  }


  public void setX5u(String x5u) {
    
    
    
    this.x5u = x5u;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JsonWebKey instance itself
   */
  public JsonWebKey putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonWebKey jsonWebKey = (JsonWebKey) o;
    return Objects.equals(this.links, jsonWebKey.links) &&
        Objects.equals(this.alg, jsonWebKey.alg) &&
        Objects.equals(this.created, jsonWebKey.created) &&
        Objects.equals(this.e, jsonWebKey.e) &&
        Objects.equals(this.expiresAt, jsonWebKey.expiresAt) &&
        Objects.equals(this.keyOps, jsonWebKey.keyOps) &&
        Objects.equals(this.kid, jsonWebKey.kid) &&
        Objects.equals(this.kty, jsonWebKey.kty) &&
        Objects.equals(this.lastUpdated, jsonWebKey.lastUpdated) &&
        Objects.equals(this.n, jsonWebKey.n) &&
        Objects.equals(this.status, jsonWebKey.status) &&
        Objects.equals(this.use, jsonWebKey.use) &&
        Objects.equals(this.x5c, jsonWebKey.x5c) &&
        Objects.equals(this.x5t, jsonWebKey.x5t) &&
        Objects.equals(this.x5tHashS256, jsonWebKey.x5tHashS256) &&
        Objects.equals(this.x5u, jsonWebKey.x5u)&&
        Objects.equals(this.additionalProperties, jsonWebKey.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, alg, created, e, expiresAt, keyOps, kid, kty, lastUpdated, n, status, use, x5c, x5t, x5tHashS256, x5u, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonWebKey {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    e: ").append(toIndentedString(e)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    keyOps: ").append(toIndentedString(keyOps)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    kty: ").append(toIndentedString(kty)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("    x5c: ").append(toIndentedString(x5c)).append("\n");
    sb.append("    x5t: ").append(toIndentedString(x5t)).append("\n");
    sb.append("    x5tHashS256: ").append(toIndentedString(x5tHashS256)).append("\n");
    sb.append("    x5u: ").append(toIndentedString(x5u)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("alg");
    openapiFields.add("created");
    openapiFields.add("e");
    openapiFields.add("expiresAt");
    openapiFields.add("key_ops");
    openapiFields.add("kid");
    openapiFields.add("kty");
    openapiFields.add("lastUpdated");
    openapiFields.add("n");
    openapiFields.add("status");
    openapiFields.add("use");
    openapiFields.add("x5c");
    openapiFields.add("x5t");
    openapiFields.add("x5t#S256");
    openapiFields.add("x5u");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JsonWebKey
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JsonWebKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonWebKey is not found in the empty JSON string", JsonWebKey.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("alg") != null && !jsonObj.get("alg").isJsonNull()) && !jsonObj.get("alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alg").toString()));
      }
      if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull()) && !jsonObj.get("e").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `e` to be a primitive type in the JSON string but got `%s`", jsonObj.get("e").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_ops") != null && !jsonObj.get("key_ops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_ops` to be an array in the JSON string but got `%s`", jsonObj.get("key_ops").toString()));
      }
      if ((jsonObj.get("kid") != null && !jsonObj.get("kid").isJsonNull()) && !jsonObj.get("kid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kid").toString()));
      }
      if ((jsonObj.get("kty") != null && !jsonObj.get("kty").isJsonNull()) && !jsonObj.get("kty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kty").toString()));
      }
      if ((jsonObj.get("n") != null && !jsonObj.get("n").isJsonNull()) && !jsonObj.get("n").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `n` to be a primitive type in the JSON string but got `%s`", jsonObj.get("n").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("use") != null && !jsonObj.get("use").isJsonNull()) && !jsonObj.get("use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("x5c") != null && !jsonObj.get("x5c").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5c` to be an array in the JSON string but got `%s`", jsonObj.get("x5c").toString()));
      }
      if ((jsonObj.get("x5t") != null && !jsonObj.get("x5t").isJsonNull()) && !jsonObj.get("x5t").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5t` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x5t").toString()));
      }
      if ((jsonObj.get("x5t#S256") != null && !jsonObj.get("x5t#S256").isJsonNull()) && !jsonObj.get("x5t#S256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5t#S256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x5t#S256").toString()));
      }
      if ((jsonObj.get("x5u") != null && !jsonObj.get("x5u").isJsonNull()) && !jsonObj.get("x5u").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5u` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x5u").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonWebKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonWebKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonWebKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonWebKey.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonWebKey>() {
           @Override
           public void write(JsonWriter out, JsonWebKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonWebKey read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JsonWebKey instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JsonWebKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JsonWebKey
  * @throws IOException if the JSON string is invalid with respect to JsonWebKey
  */
  public static JsonWebKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonWebKey.class);
  }

 /**
  * Convert an instance of JsonWebKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

