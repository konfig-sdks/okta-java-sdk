/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OAuth2ClaimConditions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OAuth2Claim
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OAuth2Claim {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, Object> links = null;

  public static final String SERIALIZED_NAME_ALWAYS_INCLUDE_IN_TOKEN = "alwaysIncludeInToken";
  @SerializedName(SERIALIZED_NAME_ALWAYS_INCLUDE_IN_TOKEN)
  private Boolean alwaysIncludeInToken;

  /**
   * Gets or Sets claimType
   */
  @JsonAdapter(ClaimTypeEnum.Adapter.class)
 public enum ClaimTypeEnum {
    IDENTITY("IDENTITY"),
    
    RESOURCE("RESOURCE");

    private String value;

    ClaimTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClaimTypeEnum fromValue(String value) {
      for (ClaimTypeEnum b : ClaimTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClaimTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClaimTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClaimTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClaimTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLAIM_TYPE = "claimType";
  @SerializedName(SERIALIZED_NAME_CLAIM_TYPE)
  private ClaimTypeEnum claimType;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private OAuth2ClaimConditions conditions;

  /**
   * Gets or Sets groupFilterType
   */
  @JsonAdapter(GroupFilterTypeEnum.Adapter.class)
 public enum GroupFilterTypeEnum {
    STARTS_WITH("STARTS_WITH"),
    
    EQUALS("EQUALS"),
    
    CONTAINS("CONTAINS"),
    
    REGEX("REGEX");

    private String value;

    GroupFilterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupFilterTypeEnum fromValue(String value) {
      for (GroupFilterTypeEnum b : GroupFilterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupFilterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupFilterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupFilterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupFilterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GROUP_FILTER_TYPE = "group_filter_type";
  @SerializedName(SERIALIZED_NAME_GROUP_FILTER_TYPE)
  private GroupFilterTypeEnum groupFilterType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  /**
   * Gets or Sets valueType
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
 public enum ValueTypeEnum {
    EXPRESSION("EXPRESSION"),
    
    GROUPS("GROUPS"),
    
    SYSTEM("SYSTEM");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public OAuth2Claim() {
  }

  
  public OAuth2Claim(
     Map<String, Object> links, 
     String id
  ) {
    this();
    this.links = links;
    this.id = id;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getLinks() {
    return links;
  }




  public OAuth2Claim alwaysIncludeInToken(Boolean alwaysIncludeInToken) {
    
    
    
    
    this.alwaysIncludeInToken = alwaysIncludeInToken;
    return this;
  }

   /**
   * Get alwaysIncludeInToken
   * @return alwaysIncludeInToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAlwaysIncludeInToken() {
    return alwaysIncludeInToken;
  }


  public void setAlwaysIncludeInToken(Boolean alwaysIncludeInToken) {
    
    
    
    this.alwaysIncludeInToken = alwaysIncludeInToken;
  }


  public OAuth2Claim claimType(ClaimTypeEnum claimType) {
    
    
    
    
    this.claimType = claimType;
    return this;
  }

   /**
   * Get claimType
   * @return claimType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClaimTypeEnum getClaimType() {
    return claimType;
  }


  public void setClaimType(ClaimTypeEnum claimType) {
    
    
    
    this.claimType = claimType;
  }


  public OAuth2Claim conditions(OAuth2ClaimConditions conditions) {
    
    
    
    
    this.conditions = conditions;
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OAuth2ClaimConditions getConditions() {
    return conditions;
  }


  public void setConditions(OAuth2ClaimConditions conditions) {
    
    
    
    this.conditions = conditions;
  }


  public OAuth2Claim groupFilterType(GroupFilterTypeEnum groupFilterType) {
    
    
    
    
    this.groupFilterType = groupFilterType;
    return this;
  }

   /**
   * Get groupFilterType
   * @return groupFilterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupFilterTypeEnum getGroupFilterType() {
    return groupFilterType;
  }


  public void setGroupFilterType(GroupFilterTypeEnum groupFilterType) {
    
    
    
    this.groupFilterType = groupFilterType;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




  public OAuth2Claim name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public OAuth2Claim status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public OAuth2Claim system(Boolean system) {
    
    
    
    
    this.system = system;
    return this;
  }

   /**
   * Get system
   * @return system
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSystem() {
    return system;
  }


  public void setSystem(Boolean system) {
    
    
    
    this.system = system;
  }


  public OAuth2Claim value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }


  public OAuth2Claim valueType(ValueTypeEnum valueType) {
    
    
    
    
    this.valueType = valueType;
    return this;
  }

   /**
   * Get valueType
   * @return valueType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ValueTypeEnum getValueType() {
    return valueType;
  }


  public void setValueType(ValueTypeEnum valueType) {
    
    
    
    this.valueType = valueType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OAuth2Claim instance itself
   */
  public OAuth2Claim putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Claim oauth2Claim = (OAuth2Claim) o;
    return Objects.equals(this.links, oauth2Claim.links) &&
        Objects.equals(this.alwaysIncludeInToken, oauth2Claim.alwaysIncludeInToken) &&
        Objects.equals(this.claimType, oauth2Claim.claimType) &&
        Objects.equals(this.conditions, oauth2Claim.conditions) &&
        Objects.equals(this.groupFilterType, oauth2Claim.groupFilterType) &&
        Objects.equals(this.id, oauth2Claim.id) &&
        Objects.equals(this.name, oauth2Claim.name) &&
        Objects.equals(this.status, oauth2Claim.status) &&
        Objects.equals(this.system, oauth2Claim.system) &&
        Objects.equals(this.value, oauth2Claim.value) &&
        Objects.equals(this.valueType, oauth2Claim.valueType)&&
        Objects.equals(this.additionalProperties, oauth2Claim.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, alwaysIncludeInToken, claimType, conditions, groupFilterType, id, name, status, system, value, valueType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Claim {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    alwaysIncludeInToken: ").append(toIndentedString(alwaysIncludeInToken)).append("\n");
    sb.append("    claimType: ").append(toIndentedString(claimType)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    groupFilterType: ").append(toIndentedString(groupFilterType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("alwaysIncludeInToken");
    openapiFields.add("claimType");
    openapiFields.add("conditions");
    openapiFields.add("group_filter_type");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("system");
    openapiFields.add("value");
    openapiFields.add("valueType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OAuth2Claim
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OAuth2Claim.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2Claim is not found in the empty JSON string", OAuth2Claim.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("claimType") != null && !jsonObj.get("claimType").isJsonNull()) && !jsonObj.get("claimType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimType").toString()));
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        OAuth2ClaimConditions.validateJsonObject(jsonObj.getAsJsonObject("conditions"));
      }
      if ((jsonObj.get("group_filter_type") != null && !jsonObj.get("group_filter_type").isJsonNull()) && !jsonObj.get("group_filter_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_filter_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_filter_type").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2Claim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2Claim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2Claim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2Claim.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2Claim>() {
           @Override
           public void write(JsonWriter out, OAuth2Claim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2Claim read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OAuth2Claim instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OAuth2Claim given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OAuth2Claim
  * @throws IOException if the JSON string is invalid with respect to OAuth2Claim
  */
  public static OAuth2Claim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2Claim.class);
  }

 /**
  * Convert an instance of OAuth2Claim to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

