/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OAuthGrantType;
import com.konfigthis.client.model.OAuthResponseType;
import com.konfigthis.client.model.OpenIdConnectApplicationConsentMethod;
import com.konfigthis.client.model.OpenIdConnectApplicationIdpInitiatedLogin;
import com.konfigthis.client.model.OpenIdConnectApplicationIssuerMode;
import com.konfigthis.client.model.OpenIdConnectApplicationSettingsClientKeys;
import com.konfigthis.client.model.OpenIdConnectApplicationSettingsRefreshToken;
import com.konfigthis.client.model.OpenIdConnectApplicationType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OpenIdConnectApplicationSettingsClient
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OpenIdConnectApplicationSettingsClient {
  public static final String SERIALIZED_NAME_APPLICATION_TYPE = "application_type";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE)
  private OpenIdConnectApplicationType applicationType;

  public static final String SERIALIZED_NAME_CLIENT_URI = "client_uri";
  @SerializedName(SERIALIZED_NAME_CLIENT_URI)
  private String clientUri;

  public static final String SERIALIZED_NAME_CONSENT_METHOD = "consent_method";
  @SerializedName(SERIALIZED_NAME_CONSENT_METHOD)
  private OpenIdConnectApplicationConsentMethod consentMethod;

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grant_types";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private List<OAuthGrantType> grantTypes = null;

  public static final String SERIALIZED_NAME_IDP_INITIATED_LOGIN = "idp_initiated_login";
  @SerializedName(SERIALIZED_NAME_IDP_INITIATED_LOGIN)
  private OpenIdConnectApplicationIdpInitiatedLogin idpInitiatedLogin;

  public static final String SERIALIZED_NAME_INITIATE_LOGIN_URI = "initiate_login_uri";
  @SerializedName(SERIALIZED_NAME_INITIATE_LOGIN_URI)
  private String initiateLoginUri;

  public static final String SERIALIZED_NAME_ISSUER_MODE = "issuer_mode";
  @SerializedName(SERIALIZED_NAME_ISSUER_MODE)
  private OpenIdConnectApplicationIssuerMode issuerMode;

  public static final String SERIALIZED_NAME_JWKS = "jwks";
  @SerializedName(SERIALIZED_NAME_JWKS)
  private OpenIdConnectApplicationSettingsClientKeys jwks;

  public static final String SERIALIZED_NAME_LOGO_URI = "logo_uri";
  @SerializedName(SERIALIZED_NAME_LOGO_URI)
  private String logoUri;

  public static final String SERIALIZED_NAME_POLICY_URI = "policy_uri";
  @SerializedName(SERIALIZED_NAME_POLICY_URI)
  private String policyUri;

  public static final String SERIALIZED_NAME_POST_LOGOUT_REDIRECT_URIS = "post_logout_redirect_uris";
  @SerializedName(SERIALIZED_NAME_POST_LOGOUT_REDIRECT_URIS)
  private List<String> postLogoutRedirectUris = null;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = null;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refresh_token";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private OpenIdConnectApplicationSettingsRefreshToken refreshToken;

  public static final String SERIALIZED_NAME_RESPONSE_TYPES = "response_types";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPES)
  private List<OAuthResponseType> responseTypes = null;

  public static final String SERIALIZED_NAME_TOS_URI = "tos_uri";
  @SerializedName(SERIALIZED_NAME_TOS_URI)
  private String tosUri;

  public static final String SERIALIZED_NAME_WILDCARD_REDIRECT = "wildcard_redirect";
  @SerializedName(SERIALIZED_NAME_WILDCARD_REDIRECT)
  private String wildcardRedirect;

  public OpenIdConnectApplicationSettingsClient() {
  }

  public OpenIdConnectApplicationSettingsClient applicationType(OpenIdConnectApplicationType applicationType) {
    
    
    
    
    this.applicationType = applicationType;
    return this;
  }

   /**
   * Get applicationType
   * @return applicationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OpenIdConnectApplicationType getApplicationType() {
    return applicationType;
  }


  public void setApplicationType(OpenIdConnectApplicationType applicationType) {
    
    
    
    this.applicationType = applicationType;
  }


  public OpenIdConnectApplicationSettingsClient clientUri(String clientUri) {
    
    
    
    
    this.clientUri = clientUri;
    return this;
  }

   /**
   * Get clientUri
   * @return clientUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientUri() {
    return clientUri;
  }


  public void setClientUri(String clientUri) {
    
    
    
    this.clientUri = clientUri;
  }


  public OpenIdConnectApplicationSettingsClient consentMethod(OpenIdConnectApplicationConsentMethod consentMethod) {
    
    
    
    
    this.consentMethod = consentMethod;
    return this;
  }

   /**
   * Get consentMethod
   * @return consentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OpenIdConnectApplicationConsentMethod getConsentMethod() {
    return consentMethod;
  }


  public void setConsentMethod(OpenIdConnectApplicationConsentMethod consentMethod) {
    
    
    
    this.consentMethod = consentMethod;
  }


  public OpenIdConnectApplicationSettingsClient grantTypes(List<OAuthGrantType> grantTypes) {
    
    
    
    
    this.grantTypes = grantTypes;
    return this;
  }

  public OpenIdConnectApplicationSettingsClient addGrantTypesItem(OAuthGrantType grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

   /**
   * Get grantTypes
   * @return grantTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OAuthGrantType> getGrantTypes() {
    return grantTypes;
  }


  public void setGrantTypes(List<OAuthGrantType> grantTypes) {
    
    
    
    this.grantTypes = grantTypes;
  }


  public OpenIdConnectApplicationSettingsClient idpInitiatedLogin(OpenIdConnectApplicationIdpInitiatedLogin idpInitiatedLogin) {
    
    
    
    
    this.idpInitiatedLogin = idpInitiatedLogin;
    return this;
  }

   /**
   * Get idpInitiatedLogin
   * @return idpInitiatedLogin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OpenIdConnectApplicationIdpInitiatedLogin getIdpInitiatedLogin() {
    return idpInitiatedLogin;
  }


  public void setIdpInitiatedLogin(OpenIdConnectApplicationIdpInitiatedLogin idpInitiatedLogin) {
    
    
    
    this.idpInitiatedLogin = idpInitiatedLogin;
  }


  public OpenIdConnectApplicationSettingsClient initiateLoginUri(String initiateLoginUri) {
    
    
    
    
    this.initiateLoginUri = initiateLoginUri;
    return this;
  }

   /**
   * Get initiateLoginUri
   * @return initiateLoginUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInitiateLoginUri() {
    return initiateLoginUri;
  }


  public void setInitiateLoginUri(String initiateLoginUri) {
    
    
    
    this.initiateLoginUri = initiateLoginUri;
  }


  public OpenIdConnectApplicationSettingsClient issuerMode(OpenIdConnectApplicationIssuerMode issuerMode) {
    
    
    
    
    this.issuerMode = issuerMode;
    return this;
  }

   /**
   * Get issuerMode
   * @return issuerMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OpenIdConnectApplicationIssuerMode getIssuerMode() {
    return issuerMode;
  }


  public void setIssuerMode(OpenIdConnectApplicationIssuerMode issuerMode) {
    
    
    
    this.issuerMode = issuerMode;
  }


  public OpenIdConnectApplicationSettingsClient jwks(OpenIdConnectApplicationSettingsClientKeys jwks) {
    
    
    
    
    this.jwks = jwks;
    return this;
  }

   /**
   * Get jwks
   * @return jwks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OpenIdConnectApplicationSettingsClientKeys getJwks() {
    return jwks;
  }


  public void setJwks(OpenIdConnectApplicationSettingsClientKeys jwks) {
    
    
    
    this.jwks = jwks;
  }


  public OpenIdConnectApplicationSettingsClient logoUri(String logoUri) {
    
    
    
    
    this.logoUri = logoUri;
    return this;
  }

   /**
   * Get logoUri
   * @return logoUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLogoUri() {
    return logoUri;
  }


  public void setLogoUri(String logoUri) {
    
    
    
    this.logoUri = logoUri;
  }


  public OpenIdConnectApplicationSettingsClient policyUri(String policyUri) {
    
    
    
    
    this.policyUri = policyUri;
    return this;
  }

   /**
   * Get policyUri
   * @return policyUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPolicyUri() {
    return policyUri;
  }


  public void setPolicyUri(String policyUri) {
    
    
    
    this.policyUri = policyUri;
  }


  public OpenIdConnectApplicationSettingsClient postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    
    
    
    
    this.postLogoutRedirectUris = postLogoutRedirectUris;
    return this;
  }

  public OpenIdConnectApplicationSettingsClient addPostLogoutRedirectUrisItem(String postLogoutRedirectUrisItem) {
    if (this.postLogoutRedirectUris == null) {
      this.postLogoutRedirectUris = new ArrayList<>();
    }
    this.postLogoutRedirectUris.add(postLogoutRedirectUrisItem);
    return this;
  }

   /**
   * Get postLogoutRedirectUris
   * @return postLogoutRedirectUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getPostLogoutRedirectUris() {
    return postLogoutRedirectUris;
  }


  public void setPostLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    
    
    
    this.postLogoutRedirectUris = postLogoutRedirectUris;
  }


  public OpenIdConnectApplicationSettingsClient redirectUris(List<String> redirectUris) {
    
    
    
    
    this.redirectUris = redirectUris;
    return this;
  }

  public OpenIdConnectApplicationSettingsClient addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * Get redirectUris
   * @return redirectUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRedirectUris() {
    return redirectUris;
  }


  public void setRedirectUris(List<String> redirectUris) {
    
    
    
    this.redirectUris = redirectUris;
  }


  public OpenIdConnectApplicationSettingsClient refreshToken(OpenIdConnectApplicationSettingsRefreshToken refreshToken) {
    
    
    
    
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * Get refreshToken
   * @return refreshToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OpenIdConnectApplicationSettingsRefreshToken getRefreshToken() {
    return refreshToken;
  }


  public void setRefreshToken(OpenIdConnectApplicationSettingsRefreshToken refreshToken) {
    
    
    
    this.refreshToken = refreshToken;
  }


  public OpenIdConnectApplicationSettingsClient responseTypes(List<OAuthResponseType> responseTypes) {
    
    
    
    
    this.responseTypes = responseTypes;
    return this;
  }

  public OpenIdConnectApplicationSettingsClient addResponseTypesItem(OAuthResponseType responseTypesItem) {
    if (this.responseTypes == null) {
      this.responseTypes = new ArrayList<>();
    }
    this.responseTypes.add(responseTypesItem);
    return this;
  }

   /**
   * Get responseTypes
   * @return responseTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OAuthResponseType> getResponseTypes() {
    return responseTypes;
  }


  public void setResponseTypes(List<OAuthResponseType> responseTypes) {
    
    
    
    this.responseTypes = responseTypes;
  }


  public OpenIdConnectApplicationSettingsClient tosUri(String tosUri) {
    
    
    
    
    this.tosUri = tosUri;
    return this;
  }

   /**
   * Get tosUri
   * @return tosUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTosUri() {
    return tosUri;
  }


  public void setTosUri(String tosUri) {
    
    
    
    this.tosUri = tosUri;
  }


  public OpenIdConnectApplicationSettingsClient wildcardRedirect(String wildcardRedirect) {
    
    
    
    
    this.wildcardRedirect = wildcardRedirect;
    return this;
  }

   /**
   * Get wildcardRedirect
   * @return wildcardRedirect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWildcardRedirect() {
    return wildcardRedirect;
  }


  public void setWildcardRedirect(String wildcardRedirect) {
    
    
    
    this.wildcardRedirect = wildcardRedirect;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OpenIdConnectApplicationSettingsClient instance itself
   */
  public OpenIdConnectApplicationSettingsClient putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenIdConnectApplicationSettingsClient openIdConnectApplicationSettingsClient = (OpenIdConnectApplicationSettingsClient) o;
    return Objects.equals(this.applicationType, openIdConnectApplicationSettingsClient.applicationType) &&
        Objects.equals(this.clientUri, openIdConnectApplicationSettingsClient.clientUri) &&
        Objects.equals(this.consentMethod, openIdConnectApplicationSettingsClient.consentMethod) &&
        Objects.equals(this.grantTypes, openIdConnectApplicationSettingsClient.grantTypes) &&
        Objects.equals(this.idpInitiatedLogin, openIdConnectApplicationSettingsClient.idpInitiatedLogin) &&
        Objects.equals(this.initiateLoginUri, openIdConnectApplicationSettingsClient.initiateLoginUri) &&
        Objects.equals(this.issuerMode, openIdConnectApplicationSettingsClient.issuerMode) &&
        Objects.equals(this.jwks, openIdConnectApplicationSettingsClient.jwks) &&
        Objects.equals(this.logoUri, openIdConnectApplicationSettingsClient.logoUri) &&
        Objects.equals(this.policyUri, openIdConnectApplicationSettingsClient.policyUri) &&
        Objects.equals(this.postLogoutRedirectUris, openIdConnectApplicationSettingsClient.postLogoutRedirectUris) &&
        Objects.equals(this.redirectUris, openIdConnectApplicationSettingsClient.redirectUris) &&
        Objects.equals(this.refreshToken, openIdConnectApplicationSettingsClient.refreshToken) &&
        Objects.equals(this.responseTypes, openIdConnectApplicationSettingsClient.responseTypes) &&
        Objects.equals(this.tosUri, openIdConnectApplicationSettingsClient.tosUri) &&
        Objects.equals(this.wildcardRedirect, openIdConnectApplicationSettingsClient.wildcardRedirect)&&
        Objects.equals(this.additionalProperties, openIdConnectApplicationSettingsClient.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationType, clientUri, consentMethod, grantTypes, idpInitiatedLogin, initiateLoginUri, issuerMode, jwks, logoUri, policyUri, postLogoutRedirectUris, redirectUris, refreshToken, responseTypes, tosUri, wildcardRedirect, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenIdConnectApplicationSettingsClient {\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    clientUri: ").append(toIndentedString(clientUri)).append("\n");
    sb.append("    consentMethod: ").append(toIndentedString(consentMethod)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    idpInitiatedLogin: ").append(toIndentedString(idpInitiatedLogin)).append("\n");
    sb.append("    initiateLoginUri: ").append(toIndentedString(initiateLoginUri)).append("\n");
    sb.append("    issuerMode: ").append(toIndentedString(issuerMode)).append("\n");
    sb.append("    jwks: ").append(toIndentedString(jwks)).append("\n");
    sb.append("    logoUri: ").append(toIndentedString(logoUri)).append("\n");
    sb.append("    policyUri: ").append(toIndentedString(policyUri)).append("\n");
    sb.append("    postLogoutRedirectUris: ").append(toIndentedString(postLogoutRedirectUris)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    responseTypes: ").append(toIndentedString(responseTypes)).append("\n");
    sb.append("    tosUri: ").append(toIndentedString(tosUri)).append("\n");
    sb.append("    wildcardRedirect: ").append(toIndentedString(wildcardRedirect)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application_type");
    openapiFields.add("client_uri");
    openapiFields.add("consent_method");
    openapiFields.add("grant_types");
    openapiFields.add("idp_initiated_login");
    openapiFields.add("initiate_login_uri");
    openapiFields.add("issuer_mode");
    openapiFields.add("jwks");
    openapiFields.add("logo_uri");
    openapiFields.add("policy_uri");
    openapiFields.add("post_logout_redirect_uris");
    openapiFields.add("redirect_uris");
    openapiFields.add("refresh_token");
    openapiFields.add("response_types");
    openapiFields.add("tos_uri");
    openapiFields.add("wildcard_redirect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OpenIdConnectApplicationSettingsClient
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OpenIdConnectApplicationSettingsClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenIdConnectApplicationSettingsClient is not found in the empty JSON string", OpenIdConnectApplicationSettingsClient.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("client_uri") != null && !jsonObj.get("client_uri").isJsonNull()) && !jsonObj.get("client_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grant_types") != null && !jsonObj.get("grant_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_types` to be an array in the JSON string but got `%s`", jsonObj.get("grant_types").toString()));
      }
      // validate the optional field `idp_initiated_login`
      if (jsonObj.get("idp_initiated_login") != null && !jsonObj.get("idp_initiated_login").isJsonNull()) {
        OpenIdConnectApplicationIdpInitiatedLogin.validateJsonObject(jsonObj.getAsJsonObject("idp_initiated_login"));
      }
      if ((jsonObj.get("initiate_login_uri") != null && !jsonObj.get("initiate_login_uri").isJsonNull()) && !jsonObj.get("initiate_login_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiate_login_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiate_login_uri").toString()));
      }
      // validate the optional field `jwks`
      if (jsonObj.get("jwks") != null && !jsonObj.get("jwks").isJsonNull()) {
        OpenIdConnectApplicationSettingsClientKeys.validateJsonObject(jsonObj.getAsJsonObject("jwks"));
      }
      if ((jsonObj.get("logo_uri") != null && !jsonObj.get("logo_uri").isJsonNull()) && !jsonObj.get("logo_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_uri").toString()));
      }
      if ((jsonObj.get("policy_uri") != null && !jsonObj.get("policy_uri").isJsonNull()) && !jsonObj.get("policy_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("post_logout_redirect_uris") != null && !jsonObj.get("post_logout_redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_logout_redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("post_logout_redirect_uris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirect_uris") != null && !jsonObj.get("redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
      // validate the optional field `refresh_token`
      if (jsonObj.get("refresh_token") != null && !jsonObj.get("refresh_token").isJsonNull()) {
        OpenIdConnectApplicationSettingsRefreshToken.validateJsonObject(jsonObj.getAsJsonObject("refresh_token"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("response_types") != null && !jsonObj.get("response_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_types` to be an array in the JSON string but got `%s`", jsonObj.get("response_types").toString()));
      }
      if ((jsonObj.get("tos_uri") != null && !jsonObj.get("tos_uri").isJsonNull()) && !jsonObj.get("tos_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tos_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tos_uri").toString()));
      }
      if ((jsonObj.get("wildcard_redirect") != null && !jsonObj.get("wildcard_redirect").isJsonNull()) && !jsonObj.get("wildcard_redirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wildcard_redirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wildcard_redirect").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenIdConnectApplicationSettingsClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenIdConnectApplicationSettingsClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenIdConnectApplicationSettingsClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenIdConnectApplicationSettingsClient.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenIdConnectApplicationSettingsClient>() {
           @Override
           public void write(JsonWriter out, OpenIdConnectApplicationSettingsClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenIdConnectApplicationSettingsClient read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OpenIdConnectApplicationSettingsClient instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OpenIdConnectApplicationSettingsClient given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OpenIdConnectApplicationSettingsClient
  * @throws IOException if the JSON string is invalid with respect to OpenIdConnectApplicationSettingsClient
  */
  public static OpenIdConnectApplicationSettingsClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenIdConnectApplicationSettingsClient.class);
  }

 /**
  * Convert an instance of OpenIdConnectApplicationSettingsClient to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

