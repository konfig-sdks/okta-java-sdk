/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PasswordDictionary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PasswordPolicyPasswordSettingsComplexity
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PasswordPolicyPasswordSettingsComplexity {
  public static final String SERIALIZED_NAME_DICTIONARY = "dictionary";
  @SerializedName(SERIALIZED_NAME_DICTIONARY)
  private PasswordDictionary dictionary;

  public static final String SERIALIZED_NAME_EXCLUDE_ATTRIBUTES = "excludeAttributes";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ATTRIBUTES)
  private List<String> excludeAttributes = null;

  public static final String SERIALIZED_NAME_EXCLUDE_USERNAME = "excludeUsername";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_USERNAME)
  private Boolean excludeUsername = true;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength = 8;

  public static final String SERIALIZED_NAME_MIN_LOWER_CASE = "minLowerCase";
  @SerializedName(SERIALIZED_NAME_MIN_LOWER_CASE)
  private Integer minLowerCase = 1;

  public static final String SERIALIZED_NAME_MIN_NUMBER = "minNumber";
  @SerializedName(SERIALIZED_NAME_MIN_NUMBER)
  private Integer minNumber = 1;

  public static final String SERIALIZED_NAME_MIN_SYMBOL = "minSymbol";
  @SerializedName(SERIALIZED_NAME_MIN_SYMBOL)
  private Integer minSymbol = 1;

  public static final String SERIALIZED_NAME_MIN_UPPER_CASE = "minUpperCase";
  @SerializedName(SERIALIZED_NAME_MIN_UPPER_CASE)
  private Integer minUpperCase = 1;

  public PasswordPolicyPasswordSettingsComplexity() {
  }

  public PasswordPolicyPasswordSettingsComplexity dictionary(PasswordDictionary dictionary) {
    
    
    
    
    this.dictionary = dictionary;
    return this;
  }

   /**
   * Get dictionary
   * @return dictionary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PasswordDictionary getDictionary() {
    return dictionary;
  }


  public void setDictionary(PasswordDictionary dictionary) {
    
    
    
    this.dictionary = dictionary;
  }


  public PasswordPolicyPasswordSettingsComplexity excludeAttributes(List<String> excludeAttributes) {
    
    
    
    
    this.excludeAttributes = excludeAttributes;
    return this;
  }

  public PasswordPolicyPasswordSettingsComplexity addExcludeAttributesItem(String excludeAttributesItem) {
    if (this.excludeAttributes == null) {
      this.excludeAttributes = new ArrayList<>();
    }
    this.excludeAttributes.add(excludeAttributesItem);
    return this;
  }

   /**
   * Get excludeAttributes
   * @return excludeAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public List<String> getExcludeAttributes() {
    return excludeAttributes;
  }


  public void setExcludeAttributes(List<String> excludeAttributes) {
    
    
    
    this.excludeAttributes = excludeAttributes;
  }


  public PasswordPolicyPasswordSettingsComplexity excludeUsername(Boolean excludeUsername) {
    
    
    
    
    this.excludeUsername = excludeUsername;
    return this;
  }

   /**
   * Get excludeUsername
   * @return excludeUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getExcludeUsername() {
    return excludeUsername;
  }


  public void setExcludeUsername(Boolean excludeUsername) {
    
    
    
    this.excludeUsername = excludeUsername;
  }


  public PasswordPolicyPasswordSettingsComplexity minLength(Integer minLength) {
    
    
    
    
    this.minLength = minLength;
    return this;
  }

   /**
   * Get minLength
   * @return minLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8", value = "")

  public Integer getMinLength() {
    return minLength;
  }


  public void setMinLength(Integer minLength) {
    
    
    
    this.minLength = minLength;
  }


  public PasswordPolicyPasswordSettingsComplexity minLowerCase(Integer minLowerCase) {
    
    
    
    
    this.minLowerCase = minLowerCase;
    return this;
  }

   /**
   * Get minLowerCase
   * @return minLowerCase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getMinLowerCase() {
    return minLowerCase;
  }


  public void setMinLowerCase(Integer minLowerCase) {
    
    
    
    this.minLowerCase = minLowerCase;
  }


  public PasswordPolicyPasswordSettingsComplexity minNumber(Integer minNumber) {
    
    
    
    
    this.minNumber = minNumber;
    return this;
  }

   /**
   * Get minNumber
   * @return minNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getMinNumber() {
    return minNumber;
  }


  public void setMinNumber(Integer minNumber) {
    
    
    
    this.minNumber = minNumber;
  }


  public PasswordPolicyPasswordSettingsComplexity minSymbol(Integer minSymbol) {
    
    
    
    
    this.minSymbol = minSymbol;
    return this;
  }

   /**
   * Get minSymbol
   * @return minSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getMinSymbol() {
    return minSymbol;
  }


  public void setMinSymbol(Integer minSymbol) {
    
    
    
    this.minSymbol = minSymbol;
  }


  public PasswordPolicyPasswordSettingsComplexity minUpperCase(Integer minUpperCase) {
    
    
    
    
    this.minUpperCase = minUpperCase;
    return this;
  }

   /**
   * Get minUpperCase
   * @return minUpperCase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getMinUpperCase() {
    return minUpperCase;
  }


  public void setMinUpperCase(Integer minUpperCase) {
    
    
    
    this.minUpperCase = minUpperCase;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PasswordPolicyPasswordSettingsComplexity instance itself
   */
  public PasswordPolicyPasswordSettingsComplexity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyPasswordSettingsComplexity passwordPolicyPasswordSettingsComplexity = (PasswordPolicyPasswordSettingsComplexity) o;
    return Objects.equals(this.dictionary, passwordPolicyPasswordSettingsComplexity.dictionary) &&
        Objects.equals(this.excludeAttributes, passwordPolicyPasswordSettingsComplexity.excludeAttributes) &&
        Objects.equals(this.excludeUsername, passwordPolicyPasswordSettingsComplexity.excludeUsername) &&
        Objects.equals(this.minLength, passwordPolicyPasswordSettingsComplexity.minLength) &&
        Objects.equals(this.minLowerCase, passwordPolicyPasswordSettingsComplexity.minLowerCase) &&
        Objects.equals(this.minNumber, passwordPolicyPasswordSettingsComplexity.minNumber) &&
        Objects.equals(this.minSymbol, passwordPolicyPasswordSettingsComplexity.minSymbol) &&
        Objects.equals(this.minUpperCase, passwordPolicyPasswordSettingsComplexity.minUpperCase)&&
        Objects.equals(this.additionalProperties, passwordPolicyPasswordSettingsComplexity.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dictionary, excludeAttributes, excludeUsername, minLength, minLowerCase, minNumber, minSymbol, minUpperCase, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyPasswordSettingsComplexity {\n");
    sb.append("    dictionary: ").append(toIndentedString(dictionary)).append("\n");
    sb.append("    excludeAttributes: ").append(toIndentedString(excludeAttributes)).append("\n");
    sb.append("    excludeUsername: ").append(toIndentedString(excludeUsername)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    minLowerCase: ").append(toIndentedString(minLowerCase)).append("\n");
    sb.append("    minNumber: ").append(toIndentedString(minNumber)).append("\n");
    sb.append("    minSymbol: ").append(toIndentedString(minSymbol)).append("\n");
    sb.append("    minUpperCase: ").append(toIndentedString(minUpperCase)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dictionary");
    openapiFields.add("excludeAttributes");
    openapiFields.add("excludeUsername");
    openapiFields.add("minLength");
    openapiFields.add("minLowerCase");
    openapiFields.add("minNumber");
    openapiFields.add("minSymbol");
    openapiFields.add("minUpperCase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PasswordPolicyPasswordSettingsComplexity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PasswordPolicyPasswordSettingsComplexity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPolicyPasswordSettingsComplexity is not found in the empty JSON string", PasswordPolicyPasswordSettingsComplexity.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `dictionary`
      if (jsonObj.get("dictionary") != null && !jsonObj.get("dictionary").isJsonNull()) {
        PasswordDictionary.validateJsonObject(jsonObj.getAsJsonObject("dictionary"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeAttributes") != null && !jsonObj.get("excludeAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("excludeAttributes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPolicyPasswordSettingsComplexity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPolicyPasswordSettingsComplexity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPolicyPasswordSettingsComplexity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPolicyPasswordSettingsComplexity.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPolicyPasswordSettingsComplexity>() {
           @Override
           public void write(JsonWriter out, PasswordPolicyPasswordSettingsComplexity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPolicyPasswordSettingsComplexity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PasswordPolicyPasswordSettingsComplexity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordPolicyPasswordSettingsComplexity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordPolicyPasswordSettingsComplexity
  * @throws IOException if the JSON string is invalid with respect to PasswordPolicyPasswordSettingsComplexity
  */
  public static PasswordPolicyPasswordSettingsComplexity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPolicyPasswordSettingsComplexity.class);
  }

 /**
  * Convert an instance of PasswordPolicyPasswordSettingsComplexity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

