/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DNSRecord;
import com.konfigthis.client.model.DomainCertificateMetadata;
import com.konfigthis.client.model.DomainCertificateSourceType;
import com.konfigthis.client.model.DomainValidationStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Domain
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Domain {
  public static final String SERIALIZED_NAME_CERTIFICATE_SOURCE_TYPE = "certificateSourceType";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SOURCE_TYPE)
  private DomainCertificateSourceType certificateSourceType;

  public static final String SERIALIZED_NAME_DNS_RECORDS = "dnsRecords";
  @SerializedName(SERIALIZED_NAME_DNS_RECORDS)
  private List<DNSRecord> dnsRecords = null;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE = "publicCertificate";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE)
  private DomainCertificateMetadata publicCertificate;

  public static final String SERIALIZED_NAME_VALIDATION_STATUS = "validationStatus";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATUS)
  private DomainValidationStatus validationStatus;

  public Domain() {
  }

  
  public Domain(
     String id
  ) {
    this();
    this.id = id;
  }

  public Domain certificateSourceType(DomainCertificateSourceType certificateSourceType) {
    
    
    
    
    this.certificateSourceType = certificateSourceType;
    return this;
  }

   /**
   * Get certificateSourceType
   * @return certificateSourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DomainCertificateSourceType getCertificateSourceType() {
    return certificateSourceType;
  }


  public void setCertificateSourceType(DomainCertificateSourceType certificateSourceType) {
    
    
    
    this.certificateSourceType = certificateSourceType;
  }


  public Domain dnsRecords(List<DNSRecord> dnsRecords) {
    
    
    
    
    this.dnsRecords = dnsRecords;
    return this;
  }

  public Domain addDnsRecordsItem(DNSRecord dnsRecordsItem) {
    if (this.dnsRecords == null) {
      this.dnsRecords = new ArrayList<>();
    }
    this.dnsRecords.add(dnsRecordsItem);
    return this;
  }

   /**
   * Get dnsRecords
   * @return dnsRecords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DNSRecord> getDnsRecords() {
    return dnsRecords;
  }


  public void setDnsRecords(List<DNSRecord> dnsRecords) {
    
    
    
    this.dnsRecords = dnsRecords;
  }


  public Domain domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




  public Domain publicCertificate(DomainCertificateMetadata publicCertificate) {
    
    
    
    
    this.publicCertificate = publicCertificate;
    return this;
  }

   /**
   * Get publicCertificate
   * @return publicCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DomainCertificateMetadata getPublicCertificate() {
    return publicCertificate;
  }


  public void setPublicCertificate(DomainCertificateMetadata publicCertificate) {
    
    
    
    this.publicCertificate = publicCertificate;
  }


  public Domain validationStatus(DomainValidationStatus validationStatus) {
    
    
    
    
    this.validationStatus = validationStatus;
    return this;
  }

   /**
   * Get validationStatus
   * @return validationStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DomainValidationStatus getValidationStatus() {
    return validationStatus;
  }


  public void setValidationStatus(DomainValidationStatus validationStatus) {
    
    
    
    this.validationStatus = validationStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Domain instance itself
   */
  public Domain putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domain domain = (Domain) o;
    return Objects.equals(this.certificateSourceType, domain.certificateSourceType) &&
        Objects.equals(this.dnsRecords, domain.dnsRecords) &&
        Objects.equals(this.domain, domain.domain) &&
        Objects.equals(this.id, domain.id) &&
        Objects.equals(this.publicCertificate, domain.publicCertificate) &&
        Objects.equals(this.validationStatus, domain.validationStatus)&&
        Objects.equals(this.additionalProperties, domain.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateSourceType, dnsRecords, domain, id, publicCertificate, validationStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domain {\n");
    sb.append("    certificateSourceType: ").append(toIndentedString(certificateSourceType)).append("\n");
    sb.append("    dnsRecords: ").append(toIndentedString(dnsRecords)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    publicCertificate: ").append(toIndentedString(publicCertificate)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateSourceType");
    openapiFields.add("dnsRecords");
    openapiFields.add("domain");
    openapiFields.add("id");
    openapiFields.add("publicCertificate");
    openapiFields.add("validationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Domain
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Domain.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domain is not found in the empty JSON string", Domain.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("dnsRecords") != null && !jsonObj.get("dnsRecords").isJsonNull()) {
        JsonArray jsonArraydnsRecords = jsonObj.getAsJsonArray("dnsRecords");
        if (jsonArraydnsRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnsRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnsRecords` to be an array in the JSON string but got `%s`", jsonObj.get("dnsRecords").toString()));
          }

          // validate the optional field `dnsRecords` (array)
          for (int i = 0; i < jsonArraydnsRecords.size(); i++) {
            DNSRecord.validateJsonObject(jsonArraydnsRecords.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `publicCertificate`
      if (jsonObj.get("publicCertificate") != null && !jsonObj.get("publicCertificate").isJsonNull()) {
        DomainCertificateMetadata.validateJsonObject(jsonObj.getAsJsonObject("publicCertificate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domain.class));

       return (TypeAdapter<T>) new TypeAdapter<Domain>() {
           @Override
           public void write(JsonWriter out, Domain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Domain read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Domain instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Domain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Domain
  * @throws IOException if the JSON string is invalid with respect to Domain
  */
  public static Domain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domain.class);
  }

 /**
  * Convert an instance of Domain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

