/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PasswordPolicyPasswordSettingsLockout
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PasswordPolicyPasswordSettingsLockout {
  public static final String SERIALIZED_NAME_AUTO_UNLOCK_MINUTES = "autoUnlockMinutes";
  @SerializedName(SERIALIZED_NAME_AUTO_UNLOCK_MINUTES)
  private Integer autoUnlockMinutes;

  public static final String SERIALIZED_NAME_MAX_ATTEMPTS = "maxAttempts";
  @SerializedName(SERIALIZED_NAME_MAX_ATTEMPTS)
  private Integer maxAttempts;

  public static final String SERIALIZED_NAME_SHOW_LOCKOUT_FAILURES = "showLockoutFailures";
  @SerializedName(SERIALIZED_NAME_SHOW_LOCKOUT_FAILURES)
  private Boolean showLockoutFailures;

  public static final String SERIALIZED_NAME_USER_LOCKOUT_NOTIFICATION_CHANNELS = "userLockoutNotificationChannels";
  @SerializedName(SERIALIZED_NAME_USER_LOCKOUT_NOTIFICATION_CHANNELS)
  private List<String> userLockoutNotificationChannels = null;

  public PasswordPolicyPasswordSettingsLockout() {
  }

  public PasswordPolicyPasswordSettingsLockout autoUnlockMinutes(Integer autoUnlockMinutes) {
    
    
    
    
    this.autoUnlockMinutes = autoUnlockMinutes;
    return this;
  }

   /**
   * Get autoUnlockMinutes
   * @return autoUnlockMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAutoUnlockMinutes() {
    return autoUnlockMinutes;
  }


  public void setAutoUnlockMinutes(Integer autoUnlockMinutes) {
    
    
    
    this.autoUnlockMinutes = autoUnlockMinutes;
  }


  public PasswordPolicyPasswordSettingsLockout maxAttempts(Integer maxAttempts) {
    
    
    
    
    this.maxAttempts = maxAttempts;
    return this;
  }

   /**
   * Get maxAttempts
   * @return maxAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxAttempts() {
    return maxAttempts;
  }


  public void setMaxAttempts(Integer maxAttempts) {
    
    
    
    this.maxAttempts = maxAttempts;
  }


  public PasswordPolicyPasswordSettingsLockout showLockoutFailures(Boolean showLockoutFailures) {
    
    
    
    
    this.showLockoutFailures = showLockoutFailures;
    return this;
  }

   /**
   * Get showLockoutFailures
   * @return showLockoutFailures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getShowLockoutFailures() {
    return showLockoutFailures;
  }


  public void setShowLockoutFailures(Boolean showLockoutFailures) {
    
    
    
    this.showLockoutFailures = showLockoutFailures;
  }


  public PasswordPolicyPasswordSettingsLockout userLockoutNotificationChannels(List<String> userLockoutNotificationChannels) {
    
    
    
    
    this.userLockoutNotificationChannels = userLockoutNotificationChannels;
    return this;
  }

  public PasswordPolicyPasswordSettingsLockout addUserLockoutNotificationChannelsItem(String userLockoutNotificationChannelsItem) {
    if (this.userLockoutNotificationChannels == null) {
      this.userLockoutNotificationChannels = new ArrayList<>();
    }
    this.userLockoutNotificationChannels.add(userLockoutNotificationChannelsItem);
    return this;
  }

   /**
   * Get userLockoutNotificationChannels
   * @return userLockoutNotificationChannels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getUserLockoutNotificationChannels() {
    return userLockoutNotificationChannels;
  }


  public void setUserLockoutNotificationChannels(List<String> userLockoutNotificationChannels) {
    
    
    
    this.userLockoutNotificationChannels = userLockoutNotificationChannels;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PasswordPolicyPasswordSettingsLockout instance itself
   */
  public PasswordPolicyPasswordSettingsLockout putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyPasswordSettingsLockout passwordPolicyPasswordSettingsLockout = (PasswordPolicyPasswordSettingsLockout) o;
    return Objects.equals(this.autoUnlockMinutes, passwordPolicyPasswordSettingsLockout.autoUnlockMinutes) &&
        Objects.equals(this.maxAttempts, passwordPolicyPasswordSettingsLockout.maxAttempts) &&
        Objects.equals(this.showLockoutFailures, passwordPolicyPasswordSettingsLockout.showLockoutFailures) &&
        Objects.equals(this.userLockoutNotificationChannels, passwordPolicyPasswordSettingsLockout.userLockoutNotificationChannels)&&
        Objects.equals(this.additionalProperties, passwordPolicyPasswordSettingsLockout.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoUnlockMinutes, maxAttempts, showLockoutFailures, userLockoutNotificationChannels, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyPasswordSettingsLockout {\n");
    sb.append("    autoUnlockMinutes: ").append(toIndentedString(autoUnlockMinutes)).append("\n");
    sb.append("    maxAttempts: ").append(toIndentedString(maxAttempts)).append("\n");
    sb.append("    showLockoutFailures: ").append(toIndentedString(showLockoutFailures)).append("\n");
    sb.append("    userLockoutNotificationChannels: ").append(toIndentedString(userLockoutNotificationChannels)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoUnlockMinutes");
    openapiFields.add("maxAttempts");
    openapiFields.add("showLockoutFailures");
    openapiFields.add("userLockoutNotificationChannels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PasswordPolicyPasswordSettingsLockout
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PasswordPolicyPasswordSettingsLockout.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPolicyPasswordSettingsLockout is not found in the empty JSON string", PasswordPolicyPasswordSettingsLockout.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userLockoutNotificationChannels") != null && !jsonObj.get("userLockoutNotificationChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLockoutNotificationChannels` to be an array in the JSON string but got `%s`", jsonObj.get("userLockoutNotificationChannels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPolicyPasswordSettingsLockout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPolicyPasswordSettingsLockout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPolicyPasswordSettingsLockout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPolicyPasswordSettingsLockout.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPolicyPasswordSettingsLockout>() {
           @Override
           public void write(JsonWriter out, PasswordPolicyPasswordSettingsLockout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPolicyPasswordSettingsLockout read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PasswordPolicyPasswordSettingsLockout instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordPolicyPasswordSettingsLockout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordPolicyPasswordSettingsLockout
  * @throws IOException if the JSON string is invalid with respect to PasswordPolicyPasswordSettingsLockout
  */
  public static PasswordPolicyPasswordSettingsLockout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPolicyPasswordSettingsLockout.class);
  }

 /**
  * Convert an instance of PasswordPolicyPasswordSettingsLockout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

