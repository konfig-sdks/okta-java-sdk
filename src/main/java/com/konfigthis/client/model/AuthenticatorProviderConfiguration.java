/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AuthenticatorProviderConfigurationUserNamePlate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AuthenticatorProviderConfiguration
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AuthenticatorProviderConfiguration {
  public static final String SERIALIZED_NAME_AUTH_PORT = "authPort";
  @SerializedName(SERIALIZED_NAME_AUTH_PORT)
  private Integer authPort;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INTEGRATION_KEY = "integrationKey";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_KEY)
  private String integrationKey;

  public static final String SERIALIZED_NAME_SECRET_KEY = "secretKey";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY)
  private String secretKey;

  public static final String SERIALIZED_NAME_SHARED_SECRET = "sharedSecret";
  @SerializedName(SERIALIZED_NAME_SHARED_SECRET)
  private String sharedSecret;

  public static final String SERIALIZED_NAME_USER_NAME_TEMPLATE = "userNameTemplate";
  @SerializedName(SERIALIZED_NAME_USER_NAME_TEMPLATE)
  private AuthenticatorProviderConfigurationUserNamePlate userNameTemplate;

  public AuthenticatorProviderConfiguration() {
  }

  public AuthenticatorProviderConfiguration authPort(Integer authPort) {
    
    
    
    
    this.authPort = authPort;
    return this;
  }

   /**
   * Get authPort
   * @return authPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAuthPort() {
    return authPort;
  }


  public void setAuthPort(Integer authPort) {
    
    
    
    this.authPort = authPort;
  }


  public AuthenticatorProviderConfiguration host(String host) {
    
    
    
    
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    
    
    
    this.host = host;
  }


  public AuthenticatorProviderConfiguration hostName(String hostName) {
    
    
    
    
    this.hostName = hostName;
    return this;
  }

   /**
   * Get hostName
   * @return hostName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostName() {
    return hostName;
  }


  public void setHostName(String hostName) {
    
    
    
    this.hostName = hostName;
  }


  public AuthenticatorProviderConfiguration instanceId(String instanceId) {
    
    
    
    
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInstanceId() {
    return instanceId;
  }


  public void setInstanceId(String instanceId) {
    
    
    
    this.instanceId = instanceId;
  }


  public AuthenticatorProviderConfiguration integrationKey(String integrationKey) {
    
    
    
    
    this.integrationKey = integrationKey;
    return this;
  }

   /**
   * Get integrationKey
   * @return integrationKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIntegrationKey() {
    return integrationKey;
  }


  public void setIntegrationKey(String integrationKey) {
    
    
    
    this.integrationKey = integrationKey;
  }


  public AuthenticatorProviderConfiguration secretKey(String secretKey) {
    
    
    
    
    this.secretKey = secretKey;
    return this;
  }

   /**
   * Get secretKey
   * @return secretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSecretKey() {
    return secretKey;
  }


  public void setSecretKey(String secretKey) {
    
    
    
    this.secretKey = secretKey;
  }


  public AuthenticatorProviderConfiguration sharedSecret(String sharedSecret) {
    
    
    
    
    this.sharedSecret = sharedSecret;
    return this;
  }

   /**
   * Get sharedSecret
   * @return sharedSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSharedSecret() {
    return sharedSecret;
  }


  public void setSharedSecret(String sharedSecret) {
    
    
    
    this.sharedSecret = sharedSecret;
  }


  public AuthenticatorProviderConfiguration userNameTemplate(AuthenticatorProviderConfigurationUserNamePlate userNameTemplate) {
    
    
    
    
    this.userNameTemplate = userNameTemplate;
    return this;
  }

   /**
   * Get userNameTemplate
   * @return userNameTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthenticatorProviderConfigurationUserNamePlate getUserNameTemplate() {
    return userNameTemplate;
  }


  public void setUserNameTemplate(AuthenticatorProviderConfigurationUserNamePlate userNameTemplate) {
    
    
    
    this.userNameTemplate = userNameTemplate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuthenticatorProviderConfiguration instance itself
   */
  public AuthenticatorProviderConfiguration putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatorProviderConfiguration authenticatorProviderConfiguration = (AuthenticatorProviderConfiguration) o;
    return Objects.equals(this.authPort, authenticatorProviderConfiguration.authPort) &&
        Objects.equals(this.host, authenticatorProviderConfiguration.host) &&
        Objects.equals(this.hostName, authenticatorProviderConfiguration.hostName) &&
        Objects.equals(this.instanceId, authenticatorProviderConfiguration.instanceId) &&
        Objects.equals(this.integrationKey, authenticatorProviderConfiguration.integrationKey) &&
        Objects.equals(this.secretKey, authenticatorProviderConfiguration.secretKey) &&
        Objects.equals(this.sharedSecret, authenticatorProviderConfiguration.sharedSecret) &&
        Objects.equals(this.userNameTemplate, authenticatorProviderConfiguration.userNameTemplate)&&
        Objects.equals(this.additionalProperties, authenticatorProviderConfiguration.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authPort, host, hostName, instanceId, integrationKey, secretKey, sharedSecret, userNameTemplate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatorProviderConfiguration {\n");
    sb.append("    authPort: ").append(toIndentedString(authPort)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    integrationKey: ").append(toIndentedString(integrationKey)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    sharedSecret: ").append(toIndentedString(sharedSecret)).append("\n");
    sb.append("    userNameTemplate: ").append(toIndentedString(userNameTemplate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authPort");
    openapiFields.add("host");
    openapiFields.add("hostName");
    openapiFields.add("instanceId");
    openapiFields.add("integrationKey");
    openapiFields.add("secretKey");
    openapiFields.add("sharedSecret");
    openapiFields.add("userNameTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthenticatorProviderConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthenticatorProviderConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticatorProviderConfiguration is not found in the empty JSON string", AuthenticatorProviderConfiguration.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("integrationKey") != null && !jsonObj.get("integrationKey").isJsonNull()) && !jsonObj.get("integrationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationKey").toString()));
      }
      if ((jsonObj.get("secretKey") != null && !jsonObj.get("secretKey").isJsonNull()) && !jsonObj.get("secretKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretKey").toString()));
      }
      if ((jsonObj.get("sharedSecret") != null && !jsonObj.get("sharedSecret").isJsonNull()) && !jsonObj.get("sharedSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedSecret").toString()));
      }
      // validate the optional field `userNameTemplate`
      if (jsonObj.get("userNameTemplate") != null && !jsonObj.get("userNameTemplate").isJsonNull()) {
        AuthenticatorProviderConfigurationUserNamePlate.validateJsonObject(jsonObj.getAsJsonObject("userNameTemplate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticatorProviderConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticatorProviderConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticatorProviderConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorProviderConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticatorProviderConfiguration>() {
           @Override
           public void write(JsonWriter out, AuthenticatorProviderConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticatorProviderConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AuthenticatorProviderConfiguration instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthenticatorProviderConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthenticatorProviderConfiguration
  * @throws IOException if the JSON string is invalid with respect to AuthenticatorProviderConfiguration
  */
  public static AuthenticatorProviderConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticatorProviderConfiguration.class);
  }

 /**
  * Convert an instance of AuthenticatorProviderConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

