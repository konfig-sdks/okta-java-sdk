/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OktaSignOnPolicyRuleSignonSessionActions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OktaSignOnPolicyRuleSignonActions
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OktaSignOnPolicyRuleSignonActions {
  /**
   * Gets or Sets access
   */
  @JsonAdapter(AccessEnum.Adapter.class)
 public enum AccessEnum {
    ALLOW("ALLOW"),
    
    DENY("DENY");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  public static final String SERIALIZED_NAME_FACTOR_LIFETIME = "factorLifetime";
  @SerializedName(SERIALIZED_NAME_FACTOR_LIFETIME)
  private Integer factorLifetime;

  /**
   * Gets or Sets factorPromptMode
   */
  @JsonAdapter(FactorPromptModeEnum.Adapter.class)
 public enum FactorPromptModeEnum {
    ALWAYS("ALWAYS"),
    
    DEVICE("DEVICE"),
    
    SESSION("SESSION");

    private String value;

    FactorPromptModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FactorPromptModeEnum fromValue(String value) {
      for (FactorPromptModeEnum b : FactorPromptModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FactorPromptModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FactorPromptModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FactorPromptModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FactorPromptModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FACTOR_PROMPT_MODE = "factorPromptMode";
  @SerializedName(SERIALIZED_NAME_FACTOR_PROMPT_MODE)
  private FactorPromptModeEnum factorPromptMode;

  public static final String SERIALIZED_NAME_REMEMBER_DEVICE_BY_DEFAULT = "rememberDeviceByDefault";
  @SerializedName(SERIALIZED_NAME_REMEMBER_DEVICE_BY_DEFAULT)
  private Boolean rememberDeviceByDefault = false;

  public static final String SERIALIZED_NAME_REQUIRE_FACTOR = "requireFactor";
  @SerializedName(SERIALIZED_NAME_REQUIRE_FACTOR)
  private Boolean requireFactor = false;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private OktaSignOnPolicyRuleSignonSessionActions session;

  public OktaSignOnPolicyRuleSignonActions() {
  }

  public OktaSignOnPolicyRuleSignonActions access(AccessEnum access) {
    
    
    
    
    this.access = access;
    return this;
  }

   /**
   * Get access
   * @return access
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AccessEnum getAccess() {
    return access;
  }


  public void setAccess(AccessEnum access) {
    
    
    
    this.access = access;
  }


  public OktaSignOnPolicyRuleSignonActions factorLifetime(Integer factorLifetime) {
    
    
    
    
    this.factorLifetime = factorLifetime;
    return this;
  }

   /**
   * Get factorLifetime
   * @return factorLifetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFactorLifetime() {
    return factorLifetime;
  }


  public void setFactorLifetime(Integer factorLifetime) {
    
    
    
    this.factorLifetime = factorLifetime;
  }


  public OktaSignOnPolicyRuleSignonActions factorPromptMode(FactorPromptModeEnum factorPromptMode) {
    
    
    
    
    this.factorPromptMode = factorPromptMode;
    return this;
  }

   /**
   * Get factorPromptMode
   * @return factorPromptMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FactorPromptModeEnum getFactorPromptMode() {
    return factorPromptMode;
  }


  public void setFactorPromptMode(FactorPromptModeEnum factorPromptMode) {
    
    
    
    this.factorPromptMode = factorPromptMode;
  }


  public OktaSignOnPolicyRuleSignonActions rememberDeviceByDefault(Boolean rememberDeviceByDefault) {
    
    
    
    
    this.rememberDeviceByDefault = rememberDeviceByDefault;
    return this;
  }

   /**
   * Get rememberDeviceByDefault
   * @return rememberDeviceByDefault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getRememberDeviceByDefault() {
    return rememberDeviceByDefault;
  }


  public void setRememberDeviceByDefault(Boolean rememberDeviceByDefault) {
    
    
    
    this.rememberDeviceByDefault = rememberDeviceByDefault;
  }


  public OktaSignOnPolicyRuleSignonActions requireFactor(Boolean requireFactor) {
    
    
    
    
    this.requireFactor = requireFactor;
    return this;
  }

   /**
   * Get requireFactor
   * @return requireFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getRequireFactor() {
    return requireFactor;
  }


  public void setRequireFactor(Boolean requireFactor) {
    
    
    
    this.requireFactor = requireFactor;
  }


  public OktaSignOnPolicyRuleSignonActions session(OktaSignOnPolicyRuleSignonSessionActions session) {
    
    
    
    
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OktaSignOnPolicyRuleSignonSessionActions getSession() {
    return session;
  }


  public void setSession(OktaSignOnPolicyRuleSignonSessionActions session) {
    
    
    
    this.session = session;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OktaSignOnPolicyRuleSignonActions instance itself
   */
  public OktaSignOnPolicyRuleSignonActions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OktaSignOnPolicyRuleSignonActions oktaSignOnPolicyRuleSignonActions = (OktaSignOnPolicyRuleSignonActions) o;
    return Objects.equals(this.access, oktaSignOnPolicyRuleSignonActions.access) &&
        Objects.equals(this.factorLifetime, oktaSignOnPolicyRuleSignonActions.factorLifetime) &&
        Objects.equals(this.factorPromptMode, oktaSignOnPolicyRuleSignonActions.factorPromptMode) &&
        Objects.equals(this.rememberDeviceByDefault, oktaSignOnPolicyRuleSignonActions.rememberDeviceByDefault) &&
        Objects.equals(this.requireFactor, oktaSignOnPolicyRuleSignonActions.requireFactor) &&
        Objects.equals(this.session, oktaSignOnPolicyRuleSignonActions.session)&&
        Objects.equals(this.additionalProperties, oktaSignOnPolicyRuleSignonActions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, factorLifetime, factorPromptMode, rememberDeviceByDefault, requireFactor, session, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OktaSignOnPolicyRuleSignonActions {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    factorLifetime: ").append(toIndentedString(factorLifetime)).append("\n");
    sb.append("    factorPromptMode: ").append(toIndentedString(factorPromptMode)).append("\n");
    sb.append("    rememberDeviceByDefault: ").append(toIndentedString(rememberDeviceByDefault)).append("\n");
    sb.append("    requireFactor: ").append(toIndentedString(requireFactor)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("factorLifetime");
    openapiFields.add("factorPromptMode");
    openapiFields.add("rememberDeviceByDefault");
    openapiFields.add("requireFactor");
    openapiFields.add("session");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OktaSignOnPolicyRuleSignonActions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OktaSignOnPolicyRuleSignonActions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OktaSignOnPolicyRuleSignonActions is not found in the empty JSON string", OktaSignOnPolicyRuleSignonActions.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) && !jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      if ((jsonObj.get("factorPromptMode") != null && !jsonObj.get("factorPromptMode").isJsonNull()) && !jsonObj.get("factorPromptMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factorPromptMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factorPromptMode").toString()));
      }
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        OktaSignOnPolicyRuleSignonSessionActions.validateJsonObject(jsonObj.getAsJsonObject("session"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OktaSignOnPolicyRuleSignonActions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OktaSignOnPolicyRuleSignonActions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OktaSignOnPolicyRuleSignonActions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OktaSignOnPolicyRuleSignonActions.class));

       return (TypeAdapter<T>) new TypeAdapter<OktaSignOnPolicyRuleSignonActions>() {
           @Override
           public void write(JsonWriter out, OktaSignOnPolicyRuleSignonActions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OktaSignOnPolicyRuleSignonActions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OktaSignOnPolicyRuleSignonActions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OktaSignOnPolicyRuleSignonActions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OktaSignOnPolicyRuleSignonActions
  * @throws IOException if the JSON string is invalid with respect to OktaSignOnPolicyRuleSignonActions
  */
  public static OktaSignOnPolicyRuleSignonActions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OktaSignOnPolicyRuleSignonActions.class);
  }

 /**
  * Convert an instance of OktaSignOnPolicyRuleSignonActions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

