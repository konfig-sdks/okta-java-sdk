/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.IonField;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IonForm
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IonForm {
  public static final String SERIALIZED_NAME_ACCEPTS = "accepts";
  @SerializedName(SERIALIZED_NAME_ACCEPTS)
  private String accepts;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCES = "produces";
  @SerializedName(SERIALIZED_NAME_PRODUCES)
  private String produces;

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  private Integer refresh;

  public static final String SERIALIZED_NAME_REL = "rel";
  @SerializedName(SERIALIZED_NAME_REL)
  private List<String> rel = null;

  public static final String SERIALIZED_NAME_RELATES_TO = "relatesTo";
  @SerializedName(SERIALIZED_NAME_RELATES_TO)
  private List<String> relatesTo = null;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private List<IonField> value = null;

  public IonForm() {
  }

  
  public IonForm(
     List<IonField> value
  ) {
    this();
    this.value = value;
  }

  public IonForm accepts(String accepts) {
    
    
    
    
    this.accepts = accepts;
    return this;
  }

   /**
   * Get accepts
   * @return accepts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccepts() {
    return accepts;
  }


  public void setAccepts(String accepts) {
    
    
    
    this.accepts = accepts;
  }


  public IonForm href(String href) {
    
    
    
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    
    
    
    this.href = href;
  }


  public IonForm method(String method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMethod() {
    return method;
  }


  public void setMethod(String method) {
    
    
    
    this.method = method;
  }


  public IonForm name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public IonForm produces(String produces) {
    
    
    
    
    this.produces = produces;
    return this;
  }

   /**
   * Get produces
   * @return produces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProduces() {
    return produces;
  }


  public void setProduces(String produces) {
    
    
    
    this.produces = produces;
  }


  public IonForm refresh(Integer refresh) {
    
    
    
    
    this.refresh = refresh;
    return this;
  }

   /**
   * Get refresh
   * @return refresh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRefresh() {
    return refresh;
  }


  public void setRefresh(Integer refresh) {
    
    
    
    this.refresh = refresh;
  }


  public IonForm rel(List<String> rel) {
    
    
    
    
    this.rel = rel;
    return this;
  }

  public IonForm addRelItem(String relItem) {
    if (this.rel == null) {
      this.rel = new ArrayList<>();
    }
    this.rel.add(relItem);
    return this;
  }

   /**
   * Get rel
   * @return rel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRel() {
    return rel;
  }


  public void setRel(List<String> rel) {
    
    
    
    this.rel = rel;
  }


  public IonForm relatesTo(List<String> relatesTo) {
    
    
    
    
    this.relatesTo = relatesTo;
    return this;
  }

  public IonForm addRelatesToItem(String relatesToItem) {
    if (this.relatesTo == null) {
      this.relatesTo = new ArrayList<>();
    }
    this.relatesTo.add(relatesToItem);
    return this;
  }

   /**
   * Get relatesTo
   * @return relatesTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRelatesTo() {
    return relatesTo;
  }


  public void setRelatesTo(List<String> relatesTo) {
    
    
    
    this.relatesTo = relatesTo;
  }


   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<IonField> getValue() {
    return value;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IonForm instance itself
   */
  public IonForm putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IonForm ionForm = (IonForm) o;
    return Objects.equals(this.accepts, ionForm.accepts) &&
        Objects.equals(this.href, ionForm.href) &&
        Objects.equals(this.method, ionForm.method) &&
        Objects.equals(this.name, ionForm.name) &&
        Objects.equals(this.produces, ionForm.produces) &&
        Objects.equals(this.refresh, ionForm.refresh) &&
        Objects.equals(this.rel, ionForm.rel) &&
        Objects.equals(this.relatesTo, ionForm.relatesTo) &&
        Objects.equals(this.value, ionForm.value)&&
        Objects.equals(this.additionalProperties, ionForm.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accepts, href, method, name, produces, refresh, rel, relatesTo, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IonForm {\n");
    sb.append("    accepts: ").append(toIndentedString(accepts)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    produces: ").append(toIndentedString(produces)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    rel: ").append(toIndentedString(rel)).append("\n");
    sb.append("    relatesTo: ").append(toIndentedString(relatesTo)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepts");
    openapiFields.add("href");
    openapiFields.add("method");
    openapiFields.add("name");
    openapiFields.add("produces");
    openapiFields.add("refresh");
    openapiFields.add("rel");
    openapiFields.add("relatesTo");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IonForm
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IonForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IonForm is not found in the empty JSON string", IonForm.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("accepts") != null && !jsonObj.get("accepts").isJsonNull()) && !jsonObj.get("accepts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accepts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accepts").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("produces") != null && !jsonObj.get("produces").isJsonNull()) && !jsonObj.get("produces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `produces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("produces").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rel") != null && !jsonObj.get("rel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rel` to be an array in the JSON string but got `%s`", jsonObj.get("rel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relatesTo") != null && !jsonObj.get("relatesTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatesTo` to be an array in the JSON string but got `%s`", jsonObj.get("relatesTo").toString()));
      }
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        JsonArray jsonArrayvalue = jsonObj.getAsJsonArray("value");
        if (jsonArrayvalue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("value").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `value` to be an array in the JSON string but got `%s`", jsonObj.get("value").toString()));
          }

          // validate the optional field `value` (array)
          for (int i = 0; i < jsonArrayvalue.size(); i++) {
            IonField.validateJsonObject(jsonArrayvalue.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IonForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IonForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IonForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IonForm.class));

       return (TypeAdapter<T>) new TypeAdapter<IonForm>() {
           @Override
           public void write(JsonWriter out, IonForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IonForm read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IonForm instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IonForm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IonForm
  * @throws IOException if the JSON string is invalid with respect to IonForm
  */
  public static IonForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IonForm.class);
  }

 /**
  * Convert an instance of IonForm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

