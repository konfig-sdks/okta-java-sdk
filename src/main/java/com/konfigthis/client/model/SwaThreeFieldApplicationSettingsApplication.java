/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SwaThreeFieldApplicationSettingsApplication
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SwaThreeFieldApplicationSettingsApplication {
  public static final String SERIALIZED_NAME_BUTTON_SELECTOR = "buttonSelector";
  @SerializedName(SERIALIZED_NAME_BUTTON_SELECTOR)
  private String buttonSelector;

  public static final String SERIALIZED_NAME_EXTRA_FIELD_SELECTOR = "extraFieldSelector";
  @SerializedName(SERIALIZED_NAME_EXTRA_FIELD_SELECTOR)
  private String extraFieldSelector;

  public static final String SERIALIZED_NAME_EXTRA_FIELD_VALUE = "extraFieldValue";
  @SerializedName(SERIALIZED_NAME_EXTRA_FIELD_VALUE)
  private String extraFieldValue;

  public static final String SERIALIZED_NAME_LOGIN_URL_REGEX = "loginUrlRegex";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL_REGEX)
  private String loginUrlRegex;

  public static final String SERIALIZED_NAME_PASSWORD_SELECTOR = "passwordSelector";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SELECTOR)
  private String passwordSelector;

  public static final String SERIALIZED_NAME_TARGET_U_R_L = "targetURL";
  @SerializedName(SERIALIZED_NAME_TARGET_U_R_L)
  private String targetURL;

  public static final String SERIALIZED_NAME_USER_NAME_SELECTOR = "userNameSelector";
  @SerializedName(SERIALIZED_NAME_USER_NAME_SELECTOR)
  private String userNameSelector;

  public SwaThreeFieldApplicationSettingsApplication() {
  }

  public SwaThreeFieldApplicationSettingsApplication buttonSelector(String buttonSelector) {
    
    
    
    
    this.buttonSelector = buttonSelector;
    return this;
  }

   /**
   * Get buttonSelector
   * @return buttonSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getButtonSelector() {
    return buttonSelector;
  }


  public void setButtonSelector(String buttonSelector) {
    
    
    
    this.buttonSelector = buttonSelector;
  }


  public SwaThreeFieldApplicationSettingsApplication extraFieldSelector(String extraFieldSelector) {
    
    
    
    
    this.extraFieldSelector = extraFieldSelector;
    return this;
  }

   /**
   * Get extraFieldSelector
   * @return extraFieldSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtraFieldSelector() {
    return extraFieldSelector;
  }


  public void setExtraFieldSelector(String extraFieldSelector) {
    
    
    
    this.extraFieldSelector = extraFieldSelector;
  }


  public SwaThreeFieldApplicationSettingsApplication extraFieldValue(String extraFieldValue) {
    
    
    
    
    this.extraFieldValue = extraFieldValue;
    return this;
  }

   /**
   * Get extraFieldValue
   * @return extraFieldValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtraFieldValue() {
    return extraFieldValue;
  }


  public void setExtraFieldValue(String extraFieldValue) {
    
    
    
    this.extraFieldValue = extraFieldValue;
  }


  public SwaThreeFieldApplicationSettingsApplication loginUrlRegex(String loginUrlRegex) {
    
    
    
    
    this.loginUrlRegex = loginUrlRegex;
    return this;
  }

   /**
   * Get loginUrlRegex
   * @return loginUrlRegex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoginUrlRegex() {
    return loginUrlRegex;
  }


  public void setLoginUrlRegex(String loginUrlRegex) {
    
    
    
    this.loginUrlRegex = loginUrlRegex;
  }


  public SwaThreeFieldApplicationSettingsApplication passwordSelector(String passwordSelector) {
    
    
    
    
    this.passwordSelector = passwordSelector;
    return this;
  }

   /**
   * Get passwordSelector
   * @return passwordSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPasswordSelector() {
    return passwordSelector;
  }


  public void setPasswordSelector(String passwordSelector) {
    
    
    
    this.passwordSelector = passwordSelector;
  }


  public SwaThreeFieldApplicationSettingsApplication targetURL(String targetURL) {
    
    
    
    
    this.targetURL = targetURL;
    return this;
  }

   /**
   * Get targetURL
   * @return targetURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTargetURL() {
    return targetURL;
  }


  public void setTargetURL(String targetURL) {
    
    
    
    this.targetURL = targetURL;
  }


  public SwaThreeFieldApplicationSettingsApplication userNameSelector(String userNameSelector) {
    
    
    
    
    this.userNameSelector = userNameSelector;
    return this;
  }

   /**
   * Get userNameSelector
   * @return userNameSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserNameSelector() {
    return userNameSelector;
  }


  public void setUserNameSelector(String userNameSelector) {
    
    
    
    this.userNameSelector = userNameSelector;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SwaThreeFieldApplicationSettingsApplication instance itself
   */
  public SwaThreeFieldApplicationSettingsApplication putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwaThreeFieldApplicationSettingsApplication swaThreeFieldApplicationSettingsApplication = (SwaThreeFieldApplicationSettingsApplication) o;
    return Objects.equals(this.buttonSelector, swaThreeFieldApplicationSettingsApplication.buttonSelector) &&
        Objects.equals(this.extraFieldSelector, swaThreeFieldApplicationSettingsApplication.extraFieldSelector) &&
        Objects.equals(this.extraFieldValue, swaThreeFieldApplicationSettingsApplication.extraFieldValue) &&
        Objects.equals(this.loginUrlRegex, swaThreeFieldApplicationSettingsApplication.loginUrlRegex) &&
        Objects.equals(this.passwordSelector, swaThreeFieldApplicationSettingsApplication.passwordSelector) &&
        Objects.equals(this.targetURL, swaThreeFieldApplicationSettingsApplication.targetURL) &&
        Objects.equals(this.userNameSelector, swaThreeFieldApplicationSettingsApplication.userNameSelector)&&
        Objects.equals(this.additionalProperties, swaThreeFieldApplicationSettingsApplication.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttonSelector, extraFieldSelector, extraFieldValue, loginUrlRegex, passwordSelector, targetURL, userNameSelector, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwaThreeFieldApplicationSettingsApplication {\n");
    sb.append("    buttonSelector: ").append(toIndentedString(buttonSelector)).append("\n");
    sb.append("    extraFieldSelector: ").append(toIndentedString(extraFieldSelector)).append("\n");
    sb.append("    extraFieldValue: ").append(toIndentedString(extraFieldValue)).append("\n");
    sb.append("    loginUrlRegex: ").append(toIndentedString(loginUrlRegex)).append("\n");
    sb.append("    passwordSelector: ").append(toIndentedString(passwordSelector)).append("\n");
    sb.append("    targetURL: ").append(toIndentedString(targetURL)).append("\n");
    sb.append("    userNameSelector: ").append(toIndentedString(userNameSelector)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttonSelector");
    openapiFields.add("extraFieldSelector");
    openapiFields.add("extraFieldValue");
    openapiFields.add("loginUrlRegex");
    openapiFields.add("passwordSelector");
    openapiFields.add("targetURL");
    openapiFields.add("userNameSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SwaThreeFieldApplicationSettingsApplication
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SwaThreeFieldApplicationSettingsApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SwaThreeFieldApplicationSettingsApplication is not found in the empty JSON string", SwaThreeFieldApplicationSettingsApplication.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("buttonSelector") != null && !jsonObj.get("buttonSelector").isJsonNull()) && !jsonObj.get("buttonSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buttonSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buttonSelector").toString()));
      }
      if ((jsonObj.get("extraFieldSelector") != null && !jsonObj.get("extraFieldSelector").isJsonNull()) && !jsonObj.get("extraFieldSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraFieldSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraFieldSelector").toString()));
      }
      if ((jsonObj.get("extraFieldValue") != null && !jsonObj.get("extraFieldValue").isJsonNull()) && !jsonObj.get("extraFieldValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraFieldValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraFieldValue").toString()));
      }
      if ((jsonObj.get("loginUrlRegex") != null && !jsonObj.get("loginUrlRegex").isJsonNull()) && !jsonObj.get("loginUrlRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginUrlRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginUrlRegex").toString()));
      }
      if ((jsonObj.get("passwordSelector") != null && !jsonObj.get("passwordSelector").isJsonNull()) && !jsonObj.get("passwordSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordSelector").toString()));
      }
      if ((jsonObj.get("targetURL") != null && !jsonObj.get("targetURL").isJsonNull()) && !jsonObj.get("targetURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetURL").toString()));
      }
      if ((jsonObj.get("userNameSelector") != null && !jsonObj.get("userNameSelector").isJsonNull()) && !jsonObj.get("userNameSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNameSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNameSelector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SwaThreeFieldApplicationSettingsApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SwaThreeFieldApplicationSettingsApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SwaThreeFieldApplicationSettingsApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SwaThreeFieldApplicationSettingsApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<SwaThreeFieldApplicationSettingsApplication>() {
           @Override
           public void write(JsonWriter out, SwaThreeFieldApplicationSettingsApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SwaThreeFieldApplicationSettingsApplication read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SwaThreeFieldApplicationSettingsApplication instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SwaThreeFieldApplicationSettingsApplication given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SwaThreeFieldApplicationSettingsApplication
  * @throws IOException if the JSON string is invalid with respect to SwaThreeFieldApplicationSettingsApplication
  */
  public static SwaThreeFieldApplicationSettingsApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SwaThreeFieldApplicationSettingsApplication.class);
  }

 /**
  * Convert an instance of SwaThreeFieldApplicationSettingsApplication to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

