/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.IdpPolicyRuleAction;
import com.konfigthis.client.model.OktaSignOnPolicyRuleSignonActions;
import com.konfigthis.client.model.PasswordPolicyRuleAction;
import com.konfigthis.client.model.PolicyRuleActionsEnroll;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PolicyRuleActions
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PolicyRuleActions {
  public static final String SERIALIZED_NAME_ENROLL = "enroll";
  @SerializedName(SERIALIZED_NAME_ENROLL)
  private PolicyRuleActionsEnroll enroll;

  public static final String SERIALIZED_NAME_IDP = "idp";
  @SerializedName(SERIALIZED_NAME_IDP)
  private IdpPolicyRuleAction idp;

  public static final String SERIALIZED_NAME_PASSWORD_CHANGE = "passwordChange";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CHANGE)
  private PasswordPolicyRuleAction passwordChange;

  public static final String SERIALIZED_NAME_SELF_SERVICE_PASSWORD_RESET = "selfServicePasswordReset";
  @SerializedName(SERIALIZED_NAME_SELF_SERVICE_PASSWORD_RESET)
  private PasswordPolicyRuleAction selfServicePasswordReset;

  public static final String SERIALIZED_NAME_SELF_SERVICE_UNLOCK = "selfServiceUnlock";
  @SerializedName(SERIALIZED_NAME_SELF_SERVICE_UNLOCK)
  private PasswordPolicyRuleAction selfServiceUnlock;

  public static final String SERIALIZED_NAME_SIGNON = "signon";
  @SerializedName(SERIALIZED_NAME_SIGNON)
  private OktaSignOnPolicyRuleSignonActions signon;

  public PolicyRuleActions() {
  }

  public PolicyRuleActions enroll(PolicyRuleActionsEnroll enroll) {
    
    
    
    
    this.enroll = enroll;
    return this;
  }

   /**
   * Get enroll
   * @return enroll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PolicyRuleActionsEnroll getEnroll() {
    return enroll;
  }


  public void setEnroll(PolicyRuleActionsEnroll enroll) {
    
    
    
    this.enroll = enroll;
  }


  public PolicyRuleActions idp(IdpPolicyRuleAction idp) {
    
    
    
    
    this.idp = idp;
    return this;
  }

   /**
   * Get idp
   * @return idp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IdpPolicyRuleAction getIdp() {
    return idp;
  }


  public void setIdp(IdpPolicyRuleAction idp) {
    
    
    
    this.idp = idp;
  }


  public PolicyRuleActions passwordChange(PasswordPolicyRuleAction passwordChange) {
    
    
    
    
    this.passwordChange = passwordChange;
    return this;
  }

   /**
   * Get passwordChange
   * @return passwordChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PasswordPolicyRuleAction getPasswordChange() {
    return passwordChange;
  }


  public void setPasswordChange(PasswordPolicyRuleAction passwordChange) {
    
    
    
    this.passwordChange = passwordChange;
  }


  public PolicyRuleActions selfServicePasswordReset(PasswordPolicyRuleAction selfServicePasswordReset) {
    
    
    
    
    this.selfServicePasswordReset = selfServicePasswordReset;
    return this;
  }

   /**
   * Get selfServicePasswordReset
   * @return selfServicePasswordReset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PasswordPolicyRuleAction getSelfServicePasswordReset() {
    return selfServicePasswordReset;
  }


  public void setSelfServicePasswordReset(PasswordPolicyRuleAction selfServicePasswordReset) {
    
    
    
    this.selfServicePasswordReset = selfServicePasswordReset;
  }


  public PolicyRuleActions selfServiceUnlock(PasswordPolicyRuleAction selfServiceUnlock) {
    
    
    
    
    this.selfServiceUnlock = selfServiceUnlock;
    return this;
  }

   /**
   * Get selfServiceUnlock
   * @return selfServiceUnlock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PasswordPolicyRuleAction getSelfServiceUnlock() {
    return selfServiceUnlock;
  }


  public void setSelfServiceUnlock(PasswordPolicyRuleAction selfServiceUnlock) {
    
    
    
    this.selfServiceUnlock = selfServiceUnlock;
  }


  public PolicyRuleActions signon(OktaSignOnPolicyRuleSignonActions signon) {
    
    
    
    
    this.signon = signon;
    return this;
  }

   /**
   * Get signon
   * @return signon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OktaSignOnPolicyRuleSignonActions getSignon() {
    return signon;
  }


  public void setSignon(OktaSignOnPolicyRuleSignonActions signon) {
    
    
    
    this.signon = signon;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PolicyRuleActions instance itself
   */
  public PolicyRuleActions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyRuleActions policyRuleActions = (PolicyRuleActions) o;
    return Objects.equals(this.enroll, policyRuleActions.enroll) &&
        Objects.equals(this.idp, policyRuleActions.idp) &&
        Objects.equals(this.passwordChange, policyRuleActions.passwordChange) &&
        Objects.equals(this.selfServicePasswordReset, policyRuleActions.selfServicePasswordReset) &&
        Objects.equals(this.selfServiceUnlock, policyRuleActions.selfServiceUnlock) &&
        Objects.equals(this.signon, policyRuleActions.signon)&&
        Objects.equals(this.additionalProperties, policyRuleActions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enroll, idp, passwordChange, selfServicePasswordReset, selfServiceUnlock, signon, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyRuleActions {\n");
    sb.append("    enroll: ").append(toIndentedString(enroll)).append("\n");
    sb.append("    idp: ").append(toIndentedString(idp)).append("\n");
    sb.append("    passwordChange: ").append(toIndentedString(passwordChange)).append("\n");
    sb.append("    selfServicePasswordReset: ").append(toIndentedString(selfServicePasswordReset)).append("\n");
    sb.append("    selfServiceUnlock: ").append(toIndentedString(selfServiceUnlock)).append("\n");
    sb.append("    signon: ").append(toIndentedString(signon)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enroll");
    openapiFields.add("idp");
    openapiFields.add("passwordChange");
    openapiFields.add("selfServicePasswordReset");
    openapiFields.add("selfServiceUnlock");
    openapiFields.add("signon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PolicyRuleActions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PolicyRuleActions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyRuleActions is not found in the empty JSON string", PolicyRuleActions.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `enroll`
      if (jsonObj.get("enroll") != null && !jsonObj.get("enroll").isJsonNull()) {
        PolicyRuleActionsEnroll.validateJsonObject(jsonObj.getAsJsonObject("enroll"));
      }
      // validate the optional field `idp`
      if (jsonObj.get("idp") != null && !jsonObj.get("idp").isJsonNull()) {
        IdpPolicyRuleAction.validateJsonObject(jsonObj.getAsJsonObject("idp"));
      }
      // validate the optional field `passwordChange`
      if (jsonObj.get("passwordChange") != null && !jsonObj.get("passwordChange").isJsonNull()) {
        PasswordPolicyRuleAction.validateJsonObject(jsonObj.getAsJsonObject("passwordChange"));
      }
      // validate the optional field `selfServicePasswordReset`
      if (jsonObj.get("selfServicePasswordReset") != null && !jsonObj.get("selfServicePasswordReset").isJsonNull()) {
        PasswordPolicyRuleAction.validateJsonObject(jsonObj.getAsJsonObject("selfServicePasswordReset"));
      }
      // validate the optional field `selfServiceUnlock`
      if (jsonObj.get("selfServiceUnlock") != null && !jsonObj.get("selfServiceUnlock").isJsonNull()) {
        PasswordPolicyRuleAction.validateJsonObject(jsonObj.getAsJsonObject("selfServiceUnlock"));
      }
      // validate the optional field `signon`
      if (jsonObj.get("signon") != null && !jsonObj.get("signon").isJsonNull()) {
        OktaSignOnPolicyRuleSignonActions.validateJsonObject(jsonObj.getAsJsonObject("signon"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyRuleActions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyRuleActions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyRuleActions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyRuleActions.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyRuleActions>() {
           @Override
           public void write(JsonWriter out, PolicyRuleActions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyRuleActions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PolicyRuleActions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PolicyRuleActions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PolicyRuleActions
  * @throws IOException if the JSON string is invalid with respect to PolicyRuleActions
  */
  public static PolicyRuleActions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyRuleActions.class);
  }

 /**
  * Convert an instance of PolicyRuleActions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

