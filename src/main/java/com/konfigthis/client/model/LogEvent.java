/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LogActor;
import com.konfigthis.client.model.LogAuthenticationContext;
import com.konfigthis.client.model.LogClient;
import com.konfigthis.client.model.LogDebugContext;
import com.konfigthis.client.model.LogOutcome;
import com.konfigthis.client.model.LogRequest;
import com.konfigthis.client.model.LogSecurityContext;
import com.konfigthis.client.model.LogSeverity;
import com.konfigthis.client.model.LogTarget;
import com.konfigthis.client.model.LogTransaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LogEvent
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LogEvent {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private LogActor actor;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONTEXT = "authenticationContext";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONTEXT)
  private LogAuthenticationContext authenticationContext;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private LogClient client;

  public static final String SERIALIZED_NAME_DEBUG_CONTEXT = "debugContext";
  @SerializedName(SERIALIZED_NAME_DEBUG_CONTEXT)
  private LogDebugContext debugContext;

  public static final String SERIALIZED_NAME_DISPLAY_MESSAGE = "displayMessage";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MESSAGE)
  private String displayMessage;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_LEGACY_EVENT_TYPE = "legacyEventType";
  @SerializedName(SERIALIZED_NAME_LEGACY_EVENT_TYPE)
  private String legacyEventType;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private LogOutcome outcome;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private OffsetDateTime published;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private LogRequest request;

  public static final String SERIALIZED_NAME_SECURITY_CONTEXT = "securityContext";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONTEXT)
  private LogSecurityContext securityContext;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private LogSeverity severity;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private List<LogTarget> target = null;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private LogTransaction transaction;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public LogEvent() {
  }

  
  public LogEvent(
     String version, 
     String displayMessage, 
     String eventType, 
     String legacyEventType, 
     OffsetDateTime published, 
     List<LogTarget> target, 
     String uuid
  ) {
    this();
    this.version = version;
    this.displayMessage = displayMessage;
    this.eventType = eventType;
    this.legacyEventType = legacyEventType;
    this.published = published;
    this.target = target;
    this.uuid = uuid;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersion() {
    return version;
  }




  public LogEvent actor(LogActor actor) {
    
    
    
    
    this.actor = actor;
    return this;
  }

   /**
   * Get actor
   * @return actor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogActor getActor() {
    return actor;
  }


  public void setActor(LogActor actor) {
    
    
    
    this.actor = actor;
  }


  public LogEvent authenticationContext(LogAuthenticationContext authenticationContext) {
    
    
    
    
    this.authenticationContext = authenticationContext;
    return this;
  }

   /**
   * Get authenticationContext
   * @return authenticationContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogAuthenticationContext getAuthenticationContext() {
    return authenticationContext;
  }


  public void setAuthenticationContext(LogAuthenticationContext authenticationContext) {
    
    
    
    this.authenticationContext = authenticationContext;
  }


  public LogEvent client(LogClient client) {
    
    
    
    
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogClient getClient() {
    return client;
  }


  public void setClient(LogClient client) {
    
    
    
    this.client = client;
  }


  public LogEvent debugContext(LogDebugContext debugContext) {
    
    
    
    
    this.debugContext = debugContext;
    return this;
  }

   /**
   * Get debugContext
   * @return debugContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogDebugContext getDebugContext() {
    return debugContext;
  }


  public void setDebugContext(LogDebugContext debugContext) {
    
    
    
    this.debugContext = debugContext;
  }


   /**
   * Get displayMessage
   * @return displayMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayMessage() {
    return displayMessage;
  }




   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventType() {
    return eventType;
  }




   /**
   * Get legacyEventType
   * @return legacyEventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLegacyEventType() {
    return legacyEventType;
  }




  public LogEvent outcome(LogOutcome outcome) {
    
    
    
    
    this.outcome = outcome;
    return this;
  }

   /**
   * Get outcome
   * @return outcome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogOutcome getOutcome() {
    return outcome;
  }


  public void setOutcome(LogOutcome outcome) {
    
    
    
    this.outcome = outcome;
  }


   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPublished() {
    return published;
  }




  public LogEvent request(LogRequest request) {
    
    
    
    
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogRequest getRequest() {
    return request;
  }


  public void setRequest(LogRequest request) {
    
    
    
    this.request = request;
  }


  public LogEvent securityContext(LogSecurityContext securityContext) {
    
    
    
    
    this.securityContext = securityContext;
    return this;
  }

   /**
   * Get securityContext
   * @return securityContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogSecurityContext getSecurityContext() {
    return securityContext;
  }


  public void setSecurityContext(LogSecurityContext securityContext) {
    
    
    
    this.securityContext = securityContext;
  }


  public LogEvent severity(LogSeverity severity) {
    
    
    
    
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogSeverity getSeverity() {
    return severity;
  }


  public void setSeverity(LogSeverity severity) {
    
    
    
    this.severity = severity;
  }


   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LogTarget> getTarget() {
    return target;
  }




  public LogEvent transaction(LogTransaction transaction) {
    
    
    
    
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LogTransaction getTransaction() {
    return transaction;
  }


  public void setTransaction(LogTransaction transaction) {
    
    
    
    this.transaction = transaction;
  }


   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUuid() {
    return uuid;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LogEvent instance itself
   */
  public LogEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogEvent logEvent = (LogEvent) o;
    return Objects.equals(this.version, logEvent.version) &&
        Objects.equals(this.actor, logEvent.actor) &&
        Objects.equals(this.authenticationContext, logEvent.authenticationContext) &&
        Objects.equals(this.client, logEvent.client) &&
        Objects.equals(this.debugContext, logEvent.debugContext) &&
        Objects.equals(this.displayMessage, logEvent.displayMessage) &&
        Objects.equals(this.eventType, logEvent.eventType) &&
        Objects.equals(this.legacyEventType, logEvent.legacyEventType) &&
        Objects.equals(this.outcome, logEvent.outcome) &&
        Objects.equals(this.published, logEvent.published) &&
        Objects.equals(this.request, logEvent.request) &&
        Objects.equals(this.securityContext, logEvent.securityContext) &&
        Objects.equals(this.severity, logEvent.severity) &&
        Objects.equals(this.target, logEvent.target) &&
        Objects.equals(this.transaction, logEvent.transaction) &&
        Objects.equals(this.uuid, logEvent.uuid)&&
        Objects.equals(this.additionalProperties, logEvent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, actor, authenticationContext, client, debugContext, displayMessage, eventType, legacyEventType, outcome, published, request, securityContext, severity, target, transaction, uuid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogEvent {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    authenticationContext: ").append(toIndentedString(authenticationContext)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    debugContext: ").append(toIndentedString(debugContext)).append("\n");
    sb.append("    displayMessage: ").append(toIndentedString(displayMessage)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    legacyEventType: ").append(toIndentedString(legacyEventType)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    securityContext: ").append(toIndentedString(securityContext)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("actor");
    openapiFields.add("authenticationContext");
    openapiFields.add("client");
    openapiFields.add("debugContext");
    openapiFields.add("displayMessage");
    openapiFields.add("eventType");
    openapiFields.add("legacyEventType");
    openapiFields.add("outcome");
    openapiFields.add("published");
    openapiFields.add("request");
    openapiFields.add("securityContext");
    openapiFields.add("severity");
    openapiFields.add("target");
    openapiFields.add("transaction");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LogEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LogEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogEvent is not found in the empty JSON string", LogEvent.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        LogActor.validateJsonObject(jsonObj.getAsJsonObject("actor"));
      }
      // validate the optional field `authenticationContext`
      if (jsonObj.get("authenticationContext") != null && !jsonObj.get("authenticationContext").isJsonNull()) {
        LogAuthenticationContext.validateJsonObject(jsonObj.getAsJsonObject("authenticationContext"));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        LogClient.validateJsonObject(jsonObj.getAsJsonObject("client"));
      }
      // validate the optional field `debugContext`
      if (jsonObj.get("debugContext") != null && !jsonObj.get("debugContext").isJsonNull()) {
        LogDebugContext.validateJsonObject(jsonObj.getAsJsonObject("debugContext"));
      }
      if ((jsonObj.get("displayMessage") != null && !jsonObj.get("displayMessage").isJsonNull()) && !jsonObj.get("displayMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMessage").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("legacyEventType") != null && !jsonObj.get("legacyEventType").isJsonNull()) && !jsonObj.get("legacyEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyEventType").toString()));
      }
      // validate the optional field `outcome`
      if (jsonObj.get("outcome") != null && !jsonObj.get("outcome").isJsonNull()) {
        LogOutcome.validateJsonObject(jsonObj.getAsJsonObject("outcome"));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        LogRequest.validateJsonObject(jsonObj.getAsJsonObject("request"));
      }
      // validate the optional field `securityContext`
      if (jsonObj.get("securityContext") != null && !jsonObj.get("securityContext").isJsonNull()) {
        LogSecurityContext.validateJsonObject(jsonObj.getAsJsonObject("securityContext"));
      }
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        JsonArray jsonArraytarget = jsonObj.getAsJsonArray("target");
        if (jsonArraytarget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target` to be an array in the JSON string but got `%s`", jsonObj.get("target").toString()));
          }

          // validate the optional field `target` (array)
          for (int i = 0; i < jsonArraytarget.size(); i++) {
            LogTarget.validateJsonObject(jsonArraytarget.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        LogTransaction.validateJsonObject(jsonObj.getAsJsonObject("transaction"));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<LogEvent>() {
           @Override
           public void write(JsonWriter out, LogEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LogEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LogEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LogEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LogEvent
  * @throws IOException if the JSON string is invalid with respect to LogEvent
  */
  public static LogEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogEvent.class);
  }

 /**
  * Convert an instance of LogEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

