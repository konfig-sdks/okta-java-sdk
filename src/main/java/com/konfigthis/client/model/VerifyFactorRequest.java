/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VerifyFactorRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VerifyFactorRequest {
  public static final String SERIALIZED_NAME_ACTIVATION_TOKEN = "activationToken";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_TOKEN)
  private String activationToken;

  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private String answer;

  public static final String SERIALIZED_NAME_ATTESTATION = "attestation";
  @SerializedName(SERIALIZED_NAME_ATTESTATION)
  private String attestation;

  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private String clientData;

  public static final String SERIALIZED_NAME_NEXT_PASS_CODE = "nextPassCode";
  @SerializedName(SERIALIZED_NAME_NEXT_PASS_CODE)
  private String nextPassCode;

  public static final String SERIALIZED_NAME_PASS_CODE = "passCode";
  @SerializedName(SERIALIZED_NAME_PASS_CODE)
  private String passCode;

  public static final String SERIALIZED_NAME_REGISTRATION_DATA = "registrationData";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATA)
  private String registrationData;

  public static final String SERIALIZED_NAME_STATE_TOKEN = "stateToken";
  @SerializedName(SERIALIZED_NAME_STATE_TOKEN)
  private String stateToken;

  public VerifyFactorRequest() {
  }

  public VerifyFactorRequest activationToken(String activationToken) {
    
    
    
    
    this.activationToken = activationToken;
    return this;
  }

   /**
   * Get activationToken
   * @return activationToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getActivationToken() {
    return activationToken;
  }


  public void setActivationToken(String activationToken) {
    
    
    
    this.activationToken = activationToken;
  }


  public VerifyFactorRequest answer(String answer) {
    
    
    
    
    this.answer = answer;
    return this;
  }

   /**
   * Get answer
   * @return answer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAnswer() {
    return answer;
  }


  public void setAnswer(String answer) {
    
    
    
    this.answer = answer;
  }


  public VerifyFactorRequest attestation(String attestation) {
    
    
    
    
    this.attestation = attestation;
    return this;
  }

   /**
   * Get attestation
   * @return attestation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttestation() {
    return attestation;
  }


  public void setAttestation(String attestation) {
    
    
    
    this.attestation = attestation;
  }


  public VerifyFactorRequest clientData(String clientData) {
    
    
    
    
    this.clientData = clientData;
    return this;
  }

   /**
   * Get clientData
   * @return clientData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientData() {
    return clientData;
  }


  public void setClientData(String clientData) {
    
    
    
    this.clientData = clientData;
  }


  public VerifyFactorRequest nextPassCode(String nextPassCode) {
    
    
    
    
    this.nextPassCode = nextPassCode;
    return this;
  }

   /**
   * Get nextPassCode
   * @return nextPassCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNextPassCode() {
    return nextPassCode;
  }


  public void setNextPassCode(String nextPassCode) {
    
    
    
    this.nextPassCode = nextPassCode;
  }


  public VerifyFactorRequest passCode(String passCode) {
    
    
    
    
    this.passCode = passCode;
    return this;
  }

   /**
   * Get passCode
   * @return passCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassCode() {
    return passCode;
  }


  public void setPassCode(String passCode) {
    
    
    
    this.passCode = passCode;
  }


  public VerifyFactorRequest registrationData(String registrationData) {
    
    
    
    
    this.registrationData = registrationData;
    return this;
  }

   /**
   * Get registrationData
   * @return registrationData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegistrationData() {
    return registrationData;
  }


  public void setRegistrationData(String registrationData) {
    
    
    
    this.registrationData = registrationData;
  }


  public VerifyFactorRequest stateToken(String stateToken) {
    
    
    
    
    this.stateToken = stateToken;
    return this;
  }

   /**
   * Get stateToken
   * @return stateToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStateToken() {
    return stateToken;
  }


  public void setStateToken(String stateToken) {
    
    
    
    this.stateToken = stateToken;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VerifyFactorRequest instance itself
   */
  public VerifyFactorRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyFactorRequest verifyFactorRequest = (VerifyFactorRequest) o;
    return Objects.equals(this.activationToken, verifyFactorRequest.activationToken) &&
        Objects.equals(this.answer, verifyFactorRequest.answer) &&
        Objects.equals(this.attestation, verifyFactorRequest.attestation) &&
        Objects.equals(this.clientData, verifyFactorRequest.clientData) &&
        Objects.equals(this.nextPassCode, verifyFactorRequest.nextPassCode) &&
        Objects.equals(this.passCode, verifyFactorRequest.passCode) &&
        Objects.equals(this.registrationData, verifyFactorRequest.registrationData) &&
        Objects.equals(this.stateToken, verifyFactorRequest.stateToken)&&
        Objects.equals(this.additionalProperties, verifyFactorRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationToken, answer, attestation, clientData, nextPassCode, passCode, registrationData, stateToken, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyFactorRequest {\n");
    sb.append("    activationToken: ").append(toIndentedString(activationToken)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    attestation: ").append(toIndentedString(attestation)).append("\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    nextPassCode: ").append(toIndentedString(nextPassCode)).append("\n");
    sb.append("    passCode: ").append(toIndentedString(passCode)).append("\n");
    sb.append("    registrationData: ").append(toIndentedString(registrationData)).append("\n");
    sb.append("    stateToken: ").append(toIndentedString(stateToken)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationToken");
    openapiFields.add("answer");
    openapiFields.add("attestation");
    openapiFields.add("clientData");
    openapiFields.add("nextPassCode");
    openapiFields.add("passCode");
    openapiFields.add("registrationData");
    openapiFields.add("stateToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerifyFactorRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VerifyFactorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyFactorRequest is not found in the empty JSON string", VerifyFactorRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("activationToken") != null && !jsonObj.get("activationToken").isJsonNull()) && !jsonObj.get("activationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationToken").toString()));
      }
      if ((jsonObj.get("answer") != null && !jsonObj.get("answer").isJsonNull()) && !jsonObj.get("answer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer").toString()));
      }
      if ((jsonObj.get("attestation") != null && !jsonObj.get("attestation").isJsonNull()) && !jsonObj.get("attestation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attestation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attestation").toString()));
      }
      if ((jsonObj.get("clientData") != null && !jsonObj.get("clientData").isJsonNull()) && !jsonObj.get("clientData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientData").toString()));
      }
      if ((jsonObj.get("nextPassCode") != null && !jsonObj.get("nextPassCode").isJsonNull()) && !jsonObj.get("nextPassCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPassCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPassCode").toString()));
      }
      if ((jsonObj.get("passCode") != null && !jsonObj.get("passCode").isJsonNull()) && !jsonObj.get("passCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passCode").toString()));
      }
      if ((jsonObj.get("registrationData") != null && !jsonObj.get("registrationData").isJsonNull()) && !jsonObj.get("registrationData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationData").toString()));
      }
      if ((jsonObj.get("stateToken") != null && !jsonObj.get("stateToken").isJsonNull()) && !jsonObj.get("stateToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyFactorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyFactorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyFactorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyFactorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyFactorRequest>() {
           @Override
           public void write(JsonWriter out, VerifyFactorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyFactorRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VerifyFactorRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerifyFactorRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerifyFactorRequest
  * @throws IOException if the JSON string is invalid with respect to VerifyFactorRequest
  */
  public static VerifyFactorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyFactorRequest.class);
  }

 /**
  * Convert an instance of VerifyFactorRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

