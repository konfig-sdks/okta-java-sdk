/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NetworkZoneAddress;
import com.konfigthis.client.model.NetworkZoneLocation;
import com.konfigthis.client.model.NetworkZoneStatus;
import com.konfigthis.client.model.NetworkZoneType;
import com.konfigthis.client.model.NetworkZoneUsage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NetworkZone
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NetworkZone {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, Object> links = null;

  public static final String SERIALIZED_NAME_ASNS = "asns";
  @SerializedName(SERIALIZED_NAME_ASNS)
  private List<String> asns = null;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_GATEWAYS = "gateways";
  @SerializedName(SERIALIZED_NAME_GATEWAYS)
  private List<NetworkZoneAddress> gateways = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<NetworkZoneLocation> locations = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROXIES = "proxies";
  @SerializedName(SERIALIZED_NAME_PROXIES)
  private List<NetworkZoneAddress> proxies = null;

  public static final String SERIALIZED_NAME_PROXY_TYPE = "proxyType";
  @SerializedName(SERIALIZED_NAME_PROXY_TYPE)
  private String proxyType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NetworkZoneStatus status;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NetworkZoneType type;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private NetworkZoneUsage usage;

  public NetworkZone() {
  }

  
  public NetworkZone(
     Map<String, Object> links, 
     OffsetDateTime created, 
     String id, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.links = links;
    this.created = created;
    this.id = id;
    this.lastUpdated = lastUpdated;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getLinks() {
    return links;
  }




  public NetworkZone asns(List<String> asns) {
    
    
    
    
    this.asns = asns;
    return this;
  }

  public NetworkZone addAsnsItem(String asnsItem) {
    if (this.asns == null) {
      this.asns = new ArrayList<>();
    }
    this.asns.add(asnsItem);
    return this;
  }

   /**
   * Get asns
   * @return asns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAsns() {
    return asns;
  }


  public void setAsns(List<String> asns) {
    
    
    
    this.asns = asns;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }




  public NetworkZone gateways(List<NetworkZoneAddress> gateways) {
    
    
    
    
    this.gateways = gateways;
    return this;
  }

  public NetworkZone addGatewaysItem(NetworkZoneAddress gatewaysItem) {
    if (this.gateways == null) {
      this.gateways = new ArrayList<>();
    }
    this.gateways.add(gatewaysItem);
    return this;
  }

   /**
   * Get gateways
   * @return gateways
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NetworkZoneAddress> getGateways() {
    return gateways;
  }


  public void setGateways(List<NetworkZoneAddress> gateways) {
    
    
    
    this.gateways = gateways;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }




  public NetworkZone locations(List<NetworkZoneLocation> locations) {
    
    
    
    
    this.locations = locations;
    return this;
  }

  public NetworkZone addLocationsItem(NetworkZoneLocation locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NetworkZoneLocation> getLocations() {
    return locations;
  }


  public void setLocations(List<NetworkZoneLocation> locations) {
    
    
    
    this.locations = locations;
  }


  public NetworkZone name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public NetworkZone proxies(List<NetworkZoneAddress> proxies) {
    
    
    
    
    this.proxies = proxies;
    return this;
  }

  public NetworkZone addProxiesItem(NetworkZoneAddress proxiesItem) {
    if (this.proxies == null) {
      this.proxies = new ArrayList<>();
    }
    this.proxies.add(proxiesItem);
    return this;
  }

   /**
   * Get proxies
   * @return proxies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NetworkZoneAddress> getProxies() {
    return proxies;
  }


  public void setProxies(List<NetworkZoneAddress> proxies) {
    
    
    
    this.proxies = proxies;
  }


  public NetworkZone proxyType(String proxyType) {
    
    
    
    
    this.proxyType = proxyType;
    return this;
  }

   /**
   * Get proxyType
   * @return proxyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProxyType() {
    return proxyType;
  }


  public void setProxyType(String proxyType) {
    
    
    
    this.proxyType = proxyType;
  }


  public NetworkZone status(NetworkZoneStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkZoneStatus getStatus() {
    return status;
  }


  public void setStatus(NetworkZoneStatus status) {
    
    
    
    this.status = status;
  }


  public NetworkZone system(Boolean system) {
    
    
    
    
    this.system = system;
    return this;
  }

   /**
   * Get system
   * @return system
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSystem() {
    return system;
  }


  public void setSystem(Boolean system) {
    
    
    
    this.system = system;
  }


  public NetworkZone type(NetworkZoneType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkZoneType getType() {
    return type;
  }


  public void setType(NetworkZoneType type) {
    
    
    
    this.type = type;
  }


  public NetworkZone usage(NetworkZoneUsage usage) {
    
    
    
    
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkZoneUsage getUsage() {
    return usage;
  }


  public void setUsage(NetworkZoneUsage usage) {
    
    
    
    this.usage = usage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NetworkZone instance itself
   */
  public NetworkZone putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkZone networkZone = (NetworkZone) o;
    return Objects.equals(this.links, networkZone.links) &&
        Objects.equals(this.asns, networkZone.asns) &&
        Objects.equals(this.created, networkZone.created) &&
        Objects.equals(this.gateways, networkZone.gateways) &&
        Objects.equals(this.id, networkZone.id) &&
        Objects.equals(this.lastUpdated, networkZone.lastUpdated) &&
        Objects.equals(this.locations, networkZone.locations) &&
        Objects.equals(this.name, networkZone.name) &&
        Objects.equals(this.proxies, networkZone.proxies) &&
        Objects.equals(this.proxyType, networkZone.proxyType) &&
        Objects.equals(this.status, networkZone.status) &&
        Objects.equals(this.system, networkZone.system) &&
        Objects.equals(this.type, networkZone.type) &&
        Objects.equals(this.usage, networkZone.usage)&&
        Objects.equals(this.additionalProperties, networkZone.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, asns, created, gateways, id, lastUpdated, locations, name, proxies, proxyType, status, system, type, usage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkZone {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    asns: ").append(toIndentedString(asns)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    gateways: ").append(toIndentedString(gateways)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    proxies: ").append(toIndentedString(proxies)).append("\n");
    sb.append("    proxyType: ").append(toIndentedString(proxyType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("asns");
    openapiFields.add("created");
    openapiFields.add("gateways");
    openapiFields.add("id");
    openapiFields.add("lastUpdated");
    openapiFields.add("locations");
    openapiFields.add("name");
    openapiFields.add("proxies");
    openapiFields.add("proxyType");
    openapiFields.add("status");
    openapiFields.add("system");
    openapiFields.add("type");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NetworkZone
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NetworkZone.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkZone is not found in the empty JSON string", NetworkZone.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("asns") != null && !jsonObj.get("asns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `asns` to be an array in the JSON string but got `%s`", jsonObj.get("asns").toString()));
      }
      if (jsonObj.get("gateways") != null && !jsonObj.get("gateways").isJsonNull()) {
        JsonArray jsonArraygateways = jsonObj.getAsJsonArray("gateways");
        if (jsonArraygateways != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gateways").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gateways` to be an array in the JSON string but got `%s`", jsonObj.get("gateways").toString()));
          }

          // validate the optional field `gateways` (array)
          for (int i = 0; i < jsonArraygateways.size(); i++) {
            NetworkZoneAddress.validateJsonObject(jsonArraygateways.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            NetworkZoneLocation.validateJsonObject(jsonArraylocations.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("proxies") != null && !jsonObj.get("proxies").isJsonNull()) {
        JsonArray jsonArrayproxies = jsonObj.getAsJsonArray("proxies");
        if (jsonArrayproxies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("proxies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `proxies` to be an array in the JSON string but got `%s`", jsonObj.get("proxies").toString()));
          }

          // validate the optional field `proxies` (array)
          for (int i = 0; i < jsonArrayproxies.size(); i++) {
            NetworkZoneAddress.validateJsonObject(jsonArrayproxies.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("proxyType") != null && !jsonObj.get("proxyType").isJsonNull()) && !jsonObj.get("proxyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkZone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkZone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkZone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkZone.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkZone>() {
           @Override
           public void write(JsonWriter out, NetworkZone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkZone read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NetworkZone instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NetworkZone given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NetworkZone
  * @throws IOException if the JSON string is invalid with respect to NetworkZone
  */
  public static NetworkZone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkZone.class);
  }

 /**
  * Convert an instance of NetworkZone to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

